{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"git-change-operator","text":"<p>A Kubernetes operator that enables automated Git operations from within clusters. Commit files directly or reference existing Kubernetes resources (Secrets, ConfigMaps, etc.) and push them to Git repositories with flexible output strategies.</p> <p>Docs: https://galos.one/git-change-operator</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Direct File Commits: Commit static file content to Git repositories</li> <li>Resource References: Reference arbitrary Kubernetes resources and commit their data</li> <li>Flexible Output Strategies: </li> <li>Dump entire resources as YAML</li> <li>Extract all resource fields as separate files</li> <li>Extract specific fields with custom naming</li> <li>Write Modes: Overwrite or append to existing files</li> <li>Git Operations: Support for both direct commits and pull requests</li> <li>File Encryption: Age-based encryption with support for SSH keys, age keys, and passphrases</li> <li>Secure Authentication: Uses Kubernetes Secrets for Git authentication</li> </ul>"},{"location":"#minimal-demo","title":"Minimal demo","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: resource-backup\n  namespace: my-namespace\nspec:\n  repository:\n    url: \"https://github.com/your-username/k8s-backups.git\"\n    branch: \"main\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Git Change Operator &lt;gco@example.com&gt;\"\n    message: \"Automated backup of cluster resources\"\n\n  resourceReferences:\n    # Backup ConfigMap as complete YAML\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"dump\"\n      output:\n        path: \"backups/configmaps/app-config.yaml\"\n</code></pre>"},{"location":"#minimal-demo-using-self-hosted-kind-cluster","title":"Minimal demo using self-hosted Kind cluster","text":"<p>Please have a token (preferably fine-grained) with fine-grained permissions ready, the following step asks for it if not already present in a git-ignored file called <code>token</code> in this repo.</p> <pre><code>make kind-full-demo\n</code></pre>"},{"location":"#resource-reference-capabilities","title":"Resource Reference Capabilities","text":"<p>The operator can reference any Kubernetes resource and extract its data using various strategies:</p>"},{"location":"#output-strategies","title":"Output Strategies","text":"<ol> <li>Dump: Output entire resource as YAML</li> <li>Fields: Extract all data fields as separate files  </li> <li>Single-Field: Extract specific fields with custom naming</li> </ol>"},{"location":"#write-modes","title":"Write Modes","text":"<ul> <li>Overwrite: Replace file content (default)</li> <li>Append: Add to existing file content</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph TB\n    %% User creates resources\n    User[\"\ud83d\udc64 User\"] --&gt;|creates| A[\"\ud83d\udcc4 GitCommit/PullRequest CR\"]\n\n    %% Operator watches and processes\n    B[\"\u2699\ufe0f Git Change Operator\"] --&gt;|watches| A\n\n    %% Operator reads from K8s Cluster\n    B --&gt;|reads data from| D[\"\u2638\ufe0f K8s Cluster\"]\n    D --&gt;|contains| E[\"\ud83d\udce6 ConfigMaps\"]\n    D --&gt;|contains| F[\"\ud83d\udd10 Secrets\"] \n\n    %% Operator authenticates and writes to Git\n    B --&gt;|clones/pulls| C[\"\ud83d\udcda Git Repository\"]\n    B --&gt;|commits &amp; pushes| C\n    B --&gt;|creates PR| G[\"\ud83d\udc19 GitHub\"]\n\n    %% Repository states\n\n    %% Styling\n    classDef userAction fill:#e1f5fe\n    classDef operator fill:#f3e5f5\n    classDef k8sResource fill:#e8f5e8\n    classDef gitResource fill:#fff3e0\n    classDef github fill:#f6f8fa\n\n    class User userAction\n    class B operator\n    class D,E,F k8sResource\n    class C gitResource\n    class G github</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#configuration-management","title":"Configuration Management","text":"<p>Export cluster configuration to Git repositories for backup and version control.</p>"},{"location":"#gitops-workflows","title":"GitOps Workflows","text":"<p>Automatically update Git repositories when cluster state changes, enabling bidirectional GitOps.</p>"},{"location":"#compliance-auditing","title":"Compliance &amp; Auditing","text":"<p>Maintain Git history of configuration changes for compliance and audit trails.</p>"},{"location":"#multi-cluster-synchronization","title":"Multi-Cluster Synchronization","text":"<p>Share configuration between clusters through Git repositories.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li> <p> Get Started</p> <p>Install the operator and create a first GitCommit resource in minutes.</p> <p> Quick Start</p> </li> <li> <p> User Guide</p> <p>Complete guide covering installation, configuration, and usage patterns.</p> <p> User Guide</p> </li> <li> <p> Examples</p> <p>Real-world examples and use cases with complete YAML configurations.</p> <p> Examples</p> </li> <li> <p> API Reference</p> <p>Complete API documentation and CRD specifications.</p> <p> Reference</p> </li> <li> <p> Security</p> <p>Production security considerations and RBAC configuration.</p> <p> Security Considerations</p> </li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"embedded-chart/","title":"Embedded Helm Chart","text":"<p>The git-change-operator Docker image includes the Helm chart for easy deployment without needing to clone the repository.</p>"},{"location":"embedded-chart/#extracting-the-chart","title":"Extracting the Chart","text":"<pre><code># Extract the chart from the image\ndocker create --name temp-container ghcr.io/mihaigalos/git-change-operator:latest\ndocker cp temp-container:/helm/git-change-operator ./chart\ndocker rm temp-container\n\n# Use the extracted chart with Helm\nhelm install git-change-operator ./chart --namespace git-change-operator-system --create-namespace\n</code></pre> <p>The Helm chart is located at <code>/helm/git-change-operator</code> in the Docker image.</p>"},{"location":"security/","title":"Security Considerations","text":"<p>Warning</p> <p>The default RBAC configuration grants broad read permissions (<code>\"*\"</code>) across all API groups and resources. This is NOT recommended for production environments.</p>"},{"location":"security/#production-deployment","title":"Production Deployment","text":"<p>For production deployments, use the production values file with specific RBAC permissions:</p> <pre><code># Add the Helm repository\nhelm repo add git-change-operator https://raw.githubusercontent.com/mihaigalos/git-change-operator/helm-chart/\nhelm repo update\n\n# Install with production security configuration\nhelm install git-change-operator git-change-operator/git-change-operator \\\n  --create-namespace \\\n  --namespace git-change-operator-system \\\n  --values https://raw.githubusercontent.com/mihaigalos/git-change-operator/main/helm/git-change-operator/values-production.yaml\n</code></pre>"},{"location":"security/#custom-rbac-configuration","title":"Custom RBAC Configuration","text":"<p>The operator supports configurable RBAC permissions through Helm values. You can customize the permissions by setting:</p> <pre><code>rbac:\n  additionalReadPermissions:\n    # Disable wildcard permissions for production\n    enableWildcard: false\n\n    # Grant only specific permissions needed\n    specificPermissions:\n      - apiGroups: [\"\"]\n        resources: [\"configmaps\", \"secrets\", \"pods\"]\n      - apiGroups: [\"apps\"] \n        resources: [\"deployments\", \"replicasets\"]\n      - apiGroups: [\"networking.k8s.io\"]\n        resources: [\"ingresses\"]\n</code></pre>"},{"location":"security/#principle-of-least-privilege","title":"Principle of Least Privilege","text":"<p>The operator only needs read access to resources that GitCommit and PullRequest resources reference. Follow these guidelines:</p> <ol> <li>Start minimal: Begin with no additional permissions</li> <li>Add incrementally: Add specific permissions only as needed</li> <li>Audit regularly: Review and remove unused permissions</li> <li>Use production values: Always use the production configuration for production deployments</li> </ol>"},{"location":"security/#production-values-file","title":"Production Values File","text":"<p>The included <code>values-production.yaml</code> provides a secure baseline configuration:</p> <ul> <li>Disables wildcard RBAC permissions</li> <li>Includes only essential resource permissions</li> <li>Sets appropriate resource limits</li> <li>Configures security contexts</li> </ul>"},{"location":"security/#authentication-security","title":"Authentication Security","text":"<p>When configuring Git authentication:</p> <ol> <li>Use Kubernetes Secrets: Store credentials securely in Kubernetes Secrets or use an operator like the SealedSecrets Operator to store them encrypted in git and unseal them on the cluster</li> <li>Limit scope: Use deploy keys or tokens with minimal required permissions</li> <li>Rotate regularly: Implement regular credential rotation</li> <li>Audit access: Monitor and audit Git repository access</li> </ol>"},{"location":"security/#file-encryption-security","title":"File Encryption Security","text":"<p>The operator supports age-based encryption for protecting sensitive files before committing to Git repositories:</p>"},{"location":"security/#encryption-key-management","title":"Encryption Key Management","text":"<p>\ud83d\udd10 Best Practices for Encryption Keys:</p> <ol> <li>Use separate keys per environment: Different keys for dev/staging/production</li> <li>Store keys securely: Use Kubernetes Secrets with proper RBAC restrictions</li> <li>Rotate keys regularly: Implement key rotation procedures</li> <li>Prefer hardware keys for maximum security: YubiKey &gt; SSH/age keys &gt; passphrases</li> <li>YubiKey: Hardware-backed keys that never leave the device (highest security)</li> <li>SSH/age keys: File-based keys that provide good security</li> <li>Passphrases: Shared secrets with lower security (use sparingly)</li> <li>Document key ownership: Maintain records of who has access to which keys</li> </ol>"},{"location":"security/#secure-secret-configuration","title":"Secure Secret Configuration","text":"<pre><code># Restrict access to encryption secrets\napiVersion: v1\nkind: Secret\nmetadata:\n  name: encryption-keys\n  namespace: secure-namespace\n  labels:\n    encryption.gco.galos.one/purpose: \"file-encryption\"\ntype: Opaque\ndata:\n  id_rsa.pub: &lt;base64-encoded-ssh-public-key&gt;\n\n---\n# Create RBAC to limit access to encryption secrets\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: encryption-secret-access\n  namespace: secure-namespace\nrules:\n- apiGroups: [\"\"]\n  resources: [\"secrets\"]\n  resourceNames: [\"encryption-keys\"]\n  verbs: [\"get\"]\n</code></pre>"},{"location":"security/#encryption-security-benefits","title":"Encryption Security Benefits","text":"<ul> <li>Repository Safety: Sensitive files can be safely committed to public repositories</li> <li>Compliance: Meet security requirements for storing secrets in version control</li> <li>Audit Trail: Git history provides encryption timestamps and accountability</li> <li>Access Control: Only users with decryption keys can access sensitive content</li> <li>Zero Trust: Assume Git repositories may be compromised; encrypted files remain secure</li> </ul>"},{"location":"security/#security-considerations_1","title":"Security Considerations","text":"<p>\u26a0\ufe0f Important Security Notes:</p> <ul> <li>Encryption keys stored in Kubernetes Secrets are only as secure as your cluster's security</li> <li>Consider using external secret management systems (HashiCorp Vault, AWS Secrets Manager, etc.)</li> <li>Encrypted files are still visible in Git history; consider using separate repositories for highly sensitive data</li> <li>Test decryption processes regularly to ensure keys remain valid</li> <li>Implement backup and recovery procedures for encryption keys</li> </ul>"},{"location":"security/#additional-resources","title":"Additional Resources","text":"<ul> <li>Helm Chart Configuration</li> </ul>"},{"location":"development/","title":"Development","text":"<p>Welcome to the Git Change Operator development documentation. This section is for contributors and developers who want to understand the internals, contribute code, or extend the operator.</p>"},{"location":"development/#getting-started","title":"Getting Started","text":""},{"location":"development/#architecture-overview","title":"Architecture Overview","text":"<ul> <li>Controller architecture</li> <li>Resource processing flow</li> <li>Git operations workflow</li> <li>GitHub API integration</li> </ul>"},{"location":"development/#development-topics","title":"Development Topics","text":""},{"location":"development/#testing","title":"Testing","text":"<ul> <li>Unit tests</li> <li>Integration tests</li> <li>End-to-end tests</li> <li>Test environment setup</li> </ul>"},{"location":"development/architecture/","title":"Architecture","text":""},{"location":"development/architecture/#future-considerations","title":"Future Considerations","text":""},{"location":"development/architecture/#extensibility-points","title":"Extensibility Points","text":"<ol> <li>Custom Extractors: Plugin system for custom resource extraction strategies</li> <li>Git Providers: Support for additional Git providers beyond GitHub</li> <li>Authentication Methods: Support for SSH keys, OAuth, and other auth methods</li> <li>Webhook Integrations: Enhanced webhook support for validation and mutation</li> </ol>"},{"location":"development/architecture/#scalability-improvements","title":"Scalability Improvements","text":"<ol> <li>Horizontal Scaling: Multiple controller instances with work distribution</li> <li>Resource Sharding: Partition resources across controller instances</li> <li>Async Processing: Background processing for large operations</li> <li>Caching Layers: Distributed caching for resource data</li> </ol>"},{"location":"development/architecture/#security-enhancements","title":"Security Enhancements","text":"<ol> <li>Pod Security Standards: Enhanced pod security policies</li> <li>Network Policies: Stricter network isolation</li> <li>Secret Encryption: Enhanced secret handling and encryption</li> <li>Audit Logging: Comprehensive audit trail for all operations</li> </ol>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>This guide covers all aspects of testing the Git Change Operator, from unit tests to end-to-end integration testing in Kubernetes environments.</p>"},{"location":"development/testing/#overview","title":"Overview","text":"<p>The Git Change Operator uses a comprehensive testing strategy:</p> <ul> <li>Unit Tests - Test individual components in isolation</li> <li>Integration Tests - Test controller logic with fake Kubernetes API</li> <li>End-to-End Tests - Test complete workflows in real Kubernetes clusters</li> <li>Performance Tests - Validate operator performance under load</li> <li>Security Tests - Verify security configurations and policies</li> </ul>"},{"location":"development/testing/#quick-start","title":"Quick Start","text":""},{"location":"development/testing/#run-all-tests","title":"Run All Tests","text":"<pre><code># Run everything\nmake test-all\n\n# Just unit tests\nmake test\n\n# Just integration tests  \nmake test-integration\n\n# Just e2e tests\nmake test-e2e\n</code></pre>"},{"location":"development/testing/#test-configuration","title":"Test Configuration","text":"<p>Unit tests can be configured with environment variables:</p> <pre><code># Use different test timeout\nexport TEST_TIMEOUT=300s\nmake test\n\n# Enable debug logging\nexport TEST_DEBUG=true\nmake test\n\n# Use custom test assets\nexport TEST_ASSETS_DIR=/path/to/assets\nmake test\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>This section provides practical examples of using the Git Change Operator in various scenarios. Each example includes complete YAML configurations and explanations.</p>"},{"location":"examples/#basic-examples","title":"Basic Examples","text":""},{"location":"examples/#basic-gitcommit","title":"Basic GitCommit","text":"<ul> <li>Creating your first GitCommit resource</li> <li>Basic authentication setup</li> <li>Simple file creation</li> </ul>"},{"location":"examples/#gitcommit-with-resource-references","title":"GitCommit with Resource References","text":"<ul> <li>Resource reference strategies</li> <li>Dynamic file generation</li> <li>Multiple resource references</li> </ul>"},{"location":"examples/#pullrequest-creation","title":"PullRequest Creation","text":"<ul> <li>GitHub integration setup</li> <li>Branch management</li> <li>Pull request metadata</li> </ul>"},{"location":"examples/#advanced-scenarios","title":"Advanced Scenarios","text":""},{"location":"examples/#advanced-configurations","title":"Advanced Configurations","text":"<ul> <li>Mixed resource references</li> <li>Complex file structures</li> <li>Error handling strategies</li> </ul>"},{"location":"examples/#corporate-environment-setup","title":"Corporate Environment Setup","text":"<ul> <li>Proxy configuration</li> <li>Certificate management</li> <li>Security best practices</li> </ul>"},{"location":"examples/#quick-start","title":"Quick Start","text":"<p>If you're new to the Git Change Operator, start with the Basic GitCommit example and work your way through the more complex scenarios.</p>"},{"location":"examples/#example-repository-structure","title":"Example Repository Structure","text":"<p>All examples assume a typical repository structure:</p> <pre><code>your-repo/\n\u251c\u2500\u2500 manifests/           # Kubernetes manifests\n\u2502   \u251c\u2500\u2500 deployments/\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 configmaps/\n\u251c\u2500\u2500 docs/               # Documentation\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"examples/#prerequisites","title":"Prerequisites","text":"<p>Before running these examples, ensure you have:</p> <ol> <li>Kubernetes cluster with the Git Change Operator installed</li> <li>Git repository with appropriate permissions</li> <li>Authentication secrets properly configured</li> <li>kubectl access to your cluster</li> </ol> <p>See the Installation Guide for setup instructions.</p>"},{"location":"examples/advanced/","title":"Advanced Scenarios","text":"<p>This section covers complex use cases and advanced configurations for the Git Change Operator in production environments.</p>"},{"location":"examples/advanced/#multi-cluster-configuration-sync","title":"Multi-Cluster Configuration Sync","text":"<p>Synchronize configurations across multiple Kubernetes clusters using a centralized Git repository.</p>"},{"location":"examples/advanced/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"ClusterA\"\n        P1[Git Change Operator]\n        P1 --&gt;|reads| PC[k8s resources]\n    end\n\n    subgraph \"ClusterB\" \n        S1[Git Change Operator]\n        S1 --&gt;|reads| SC[k8s resources]\n    end\n\n    CR[Central Repo]\n\n    P1 --&gt;|commits| CR\n    S1 --&gt;|commits| CR\n    CR --&gt;|reads via GitOps| AG[ArgoCD/Flux]\n    AG --&gt;|deploys| PC\n    AG --&gt;|deploys| SC</code></pre>"},{"location":"examples/advanced/#central-configuration-repository-structure","title":"Central Configuration Repository Structure","text":"<pre><code>k8s-multi-cluster-config/\n\u251c\u2500\u2500 clusters/\n\u2502   \u251c\u2500\u2500 production/\n\u2502   \u2502   \u251c\u2500\u2500 applications/\n\u2502   \u2502   \u251c\u2500\u2500 infrastructure/\n\u2502   \u2502   \u2514\u2500\u2500 secrets/\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u251c\u2500\u2500 applications/\n\u2502   \u2502   \u251c\u2500\u2500 infrastructure/\n\u2502   \u2502   \u2514\u2500\u2500 secrets/\n\u2502   \u2514\u2500\u2500 development/\n\u2502       \u251c\u2500\u2500 applications/\n\u2502       \u251c\u2500\u2500 infrastructure/\n\u2502       \u2514\u2500\u2500 secrets/\n\u251c\u2500\u2500 shared/\n\u2502   \u251c\u2500\u2500 base-configs/\n\u2502   \u2514\u2500\u2500 policies/\n\u2514\u2500\u2500 environments/\n    \u251c\u2500\u2500 prod.yaml\n    \u251c\u2500\u2500 staging.yaml\n    \u2514\u2500\u2500 dev.yaml\n</code></pre>"},{"location":"examples/advanced/#production-cluster-gitcommit","title":"Production Cluster GitCommit","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: prod-cluster-sync\n  namespace: git-change-operator-system\nspec:\n  repository:\n    url: \"https://github.com/company/k8s-multi-cluster-config.git\"\n    branch: \"main\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Production Cluster &lt;prod-k8s@company.com&gt;\"\n    message: \"Sync production cluster configuration\"\n\n  files:\n    - path: \"clusters/production/cluster-info.yaml\"\n      content: |\n        cluster:\n          name: \"production-east-1\"\n          version: \"1.28.0\"\n          region: \"us-east-1\"\n          last_sync: \"2023-10-01T10:00:00Z\"\n\n  resourceReferences:\n    # Application configurations\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"fields\"\n      output:\n        path: \"clusters/production/applications/\"\n\n    # Infrastructure settings\n    - name: \"infra-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"kube-system\"\n      strategy: \"dump\"\n      output:\n        path: \"clusters/production/infrastructure/infra-config.yaml\"\n\n    # Network policies\n    - name: \"network-policies\"\n      apiVersion: \"networking.k8s.io/v1\"\n      kind: \"NetworkPolicy\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"clusters/production/network-policies.yaml\"\n</code></pre>"},{"location":"examples/advanced/#configuration-drift-detection","title":"Configuration Drift Detection","text":"<p>Implement automated detection and correction of configuration drift between clusters.</p>"},{"location":"examples/advanced/#drift-detection-gitcommit","title":"Drift Detection GitCommit","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: drift-detection\nspec:\n  repository:\n    url: \"https://github.com/company/config-drift-reports.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Drift Detector &lt;drift@company.com&gt;\"\n    message: \"Configuration drift report - $(date)\"\n\n  writeMode: \"append\"  # Accumulate drift reports\n\n  files:\n    - path: \"reports/drift-summary.log\"\n      content: |\n        === Drift Detection Report: 2023-10-01T10:00:00Z ===\n        Cluster: production-east-1\n        Baseline: staging-approved-configs\n\n  resourceReferences:\n    # Current production config\n    - name: \"current-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"snapshots/production/current-config-$(date +%Y%m%d).yaml\"\n\n    # Expected configuration from staging\n    - name: \"expected-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"staging\"\n      strategy: \"dump\"\n      output:\n        path: \"snapshots/expected/staging-config-$(date +%Y%m%d).yaml\"\n</code></pre>"},{"location":"examples/advanced/#disaster-recovery-automation","title":"Disaster Recovery Automation","text":"<p>Automate backup and restore procedures using GitCommit resources.</p>"},{"location":"examples/advanced/#complete-cluster-backup","title":"Complete Cluster Backup","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: disaster-recovery-backup\nspec:\n  repository:\n    url: \"https://github.com/company/cluster-backups.git\"\n    branch: \"backups/production\"\n\n  auth:\n    secretName: \"backup-credentials\"\n\n  commit:\n    author: \"Disaster Recovery &lt;dr@company.com&gt;\"\n    message: \"Full cluster backup - $(date)\"\n\n  files:\n    - path: \"backup-metadata/$(date +%Y%m%d)/cluster-info.yaml\"\n      content: |\n        backup:\n          timestamp: \"2023-10-01T10:00:00Z\"\n          cluster: \"production-east-1\"\n          kubernetes_version: \"1.28.0\"\n          backup_type: \"full\"\n          retention_days: 90\n\n  resourceReferences:\n    # Backup all ConfigMaps\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"backups/$(date +%Y%m%d)/configmaps/app-config.yaml\"\n\n    # Backup critical secrets (metadata only)\n    - name: \"tls-certificates\"\n      apiVersion: \"v1\"\n      kind: \"Secret\"\n      namespace: \"production\"\n      strategy: \"single-field\"\n      field: \"tls.crt\"  # Only certificate, not private key\n      output:\n        path: \"backups/$(date +%Y%m%d)/certificates/tls.crt\"\n\n    # Backup persistent volume claims\n    - name: \"database-pvc\"\n      apiVersion: \"v1\"\n      kind: \"PersistentVolumeClaim\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"backups/$(date +%Y%m%d)/storage/database-pvc.yaml\"\n</code></pre>"},{"location":"examples/advanced/#gitops-workflow-integration","title":"GitOps Workflow Integration","text":"<p>Integrate with GitOps tools for complete CI/CD automation.</p>"},{"location":"examples/advanced/#argocd-application-sync","title":"ArgoCD Application Sync","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: argocd-app-sync\nspec:\n  repository:\n    url: \"https://github.com/company/gitops-applications.git\"\n    baseBranch: \"main\"\n\n  auth:\n    secretName: \"github-token\"\n\n  pullRequest:\n    title: \"\ud83d\udd04 Sync Application Manifests from Cluster\"\n    body: |\n      ## ArgoCD Application Sync\n\n      This PR synchronizes actual cluster state with GitOps repository.\n\n      ### Changes Include:\n      - Updated resource specifications\n      - New application configurations\n      - Scaling adjustments\n\n      ### ArgoCD Applications Affected:\n      - `production/web-app`\n      - `production/api-service`  \n      - `production/database`\n\n      **Auto-merge**: \u2705 (if all checks pass)\n\n    branchPrefix: \"argocd-sync\"\n\n  resourceReferences:\n    # Sync web application\n    - name: \"web-app\"\n      apiVersion: \"apps/v1\"\n      kind: \"Deployment\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"applications/web-app/deployment.yaml\"\n\n    # Sync API service\n    - name: \"api-service\"\n      apiVersion: \"v1\"\n      kind: \"Service\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"applications/api-service/service.yaml\"\n\n    # Sync ingress configuration\n    - name: \"main-ingress\"\n      apiVersion: \"networking.k8s.io/v1\"\n      kind: \"Ingress\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"networking/ingress.yaml\"\n</code></pre>"},{"location":"examples/advanced/#prometheus-operator-integration","title":"Prometheus Operator Integration","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: prometheus-config-backup\nspec:\n  repository:\n    url: \"https://github.com/company/monitoring-configs.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Monitoring Operator &lt;monitoring@company.com&gt;\"\n    message: \"Backup Prometheus monitoring configuration\"\n\n  resourceReferences:\n    # Export Prometheus rules\n    - name: \"app-rules\"\n      apiVersion: \"monitoring.coreos.com/v1\"\n      kind: \"PrometheusRule\"\n      namespace: \"monitoring\"\n      strategy: \"dump\"\n      output:\n        path: \"prometheus/rules/app-rules.yaml\"\n\n    # Export ServiceMonitor configurations\n    - name: \"api-service-monitor\"\n      apiVersion: \"monitoring.coreos.com/v1\"\n      kind: \"ServiceMonitor\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"prometheus/service-monitors/api-service.yaml\"\n\n    # Export AlertManager configuration\n    - name: \"alertmanager-config\"\n      apiVersion: \"v1\"\n      kind: \"Secret\"\n      namespace: \"monitoring\"\n      strategy: \"single-field\"\n      field: \"alertmanager.yml\"\n      output:\n        path: \"alertmanager/config.yml\"\n</code></pre>"},{"location":"examples/advanced/#performance-and-scale-optimization","title":"Performance and Scale Optimization","text":"<p>Optimize for large-scale deployments and high-frequency updates.</p>"},{"location":"examples/advanced/#batched-configuration-updates","title":"Batched Configuration Updates","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: batch-config-update\nspec:\n  repository:\n    url: \"https://github.com/company/config-batches.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Batch Processor &lt;batch@company.com&gt;\"\n    message: \"Batched configuration update - $(date)\"\n\n  # Use overwrite for clean batches\n  writeMode: \"overwrite\"\n\n  files:\n    - path: \"batch-info.yaml\"\n      content: |\n        batch:\n          timestamp: \"2023-10-01T10:00:00Z\"\n          resources_count: 50\n          namespaces: [\"prod-1\", \"prod-2\", \"prod-3\"]\n\n  resourceReferences:\n    # Batch export multiple ConfigMaps\n    - name: \"app-config-1\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"prod-1\"\n      strategy: \"fields\"\n      output:\n        path: \"batch-1/prod-1/\"\n\n    - name: \"app-config-2\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"prod-2\"\n      strategy: \"fields\"\n      output:\n        path: \"batch-1/prod-2/\"\n\n    - name: \"app-config-3\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"prod-3\"\n      strategy: \"fields\"\n      output:\n        path: \"batch-1/prod-3/\"\n</code></pre>"},{"location":"examples/advanced/#error-recovery-and-retry-logic","title":"Error Recovery and Retry Logic","text":"<p>Implement robust error handling for production workloads.</p>"},{"location":"examples/advanced/#resilient-configuration-sync","title":"Resilient Configuration Sync","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: resilient-sync\n  annotations:\n    # Custom annotation for retry behavior\n    gco.galos.one/retry-policy: \"exponential-backoff\"\n    gco.galos.one/max-retries: \"5\"\nspec:\n  repository:\n    url: \"https://github.com/company/resilient-configs.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Resilient Sync &lt;resilient@company.com&gt;\"\n    message: \"Resilient configuration sync with error recovery\"\n\n  files:\n    - path: \"sync-status/last-attempt.yaml\"\n      content: |\n        sync:\n          timestamp: \"2023-10-01T10:00:00Z\"\n          attempt: 1\n          status: \"in-progress\"\n\n  resourceReferences:\n    # Critical configuration that must be synced\n    - name: \"critical-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"critical/config.yaml\"\n\n    # Optional configuration (can fail without blocking)\n    - name: \"optional-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"fields\"\n      output:\n        path: \"optional/\"\n</code></pre>"},{"location":"examples/advanced/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>Implement comprehensive monitoring for GitCommit operations.</p>"},{"location":"examples/advanced/#metrics-collection-gitcommit","title":"Metrics Collection GitCommit","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: metrics-collection\nspec:\n  repository:\n    url: \"https://github.com/company/operator-metrics.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Metrics Collector &lt;metrics@company.com&gt;\"\n    message: \"Collect operator performance metrics\"\n\n  writeMode: \"append\"\n\n  files:\n    - path: \"metrics/$(date +%Y%m%d)/operator-performance.log\"\n      content: |\n        timestamp: 2023-10-01T10:00:00Z\n        reconciliation_duration: 2.5s\n        resources_processed: 15\n        git_operations: 3\n\n  resourceReferences:\n    # Collect operator metrics from ConfigMap\n    - name: \"operator-metrics\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"git-change-operator-system\"\n      strategy: \"single-field\"\n      field: \"prometheus-metrics\"\n      output:\n        path: \"metrics/$(date +%Y%m%d)/prometheus.txt\"\n</code></pre>"},{"location":"examples/advanced/#best-practices-summary","title":"Best Practices Summary","text":""},{"location":"examples/advanced/#resource-organization","title":"Resource Organization","text":"<ul> <li>Use clear naming conventions</li> <li>Separate concerns with different GitCommit resources</li> <li>Group related configurations together</li> </ul>"},{"location":"examples/advanced/#security","title":"Security","text":"<ul> <li>Never export actual secret values</li> <li>Use separate repositories for sensitive data</li> <li>Implement proper RBAC controls</li> </ul>"},{"location":"examples/advanced/#performance","title":"Performance","text":"<ul> <li>Batch related updates together</li> <li>Use appropriate write modes</li> <li>Monitor resource consumption</li> </ul>"},{"location":"examples/advanced/#reliability","title":"Reliability","text":"<ul> <li>Implement retry logic</li> <li>Use health checks</li> <li>Monitor operator logs</li> </ul>"},{"location":"examples/advanced/#compliance","title":"Compliance","text":"<ul> <li>Maintain audit trails</li> <li>Regular configuration backups</li> <li>Document all changes</li> </ul>"},{"location":"examples/advanced/#next-steps","title":"Next Steps","text":"<ul> <li>Error Handling Reference - Troubleshooting production issues</li> </ul>"},{"location":"examples/basic-gitcommit/","title":"Basic GitCommit","text":"<p>This example demonstrates the most basic usage of the GitCommit resource to commit static files to a Git repository.</p>"},{"location":"examples/basic-gitcommit/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git Change Operator installed in the cluster</li> <li>A Git repository with write access</li> <li>Kubernetes Secret with Git credentials</li> </ul>"},{"location":"examples/basic-gitcommit/#setup-authentication","title":"Setup Authentication","text":"<p>First, create a Secret with your Git credentials:</p> <pre><code>kubectl create secret generic git-credentials \\\n  --from-literal=username=your-username \\\n  --from-literal=password=your-token\n</code></pre> <p>For GitHub, use a Personal Access Token as the password with <code>repo</code> permissions.</p>"},{"location":"examples/basic-gitcommit/#basic-gitcommit-example","title":"Basic GitCommit Example","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: basic-commit\n  namespace: default\nspec:\n  repository:\n    url: \"https://github.com/your-username/config-repo.git\"\n    branch: \"main\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Git Change Operator &lt;operator@example.com&gt;\"\n    message: \"Add basic configuration file\"\n\n  files:\n    - path: \"config/application.properties\"\n      content: |\n        # Application Configuration\n        server.port=8080\n        server.host=0.0.0.0\n\n        # Database Configuration\n        database.url=jdbc:postgresql://localhost:5432/mydb\n        database.username=app_user\n\n        # Logging Configuration\n        logging.level.root=INFO\n        logging.level.com.example=DEBUG\n</code></pre>"},{"location":"examples/basic-gitcommit/#apply-the-gitcommit","title":"Apply the GitCommit","text":"<pre><code># Apply the GitCommit resource\nkubectl apply -f basic-gitcommit.yaml\n\n# Check the status\nkubectl get gitcommit basic-commit -o yaml\n</code></pre>"},{"location":"examples/basic-gitcommit/#expected-results","title":"Expected Results","text":"<p>After applying the GitCommit, you should see:</p> <ol> <li>In your Git repository: A new commit with the file <code>config/application.properties</code></li> <li>GitCommit status: Ready condition set to <code>True</code></li> </ol> <pre><code>status:\n  conditions:\n  - type: Ready\n    status: \"True\"\n    lastTransitionTime: \"2023-10-01T10:00:00Z\"\n    reason: \"CommitSuccessful\" \n    message: \"Successfully committed to repository\"\n  lastCommitHash: \"abc123def456789...\"\n</code></pre>"},{"location":"examples/basic-gitcommit/#verify-the-commit","title":"Verify the Commit","text":"<p>You can verify the commit was created:</p> <pre><code># Check the latest commit in your repository\ngit log --oneline -1\n\n# View the created file\ncat config/application.properties\n</code></pre>"},{"location":"examples/basic-gitcommit/#multiple-files-example","title":"Multiple Files Example","text":"<p>You can commit multiple files in a single GitCommit:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: multi-file-commit\nspec:\n  repository:\n    url: \"https://github.com/your-username/config-repo.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Git Change Operator &lt;operator@example.com&gt;\"\n    message: \"Add application configuration and deployment files\"\n\n  files:\n    - path: \"config/application.yaml\"\n      content: |\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          name: app-config\n        data:\n          app.properties: |\n            server.port=8080\n            debug=true\n\n    - path: \"deploy/deployment.yaml\"\n      content: |\n        apiVersion: apps/v1\n        kind: Deployment\n        metadata:\n          name: my-app\n        spec:\n          replicas: 3\n          selector:\n            matchLabels:\n              app: my-app\n          template:\n            metadata:\n              labels:\n                app: my-app\n            spec:\n              containers:\n              - name: app\n                image: my-app:latest\n                ports:\n                - containerPort: 8080\n\n    - path: \"docs/README.md\"\n      content: |\n        # My Application\n\n        This repository contains configuration and deployment files for my application.\n\n        ## Files\n\n        - `config/`: Application configuration\n        - `deploy/`: Kubernetes deployment manifests\n        - `docs/`: Documentation\n</code></pre>"},{"location":"examples/basic-gitcommit/#directory-structure","title":"Directory Structure","text":"<p>The above example creates this structure in your Git repository:</p> <pre><code>\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 application.properties\n\u2502   \u2514\u2500\u2500 application.yaml\n\u251c\u2500\u2500 deploy/\n\u2502   \u2514\u2500\u2500 deployment.yaml\n\u2514\u2500\u2500 docs/\n    \u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"examples/basic-gitcommit/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/basic-gitcommit/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Authentication Failed <pre><code># Check your Secret\nkubectl get secret git-credentials -o yaml\n\n# Verify credentials work\ngit ls-remote https://username:token@github.com/user/repo.git\n</code></pre></p> </li> <li> <p>Repository Not Found <pre><code># Ensure URL is correct and includes .git\nrepository:\n  url: \"https://github.com/your-username/your-repo.git\"\n</code></pre></p> </li> <li> <p>Permission Denied</p> </li> <li>Verify your token has <code>repo</code> permissions</li> <li>Check repository visibility (private repos need appropriate access)</li> </ol>"},{"location":"examples/basic-gitcommit/#check-operator-logs","title":"Check Operator Logs","text":"<pre><code># Get operator pod name\nkubectl get pods -n git-change-operator-system\n\n# Check logs\nkubectl logs -f -n git-change-operator-system deployment/git-change-operator-controller-manager\n</code></pre>"},{"location":"examples/basic-gitcommit/#next-steps","title":"Next Steps","text":"<ul> <li>GitCommit with Resource References - Learn to export Kubernetes resources</li> <li>PullRequest Creation - Create pull requests instead of direct commits</li> <li>Advanced Scenarios - Complex configurations and use cases</li> </ul>"},{"location":"examples/basic-gitcommit/#cleanup","title":"Cleanup","text":"<p>To remove the GitCommit resource:</p> <pre><code>kubectl delete gitcommit basic-commit\n</code></pre> <p>Note: This only removes the Kubernetes resource, not the Git commits that were already created.</p>"},{"location":"examples/corporate-setup/","title":"Corporate Environment Setup","text":"<p>This guide explains how to configure the Git Change Operator for corporate environments with proxy servers, artifact repositories, and SSL inspection.</p>"},{"location":"examples/corporate-setup/#overview","title":"Overview","text":"<p>Corporate environments often require special configuration for: - Go module proxy servers (Artifactory, Nexus) - SSL certificate handling for HTTPS inspection - Package repository proxies (Alpine, Ubuntu) - HTTP/HTTPS proxy settings</p> <p>The Git Change Operator supports corporate environments through external configuration files that override public defaults without modifying tracked code.</p>"},{"location":"examples/corporate-setup/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Copy the corporate configuration template: <pre><code>cp corporate-config.env.example corporate-config.env\n</code></pre></p> </li> <li> <p>Edit <code>corporate-config.env</code> with your corporate settings: <pre><code># Edit the file to match your corporate environment\nvim corporate-config.env\n</code></pre></p> </li> <li> <p>Source the configuration before building: <pre><code>source corporate-config.env\nmake build\n</code></pre></p> </li> </ol>"},{"location":"examples/corporate-setup/#configuration-files","title":"Configuration Files","text":""},{"location":"examples/corporate-setup/#corporate-configenv-git-ignored","title":"corporate-config.env (git-ignored)","text":"<p>This file contains all corporate-specific environment variables that override public defaults:</p> <pre><code># Go proxy configuration\nexport GOPROXY=\"https://your-artifactory.company.com/artifactory/api/go/go-remote,direct\"\nexport GOSUMDB=\"off\"\n\n# Corporate URLs for build tools\nexport SETUP_ENVTEST_INDEX=\"https://your-artifactory.company.com/artifactory/api/go/go-remote/kubernetes-sigs/controller-tools/HEAD/envtest-releases.yaml\"\n\n# Docker build arguments for corporate environments\nexport DOCKER_BUILD_ARGS=\"--build-arg GOPROXY=$GOPROXY --build-arg GOSUMDB=$GOSUMDB --build-arg APK_MAIN_REPO=https://your-artifactory.company.com/artifactory/api/alpine/alpine-proxy/edge/main --build-arg APK_COMMUNITY_REPO=https://your-artifactory.company.com/artifactory/api/alpine/alpine-proxy/edge/community\"\n\n# SSL certificate configuration\nexport SSL_CERT_FILE=\"/path/to/corporate-ca.pem\"\nexport REQUESTS_CA_BUNDLE=\"/path/to/corporate-ca.pem\"\nexport CURL_CA_BUNDLE=\"/path/to/corporate-ca.pem\"\n</code></pre>"},{"location":"examples/corporate-setup/#building-with-corporate-configuration","title":"Building with Corporate Configuration","text":""},{"location":"examples/corporate-setup/#go-builds","title":"Go Builds","text":"<p>The Makefile automatically uses environment variables when set:</p> <pre><code>source corporate-config.env\nmake build\n</code></pre>"},{"location":"examples/corporate-setup/#docker-builds","title":"Docker Builds","text":"<p>Use the Makefile target which automatically handles corporate configuration:</p> <pre><code>source corporate-config.env\nmake docker-build\n</code></pre>"},{"location":"examples/corporate-setup/#testing","title":"Testing","text":"<p>For integration tests in corporate environments:</p> <pre><code>source corporate-config.env\nmake test-integration\n</code></pre>"},{"location":"examples/corporate-setup/#environment-variables-reference","title":"Environment Variables Reference","text":""},{"location":"examples/corporate-setup/#go-configuration","title":"Go Configuration","text":"Variable Purpose Example <code>GOPROXY</code> Go module proxy <code>https://artifactory.company.com/artifactory/api/go/go-remote,direct</code> <code>GOSUMDB</code> Checksum database <code>off</code> (disable for corporate proxies) <code>GONOPROXY</code> Bypass proxy for domains <code>github.company.com,internal.company.com</code> <code>GONOSUMDB</code> Bypass sumdb for domains <code>github.company.com</code>"},{"location":"examples/corporate-setup/#build-tools","title":"Build Tools","text":"Variable Purpose Example <code>SETUP_ENVTEST_INDEX</code> Kubernetes test binaries index <code>https://artifactory.company.com/artifactory/api/go/go-remote/kubernetes-sigs/controller-tools/HEAD/envtest-releases.yaml</code>"},{"location":"examples/corporate-setup/#docker-build-arguments","title":"Docker Build Arguments","text":"Variable Purpose Example <code>APK_MAIN_REPO</code> Alpine main repository <code>https://artifactory.company.com/artifactory/api/alpine/alpine-proxy/edge/main</code> <code>APK_COMMUNITY_REPO</code> Alpine community repository <code>https://artifactory.company.com/artifactory/api/alpine/alpine-proxy/edge/community</code>"},{"location":"examples/corporate-setup/#ssl-certificates","title":"SSL Certificates","text":"Variable Purpose Example <code>SSL_CERT_FILE</code> CA certificate bundle <code>/etc/ssl/certs/corporate-ca.pem</code> <code>REQUESTS_CA_BUNDLE</code> Python requests CA bundle <code>/etc/ssl/certs/corporate-ca.pem</code> <code>CURL_CA_BUNDLE</code> cURL CA bundle <code>/etc/ssl/certs/corporate-ca.pem</code>"},{"location":"examples/corporate-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/corporate-setup/#common-issues","title":"Common Issues","text":"<ol> <li> <p>SSL Certificate Errors <pre><code>x509: certificate signed by unknown authority\n</code></pre> Solution: Ensure your corporate CA certificate is properly configured in <code>SSL_CERT_FILE</code>.</p> </li> <li> <p>Go Module Download Failures <pre><code>go: module example.com/module: Get \"https://proxy.golang.org/example.com/module\": 403 Forbidden\n</code></pre> Solution: Configure <code>GOPROXY</code> to use your corporate proxy and set <code>GOSUMDB=off</code>.</p> </li> <li> <p>Docker Build Failures <pre><code>ERROR: Could not satisfy requirements index\n</code></pre> Solution: Ensure <code>APK_MAIN_REPO</code> and <code>APK_COMMUNITY_REPO</code> are set correctly for Alpine packages.</p> </li> </ol>"},{"location":"examples/corporate-setup/#security-considerations","title":"Security Considerations","text":"<ul> <li>Never commit <code>corporate-config.env</code> to public-facing repos - it's already ignored in <code>.gitignore</code></li> <li>Keep corporate URLs and certificates confidential</li> <li>Regularly update corporate CA certificates</li> <li>Use principle of least provilege for service accounts</li> </ul>"},{"location":"examples/corporate-setup/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>For automated builds in corporate CI/CD systems:</p> <ol> <li>Store corporate configuration as secrets</li> <li>Inject environment variables at build time</li> <li>Use corporate-specific build agents with pre-configured proxies</li> </ol> <p>Example GitHub Actions (for internal repositories):</p> <pre><code>- name: Configure Corporate Environment\n  run: |\n    echo \"GOPROXY=${{ secrets.CORPORATE_GOPROXY }}\" &gt;&gt; $GITHUB_ENV\n    echo \"GOSUMDB=off\" &gt;&gt; $GITHUB_ENV\n\n- name: Build with Corporate Config\n  run: make build\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/","title":"GitCommit with Resource References","text":"<p>This example shows how to use resource references to automatically export Kubernetes resources to Git repositories using different extraction strategies.</p>"},{"location":"examples/gitcommit-resourcerefs/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic GitCommit setup completed (see Basic GitCommit)</li> <li>Existing ConfigMaps and Secrets in your cluster</li> <li>Understanding of Resource Reference Strategies</li> </ul>"},{"location":"examples/gitcommit-resourcerefs/#sample-kubernetes-resources","title":"Sample Kubernetes Resources","text":"<p>Let's create some sample resources to export:</p> <pre><code># Create a sample ConfigMap\nkubectl create configmap app-config \\\n  --from-literal=database.host=localhost \\\n  --from-literal=database.port=5432 \\\n  --from-literal=redis.host=redis.example.com \\\n  --from-file=app.properties=/path/to/app.properties\n\n# Create a sample Secret\nkubectl create secret generic api-credentials \\\n  --from-literal=username=api-user \\\n  --from-literal=password=secret-password \\\n  --from-literal=api-key=abc123def456\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#example-1-dump-strategy","title":"Example 1: Dump Strategy","text":"<p>Export complete resources as YAML files for backup purposes:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: resource-backup\nspec:\n  repository:\n    url: \"https://github.com/your-username/k8s-backups.git\"\n    branch: \"main\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Git Change Operator &lt;gco@example.com&gt;\"\n    message: \"Automated backup of cluster resources\"\n\n  resourceReferences:\n    # Backup ConfigMap as complete YAML\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"dump\"\n      output:\n        path: \"backups/configmaps/app-config.yaml\"\n\n    # Backup Secret as complete YAML  \n    - name: \"api-credentials\"\n      apiVersion: \"v1\"\n      kind: \"Secret\"\n      namespace: \"default\"\n      strategy: \"dump\"\n      output:\n        path: \"backups/secrets/api-credentials.yaml\"\n</code></pre> <p>Result: Creates complete YAML files preserving all metadata:</p> <pre><code>backups/\n\u251c\u2500\u2500 configmaps/\n\u2502   \u2514\u2500\u2500 app-config.yaml\n\u2514\u2500\u2500 secrets/\n    \u2514\u2500\u2500 api-credentials.yaml\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#example-2-fields-strategy","title":"Example 2: Fields Strategy","text":"<p>Extract individual data fields as separate files:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: config-export\nspec:\n  repository:\n    url: \"https://github.com/your-username/app-configs.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Config Operator &lt;config@example.com&gt;\"\n    message: \"Export application configuration files\"\n\n  resourceReferences:\n    # Extract all ConfigMap fields as separate files\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"fields\"\n      output:\n        path: \"production/config/\"\n\n    # Extract all Secret fields as separate files\n    - name: \"api-credentials\"\n      apiVersion: \"v1\" \n      kind: \"Secret\"\n      namespace: \"default\"\n      strategy: \"fields\"\n      output:\n        path: \"production/secrets/\"\n</code></pre> <p>Result: Creates individual files for each data field:</p> <pre><code>production/\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 database.host\n\u2502   \u251c\u2500\u2500 database.port\n\u2502   \u251c\u2500\u2500 redis.host\n\u2502   \u2514\u2500\u2500 app.properties\n\u2514\u2500\u2500 secrets/\n    \u251c\u2500\u2500 username\n    \u251c\u2500\u2500 password\n    \u2514\u2500\u2500 api-key\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#example-3-single-field-strategy","title":"Example 3: Single-Field Strategy","text":"<p>Extract specific fields with custom naming:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: targeted-export\nspec:\n  repository:\n    url: \"https://github.com/your-username/deployment-configs.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Deployment Operator &lt;deploy@example.com&gt;\"\n    message: \"Update deployment configuration values\"\n\n  resourceReferences:\n    # Extract specific database host for external systems\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"database.host\"\n      output:\n        path: \"external-systems/database-endpoint.txt\"\n\n    # Extract API key for CI/CD pipeline\n    - name: \"api-credentials\"\n      apiVersion: \"v1\"\n      kind: \"Secret\" \n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"api-key\"\n      output:\n        path: \"ci-cd/api-credentials/key.txt\"\n\n    # Extract application properties for configuration management\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"app.properties\"\n      output:\n        path: \"apps/myapp/application.properties\"\n</code></pre> <p>Result: Creates specifically named files:</p> <pre><code>external-systems/\n\u2514\u2500\u2500 database-endpoint.txt  # Contains: localhost\n\nci-cd/\n\u2514\u2500\u2500 api-credentials/\n    \u2514\u2500\u2500 key.txt            # Contains: abc123def456\n\napps/\n\u2514\u2500\u2500 myapp/\n    \u2514\u2500\u2500 application.properties  # Contains: contents of app.properties\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#example-4-mixed-strategies","title":"Example 4: Mixed Strategies","text":"<p>Combine multiple strategies in a single GitCommit for comprehensive exports:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: comprehensive-export\nspec:\n  repository:\n    url: \"https://github.com/your-username/k8s-exports.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"K8s Operator &lt;k8s@example.com&gt;\"\n    message: \"Comprehensive configuration export\"\n\n  files:\n    # Add metadata about the export\n    - path: \"metadata/export-info.yaml\"\n      content: |\n        export_timestamp: \"2023-10-01T10:00:00Z\"\n        cluster: \"production\"\n        namespace: \"default\"\n        operator_version: \"v1.0.0\"\n\n  resourceReferences:\n    # Full backup for disaster recovery\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"dump\"\n      output:\n        path: \"backup/full/app-config-backup.yaml\"\n\n    # Individual config files for deployment\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"fields\"\n      output:\n        path: \"deploy/config/\"\n\n    # Specific database password for external access\n    - name: \"api-credentials\"\n      apiVersion: \"v1\"\n      kind: \"Secret\"\n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"password\"\n      output:\n        path: \"external/db-password\"\n\n    # API key for monitoring system\n    - name: \"api-credentials\"\n      apiVersion: \"v1\"\n      kind: \"Secret\"\n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"api-key\"\n      output:\n        path: \"monitoring/api-key.txt\"\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#example-5-cross-namespace-resources","title":"Example 5: Cross-Namespace Resources","text":"<p>Export resources from multiple namespaces:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: multi-namespace-export\n  namespace: default  # GitCommit can be in any namespace\nspec:\n  repository:\n    url: \"https://github.com/your-username/multi-ns-config.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Multi-NS Operator &lt;multi@example.com&gt;\"\n    message: \"Export configurations from multiple namespaces\"\n\n  resourceReferences:\n    # Production namespace ConfigMap\n    - name: \"prod-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"fields\"\n      output:\n        path: \"environments/production/\"\n\n    # Staging namespace ConfigMap\n    - name: \"stage-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"staging\"\n      strategy: \"fields\"\n      output:\n        path: \"environments/staging/\"\n\n    # Development namespace Secret\n    - name: \"dev-secrets\"\n      apiVersion: \"v1\"\n      kind: \"Secret\"\n      namespace: \"development\"\n      strategy: \"single-field\"\n      field: \"database.password\"\n      output:\n        path: \"environments/development/db-password\"\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#example-6-custom-resources","title":"Example 6: Custom Resources","text":"<p>Export custom Kubernetes resources:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: custom-resource-export\nspec:\n  repository:\n    url: \"https://github.com/your-username/custom-resources.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"CRD Operator &lt;crd@example.com&gt;\"\n    message: \"Export custom resource configurations\"\n\n  resourceReferences:\n    # Export complete custom resource\n    - name: \"my-application\"\n      apiVersion: \"apps.example.com/v1\"\n      kind: \"Application\"\n      namespace: \"default\"\n      strategy: \"dump\"\n      output:\n        path: \"applications/my-application.yaml\"\n\n    # Extract specific configuration section\n    - name: \"my-application\"\n      apiVersion: \"apps.example.com/v1\"\n      kind: \"Application\"\n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"spec.configuration\"\n      output:\n        path: \"configurations/my-app-config.json\"\n\n    # Export database configuration\n    - name: \"database-config\"\n      apiVersion: \"database.example.com/v1\"\n      kind: \"PostgreSQLCluster\"\n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"spec.postgresql.parameters\"\n      output:\n        path: \"databases/postgresql/parameters.yaml\"\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#automation-with-write-modes","title":"Automation with Write Modes","text":""},{"location":"examples/gitcommit-resourcerefs/#append-mode-for-log-aggregation","title":"Append Mode for Log Aggregation","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: log-aggregation\nspec:\n  repository:\n    url: \"https://github.com/your-username/cluster-logs.git\"\n\n  auth:\n    secretName: \"git-credentials\"\n\n  commit:\n    author: \"Log Aggregator &lt;logs@example.com&gt;\"\n    message: \"Append latest application logs\"\n\n  writeMode: \"append\"  # Append to existing files\n\n  files:\n    - path: \"logs/collection-timestamp.log\"\n      content: |\n        === Log Collection: 2023-10-01T10:00:00Z ===\n\n  resourceReferences:\n    # Append application logs\n    - name: \"app-logs\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"application.log\"\n      output:\n        path: \"logs/application.log\"\n\n    # Append error logs\n    - name: \"error-logs\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"error.log\"\n      output:\n        path: \"logs/errors.log\"\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#monitoring-and-validation","title":"Monitoring and Validation","text":""},{"location":"examples/gitcommit-resourcerefs/#check-gitcommit-status","title":"Check GitCommit Status","text":"<pre><code># Get status of all GitCommits\nkubectl get gitcommits\n\n# Detailed status of specific GitCommit\nkubectl describe gitcommit comprehensive-export\n\n# Check conditions\nkubectl get gitcommit comprehensive-export -o jsonpath='{.status.conditions}'\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#verify-git-repository","title":"Verify Git Repository","text":"<pre><code># Check latest commits\ngit log --oneline -5\n\n# Verify file contents\nls -la deploy/config/\ncat external/db-password\n\n# Check commit hash matches\nkubectl get gitcommit comprehensive-export -o jsonpath='{.status.lastCommitHash}'\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#troubleshooting-resource-references","title":"Troubleshooting Resource References","text":""},{"location":"examples/gitcommit-resourcerefs/#resource-not-found","title":"Resource Not Found","text":"<pre><code># Verify resource exists\nkubectl get configmap app-config -n default\n\n# Check resource in different namespace\nkubectl get configmap app-config --all-namespaces\n\n# List all ConfigMaps\nkubectl get configmaps\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#field-path-issues","title":"Field Path Issues","text":"<pre><code># Inspect resource structure\nkubectl get configmap app-config -o yaml\n\n# Check available fields\nkubectl get configmap app-config -o jsonpath='{.data}'\n\n# Test field path\nkubectl get configmap app-config -o jsonpath='{.data.database\\.host}'\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#rbac-issues","title":"RBAC Issues","text":"<pre><code># Check operator permissions\nkubectl auth can-i get configmaps \\\n  --as=system:serviceaccount:git-change-operator-system:git-change-operator-controller-manager\n\n# Check cross-namespace permissions\nkubectl auth can-i get secrets -n production \\\n  --as=system:serviceaccount:git-change-operator-system:git-change-operator-controller-manager\n</code></pre>"},{"location":"examples/gitcommit-resourcerefs/#best-practices","title":"Best Practices","text":"<ol> <li>Strategy Selection:</li> <li>Use <code>dump</code> for complete backups</li> <li>Use <code>fields</code> for configuration management</li> <li> <p>Use <code>single-field</code> for specific integrations</p> </li> <li> <p>Path Organization:    <pre><code>\u251c\u2500\u2500 backup/          # Complete resource dumps\n\u251c\u2500\u2500 deploy/          # Deployment configurations  \n\u251c\u2500\u2500 external/        # External system integrations\n\u2514\u2500\u2500 monitoring/      # Monitoring system configs\n</code></pre></p> </li> <li> <p>Resource Naming:</p> </li> <li>Use descriptive resource names</li> <li>Include environment in ConfigMap names</li> <li> <p>Separate secrets by purpose</p> </li> <li> <p>Security Considerations:</p> </li> <li>Be careful with Secret exports</li> <li>Use appropriate Git repository permissions</li> <li>Consider separate repositories for sensitive data</li> </ol>"},{"location":"examples/gitcommit-resourcerefs/#next-steps","title":"Next Steps","text":"<ul> <li>PullRequest Creation - Create pull requests with resource references</li> <li>Advanced Scenarios - Complex multi-cluster setups</li> </ul>"},{"location":"examples/pullrequest/","title":"PullRequest Creation","text":"<p>This example demonstrates how to use the PullRequest resource to create GitHub pull requests automatically with files generated from Kubernetes resources.</p>"},{"location":"examples/pullrequest/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git Change Operator installed in your cluster</li> <li>GitHub repository with write access</li> <li>GitHub Personal Access Token with <code>repo</code> and <code>pull_request</code> permissions</li> </ul>"},{"location":"examples/pullrequest/#setup-github-authentication","title":"Setup GitHub Authentication","text":"<p>Create a Secret with your GitHub token:</p> <pre><code>kubectl create secret generic github-token \\\n  --from-literal=token=ghp_your_personal_access_token_here\n</code></pre> <p>Required Token Permissions: - <code>repo</code> - Repository access - <code>pull_request</code> - Create and manage pull requests</p>"},{"location":"examples/pullrequest/#basic-pullrequest-example","title":"Basic PullRequest Example","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: config-update-pr\nspec:\n  repository:\n    url: \"https://github.com/your-username/app-configs.git\"\n    baseBranch: \"main\"  # Branch to create PR against\n\n  auth:\n    secretName: \"github-token\"\n\n  pullRequest:\n    title: \"Automated Configuration Update\"\n    body: |\n      ## Automated Update from Kubernetes\n\n      This pull request contains configuration updates exported from the production cluster.\n\n      ### Changes:\n      - Updated application properties\n      - Refreshed database configuration\n      - New environment variables\n\n      ### Review Checklist:\n      - [ ] Verify configuration values are correct\n      - [ ] Check for sensitive data exposure\n      - [ ] Test in staging environment\n\n      **Generated by**: Git Change Operator\n      **Timestamp**: 2023-10-01T10:00:00Z\n\n    branchPrefix: \"config-update\"\n\n  files:\n    - path: \"config/application.properties\"\n      content: |\n        # Application Configuration - Updated via Operator\n        server.port=8080\n        server.host=0.0.0.0\n\n        # Database Configuration\n        database.url=jdbc:postgresql://prod-db:5432/myapp\n        database.pool.size=20\n\n        # Cache Configuration\n        redis.host=redis-cluster.prod.svc.cluster.local\n        redis.port=6379\n</code></pre>"},{"location":"examples/pullrequest/#pullrequest-with-resource-references","title":"PullRequest with Resource References","text":"<p>Combine static files with Kubernetes resource exports:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: cluster-config-sync\nspec:\n  repository:\n    url: \"https://github.com/your-username/k8s-configs.git\"\n    baseBranch: \"main\"\n\n  auth:\n    secretName: \"github-token\"\n\n  pullRequest:\n    title: \"Sync Kubernetes Configuration - $(date +%Y%m%d)\"\n    body: |\n      ## \ud83d\udd04 Kubernetes Configuration Sync\n\n      Automated synchronization of production cluster configuration.\n\n      ### \ud83d\udce6 Resources Included:\n      - Production ConfigMaps\n      - Application secrets (non-sensitive data only)\n      - Environment-specific configurations\n\n      ### \ud83d\udd0d Review Required:\n      Please verify all configuration values before merging.\n\n      ---\n\n      **Cluster**: production-east-1  \n      **Namespace**: production  \n      **Generated**: {{ .Timestamp }}\n\n    branchPrefix: \"k8s-sync\"\n\n  files:\n    # Metadata about the sync\n    - path: \"sync-metadata.yaml\"\n      content: |\n        sync:\n          timestamp: \"2023-10-01T10:00:00Z\"\n          cluster: \"production-east-1\"\n          namespace: \"production\"\n          operator_version: \"v1.0.0\"\n\n  resourceReferences:\n    # Export application configuration\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"fields\"\n      output:\n        path: \"environments/production/config/\"\n\n    # Export database configuration  \n    - name: \"database-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"resources/configmaps/database-config.yaml\"\n\n    # Export specific API endpoint\n    - name: \"api-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"single-field\"\n      field: \"api.endpoint\"\n      output:\n        path: \"external-systems/api-endpoint.txt\"\n</code></pre>"},{"location":"examples/pullrequest/#multi-environment-pullrequest","title":"Multi-Environment PullRequest","text":"<p>Create PRs for different environments:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: staging-to-prod-promotion\nspec:\n  repository:\n    url: \"https://github.com/your-username/deployment-configs.git\"\n    baseBranch: \"production\"  # Target production branch\n\n  auth:\n    secretName: \"github-token\"\n\n  pullRequest:\n    title: \"\ud83d\ude80 Promote Staging Configuration to Production\"\n    body: |\n      ## Environment Promotion\n\n      This PR promotes tested configuration from staging to production.\n\n      ### \ud83d\udd04 Configuration Changes:\n      - Database connection strings updated\n      - API keys rotated\n      - Resource limits adjusted for production scale\n\n      ### \u2705 Pre-Deployment Checklist:\n      - [x] All staging tests passed\n      - [x] Performance benchmarks validated\n      - [x] Security scan completed\n      - [ ] Production deployment approved\n      - [ ] Rollback plan confirmed\n\n      ### \ud83d\udcca Impact Assessment:\n      - **Downtime**: Zero (rolling update)\n      - **Risk Level**: Low\n      - **Rollback Time**: &lt; 5 minutes\n\n    branchPrefix: \"staging-to-prod\"\n\n  resourceReferences:\n    # Production database configuration\n    - name: \"prod-db-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"staging\"  # Source from staging\n      strategy: \"fields\"\n      output:\n        path: \"production/database/\"\n\n    # Production API configuration\n    - name: \"api-config-staging\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\" \n      namespace: \"staging\"\n      strategy: \"single-field\"\n      field: \"production.api.endpoint\"\n      output:\n        path: \"production/api/endpoint.txt\"\n</code></pre>"},{"location":"examples/pullrequest/#automated-documentation-updates","title":"Automated Documentation Updates","text":"<p>Use PullRequests to update documentation automatically:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: docs-update\nspec:\n  repository:\n    url: \"https://github.com/your-username/api-documentation.git\"\n    baseBranch: \"main\"\n\n  auth:\n    secretName: \"github-token\"\n\n  pullRequest:\n    title: \"\ud83d\udcda Update API Documentation\"\n    body: |\n      ## Automated Documentation Update\n\n      This PR updates API documentation based on current service configuration.\n\n      ### Updates Include:\n      - Service endpoints and ports\n      - Authentication requirements  \n      - Rate limiting configuration\n      - Health check endpoints\n\n      ### Generated From:\n      - Kubernetes Services\n      - ConfigMaps\n      - Ingress resources\n\n    branchPrefix: \"docs-update\"\n\n  files:\n    - path: \"docs/api-overview.md\"\n      content: |\n        # API Overview\n\n        Last updated: 2023-10-01T10:00:00Z\n\n        ## Service Endpoints\n\n        This documentation is automatically generated from Kubernetes cluster state.\n\n  resourceReferences:\n    # Export service configuration\n    - name: \"api-service-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"openapi.yaml\"\n      output:\n        path: \"docs/openapi-spec.yaml\"\n\n    # Export rate limiting config\n    - name: \"rate-limit-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"fields\"\n      output:\n        path: \"docs/rate-limits/\"\n</code></pre>"},{"location":"examples/pullrequest/#security-focused-pullrequest","title":"Security-Focused PullRequest","text":"<p>Handle sensitive configuration updates with extra care:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: security-config-update\nspec:\n  repository:\n    url: \"https://github.com/your-username/secure-configs.git\"\n    baseBranch: \"main\"\n\n  auth:\n    secretName: \"github-token\"\n\n  pullRequest:\n    title: \"\ud83d\udd12 Security Configuration Update\"\n    body: |\n      ## \u26a0\ufe0f Security Configuration Update\n\n      This PR contains security-related configuration changes.\n\n      ### \ud83d\udd10 Security Review Required:\n      - [ ] No sensitive data exposed in plain text\n      - [ ] All credentials properly masked\n      - [ ] Access controls reviewed\n      - [ ] Compliance requirements met\n\n      ### \ud83d\udee1\ufe0f Changes Include:\n      - Certificate rotation schedules\n      - Authentication provider settings\n      - Network security policies\n      - Audit logging configuration\n\n      **\u26a1 Priority**: High  \n      **\ud83d\udc65 Required Reviewers**: @security-team @platform-team\n\n    branchPrefix: \"security-update\"\n\n  files:\n    - path: \"security/audit-policy.yaml\"\n      content: |\n        # Audit Policy Configuration\n        # Generated from cluster security settings\n        apiVersion: audit.k8s.io/v1\n        kind: Policy\n        rules:\n        - level: Metadata\n          namespaces: [\"production\", \"staging\"]\n\n  resourceReferences:\n    # Export network policies (non-sensitive)\n    - name: \"network-policies\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"security\"\n      strategy: \"dump\"\n      output:\n        path: \"policies/network-policies.yaml\"\n\n    # Export certificate configuration (metadata only)\n    - name: \"cert-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"security\"\n      strategy: \"single-field\"\n      field: \"cert-rotation-schedule\"\n      output:\n        path: \"certificates/rotation-schedule.txt\"\n</code></pre>"},{"location":"examples/pullrequest/#monitoring-pullrequest-status","title":"Monitoring PullRequest Status","text":""},{"location":"examples/pullrequest/#check-pullrequest-resource-status","title":"Check PullRequest Resource Status","text":"<pre><code># List all PullRequests\nkubectl get pullrequests\n\n# Get detailed status\nkubectl describe pullrequest config-update-pr\n\n# Check conditions and PR URL\nkubectl get pullrequest config-update-pr -o yaml | grep -A 20 status:\n</code></pre>"},{"location":"examples/pullrequest/#expected-status-output","title":"Expected Status Output","text":"<pre><code>status:\n  conditions:\n  - type: Ready\n    status: \"True\"\n    lastTransitionTime: \"2023-10-01T10:05:00Z\"\n    reason: \"PullRequestCreated\"\n    message: \"Successfully created pull request\"\n  pullRequestURL: \"https://github.com/your-username/app-configs/pull/42\"\n</code></pre>"},{"location":"examples/pullrequest/#automated-branch-management","title":"Automated Branch Management","text":"<p>The operator automatically manages branches:</p> <ol> <li>Branch Creation: Creates branches with format <code>{branchPrefix}-{timestamp}</code></li> <li>Conflict Resolution: Handles existing branches by creating new ones</li> <li>Content Updates: Pushes files and commits to the branch</li> <li>PR Creation: Creates the pull request targeting the base branch</li> </ol>"},{"location":"examples/pullrequest/#example-branch-names","title":"Example Branch Names","text":"<pre><code>config-update-20231001100000\nk8s-sync-20231001103015  \nstaging-to-prod-20231001110530\n</code></pre>"},{"location":"examples/pullrequest/#advanced-pullrequest-features","title":"Advanced PullRequest Features","text":""},{"location":"examples/pullrequest/#custom-branch-names","title":"Custom Branch Names","text":"<p>While you can't specify exact branch names, you can control the prefix:</p> <pre><code>pullRequest:\n  branchPrefix: \"feature/automated-config\"\n  # Results in: feature/automated-config-20231001100000\n</code></pre>"},{"location":"examples/pullrequest/#pr-templates-integration","title":"PR Templates Integration","text":"<p>Your repository's PR templates will be used if available:</p> <pre><code># .github/pull_request_template.md in your repo\n## Description\n&lt;!-- Automatically populated by operator --&gt;\n\n## Type of Change\n- [x] Configuration update\n- [ ] Bug fix  \n- [ ] New feature\n\n## Testing\n- [x] Configuration validated\n- [ ] Integration tests passed\n</code></pre>"},{"location":"examples/pullrequest/#multiple-prs-from-one-resource","title":"Multiple PRs from One Resource","text":"<p>Create separate PRs for different purposes:</p> <pre><code># PR for configuration updates\napiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: config-pr\nspec:\n  # ... configuration-focused PR\n\n---\n# PR for documentation updates  \napiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: docs-pr\nspec:\n  # ... documentation-focused PR\n</code></pre>"},{"location":"examples/pullrequest/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/pullrequest/#authentication-issues","title":"Authentication Issues","text":"<pre><code># Verify GitHub token\nkubectl get secret github-token -o yaml\n\n# Test token permissions\ncurl -H \"Authorization: token YOUR_TOKEN\" \\\n  https://api.github.com/user\n</code></pre>"},{"location":"examples/pullrequest/#repository-access","title":"Repository Access","text":"<pre><code># Check repository exists and is accessible\ncurl -H \"Authorization: token YOUR_TOKEN\" \\\n  https://api.github.com/repos/your-username/your-repo\n\n# Verify repository permissions\ncurl -H \"Authorization: token YOUR_TOKEN\" \\\n  https://api.github.com/repos/your-username/your-repo/collaborators/your-username/permission\n</code></pre>"},{"location":"examples/pullrequest/#branch-conflicts","title":"Branch Conflicts","text":"<p>If you see branch conflict errors:</p> <ol> <li>The operator will automatically create a new branch with a different timestamp</li> <li>Check for existing PRs that might conflict</li> <li>Consider using different branch prefixes for different types of updates</li> </ol>"},{"location":"examples/pullrequest/#common-error-messages","title":"Common Error Messages","text":"Error Cause Solution \"401 Unauthorized\" Invalid GitHub token Update token with correct permissions \"404 Not Found\" Repository doesn't exist Verify repository URL \"422 Validation Failed\" Invalid PR content Check title and body formatting \"Branch already exists\" Timing collision Operator will retry with new timestamp"},{"location":"examples/pullrequest/#best-practices","title":"Best Practices","text":"<ol> <li>Descriptive Titles: Use clear, descriptive PR titles with context</li> <li>Detailed Bodies: Include checklists and context for reviewers</li> <li>Branch Prefixes: Use meaningful prefixes that indicate PR purpose</li> <li>Security: Never include actual secrets in PR content</li> <li>Testing: Test PullRequest resources in non-production first</li> </ol>"},{"location":"examples/pullrequest/#cleanup","title":"Cleanup","text":"<pre><code># Delete PullRequest resource (doesn't affect created PRs)\nkubectl delete pullrequest config-update-pr\n\n# The actual GitHub PR remains and must be closed manually if needed\n</code></pre>"},{"location":"examples/pullrequest/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Scenarios - Multi-cluster and complex workflows</li> <li>Error Handling Reference - Troubleshooting guide</li> </ul>"},{"location":"reference/","title":"API Reference","text":"<p>Welcome to the Git Change Operator API reference documentation. This section provides detailed information about the Custom Resource Definitions (CRDs), configuration options, and API specifications.</p>"},{"location":"reference/#available-resources","title":"Available Resources","text":""},{"location":"reference/#gitcommit","title":"GitCommit","text":"<p>The <code>GitCommit</code> custom resource allows you to create git commits automatically based on Kubernetes cluster resources.</p> <p>Key Features: - Automatic file creation from cluster resources - Resource reference strategies (dump, fields, single-field) - Configurable write modes (overwrite, append) - Authentication via Kubernetes secrets</p> <p>View GitCommit API Reference</p>"},{"location":"reference/#pullrequest","title":"PullRequest","text":"<p>The <code>PullRequest</code> custom resource creates GitHub pull requests automatically with files generated from cluster resources.</p> <p>Key Features: - Automatic branch creation and management - GitHub API integration - File generation from resource references - Pull request metadata configuration</p> <p>View PullRequest API Reference</p>"},{"location":"reference/#configuration-reference","title":"Configuration Reference","text":"Topic Description API Reference &amp; CRD Specification Complete API documentation and schema for GitCommit and PullRequest resources Resource Reference Strategies How to extract data from Kubernetes resources Write Modes File writing behavior (overwrite vs append) Error Handling Common errors and troubleshooting"},{"location":"reference/#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started - Installation and basic setup</li> <li>Examples - Practical usage examples</li> </ul>"},{"location":"reference/#api-versions","title":"API Versions","text":"<p>The Git Change Operator uses the API group <code>gco.galos.one</code> with version <code>v1</code>.</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\n# or\nkind: PullRequest\n</code></pre> <p>All resources in this API group follow the same versioning scheme and are designed to be backward compatible within the major version.</p>"},{"location":"reference/crd-spec/","title":"API Reference &amp; CRD Specification","text":"<p>Complete API documentation and Custom Resource Definition (CRD) specifications for the Git Change Operator.</p>"},{"location":"reference/crd-spec/#api-group-and-versions","title":"API Group and Versions","text":"<ul> <li>API Group: <code>gco.galos.one</code></li> <li>Version: <code>v1</code></li> <li>Scope: Namespaced</li> </ul>"},{"location":"reference/crd-spec/#gitcommit-resource","title":"GitCommit Resource","text":""},{"location":"reference/crd-spec/#overview","title":"Overview","text":"<p>The <code>GitCommit</code> resource enables automated git commits by reading data from Kubernetes resources and writing files to a git repository.</p>"},{"location":"reference/crd-spec/#resource-definition","title":"Resource Definition","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: string\n  namespace: string  # optional, defaults to \"default\"\nspec:\n  repository: string               # required - Git repository URL\n  branch: string                  # optional - Target branch (default: \"main\")\n  authSecretRef: string          # required - Authentication secret name\n  commitMessage: string          # required - Git commit message\n  files: []FileSpec             # optional - Static files to commit\n  resourceReferences: []ResourceReferenceSpec  # optional - Kubernetes resource references\n  writeMode: string             # optional - \"overwrite\" (default) or \"append\"\n  encryption: EncryptionSpec   # optional - File encryption configuration\nstatus:\n  conditions: []Condition      # Status conditions\n  lastCommitHash: string      # Last successful commit SHA\n</code></pre>"},{"location":"reference/crd-spec/#complete-example","title":"Complete Example","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: example-gitcommit\n  namespace: default\nspec:\n  repository: \"https://github.com/user/repo.git\"\n  branch: \"main\"\n  authSecretRef: \"git-credentials\"\n  commitMessage: \"Automated commit from Kubernetes cluster\"\n\n  # Static files\n  files:\n    - path: \"config/app-config.yaml\"\n      content: |\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          name: static-config\n        data:\n          key: value\n\n  # Resource references\n  resourceReferences:\n    - name: \"my-configmap\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"dump\"\n      output:\n        path: \"exported/configmap.yaml\"\n\n  # Encryption configuration\n  encryption:\n    enabled: true\n    fileExtension: \".encrypted\"\n    recipients:\n      - type: ssh\n        secretRef:\n          name: ssh-keys\n          key: id_rsa.pub\n      - type: yubikey\n        secretRef:\n          name: yubikey-piv\n          key: public-key\n\n  writeMode: \"overwrite\"\n</code></pre>"},{"location":"reference/crd-spec/#field-specifications","title":"Field Specifications","text":""},{"location":"reference/crd-spec/#specrepository","title":"spec.repository","text":"Field Type Required Description Default <code>repository</code> string \u2713 Git repository URL (HTTPS format) - <p>Example: <pre><code>repository: \"https://github.com/user/repo.git\"\n</code></pre></p>"},{"location":"reference/crd-spec/#specbranch","title":"spec.branch","text":"Field Type Required Description Default <code>branch</code> string \u2717 Target branch for commits <code>\"main\"</code> <p>Example: <pre><code>branch: \"development\"\n</code></pre></p>"},{"location":"reference/crd-spec/#specauthsecretref","title":"spec.authSecretRef","text":"Field Type Required Description <code>authSecretRef</code> string \u2713 Name of Kubernetes Secret containing git credentials <p>The referenced Secret must contain: <pre><code>apiVersion: v1\nkind: Secret\ntype: Opaque\ndata:\n  username: &lt;base64-encoded-username&gt;\n  password: &lt;base64-encoded-token-or-password&gt;\n</code></pre></p> <p>Example: <pre><code>authSecretRef: \"git-credentials\"\n</code></pre></p>"},{"location":"reference/crd-spec/#speccommitmessage","title":"spec.commitMessage","text":"Field Type Required Description Format <code>commitMessage</code> string \u2713 Git commit message Free text <p>Example: <pre><code>commitMessage: \"Automated update from Kubernetes cluster - {{ .Timestamp }}\"\n</code></pre></p>"},{"location":"reference/crd-spec/#specfiles","title":"spec.files","text":"<p>Array of static files to include in the commit.</p> <pre><code>files:\n  - path: string     # required - File path in repository\n    content: string  # required - File content\n</code></pre> Field Type Required Description <code>path</code> string \u2713 Relative path in Git repository <code>content</code> string \u2713 File content (supports multiline YAML) <p>Examples: <pre><code>files:\n  # Simple configuration file\n  - path: \"config/app.properties\"\n    content: |\n      server.port=8080\n      debug=true\n\n  # JSON configuration  \n  - path: \"config/settings.json\"\n    content: |\n      {\n        \"environment\": \"production\",\n        \"features\": {\n          \"authentication\": true\n        }\n      }\n</code></pre></p>"},{"location":"reference/crd-spec/#specresourcereferences","title":"spec.resourceReferences","text":"<p>Array of Kubernetes resource references for dynamic content extraction.</p> <pre><code>resourceReferences:\n  - name: string          # required - Resource name\n    apiVersion: string    # required - Resource API version\n    kind: string         # required - Resource kind\n    namespace: string    # optional - Resource namespace (required for namespaced resources)\n    strategy: string     # required - Extraction strategy\n    field: string        # optional - Field path (required for single-field strategy)\n    output: OutputSpec   # required - Output configuration\n</code></pre> Field Type Required Description Values <code>name</code> string \u2713 Name of Kubernetes resource - <code>apiVersion</code> string \u2713 API version of resource e.g. <code>\"v1\"</code>, <code>\"apps/v1\"</code> <code>kind</code> string \u2713 Resource kind e.g. <code>\"ConfigMap\"</code>, <code>\"Secret\"</code> <code>namespace</code> string \u2717 Resource namespace Required for namespaced resources <code>strategy</code> string \u2713 Data extraction strategy <code>\"dump\"</code>, <code>\"fields\"</code>, <code>\"single-field\"</code> <code>field</code> string \u2717 Field path for extraction Required when <code>strategy: \"single-field\"</code> <code>output</code> OutputSpec \u2713 Output configuration -"},{"location":"reference/crd-spec/#extraction-strategies","title":"Extraction Strategies","text":"Strategy Description Use Case Output <code>dump</code> Export entire resource as YAML Resource backup, migration Complete YAML file <code>fields</code> Extract all data fields as separate files Configuration management Multiple files <code>single-field</code> Extract specific field Credential extraction Single file"},{"location":"reference/crd-spec/#field-path-syntax","title":"Field Path Syntax","text":"<p>For <code>single-field</code> strategy, use dot notation:</p> <pre><code># Simple field\nfield: \"password\"\n\n# Nested field\nfield: \"spec.database.host\"\n\n# Array element\nfield: \"data.config.yaml\"\n</code></pre>"},{"location":"reference/crd-spec/#outputspec","title":"OutputSpec","text":"<pre><code>output:\n  path: string   # required - Output path in repository\n</code></pre> Field Type Required Description <code>path</code> string \u2713 Relative path in Git repository where extracted data will be written <p>Examples: <pre><code>resourceReferences:\n  # Dump entire ConfigMap as YAML\n  - name: \"app-config\"\n    apiVersion: \"v1\"\n    kind: \"ConfigMap\"\n    namespace: \"production\"\n    strategy: \"dump\"\n    output:\n      path: \"config/app-config.yaml\"\n\n  # Extract all fields as separate files\n  - name: \"database-secret\"\n    apiVersion: \"v1\"\n    kind: \"Secret\"\n    namespace: \"production\"\n    strategy: \"fields\"\n    output:\n      path: \"secrets/database/\"\n\n  # Extract single field\n  - name: \"database-secret\"\n    apiVersion: \"v1\"\n    kind: \"Secret\"\n    namespace: \"production\"\n    strategy: \"single-field\"\n    field: \"password\"\n    output:\n      path: \"credentials/db-password.txt\"\n</code></pre></p>"},{"location":"reference/crd-spec/#specencryption","title":"spec.encryption","text":"<p>Optional configuration for encrypting files before committing to git using age encryption.</p> <pre><code>encryption:\n  enabled: boolean           # required - Enable/disable encryption\n  fileExtension: string     # optional - Custom file extension (default: \".age\")\n  recipients: []RecipientSpec  # optional - List of encryption recipients\n</code></pre> Field Type Required Description Default <code>enabled</code> boolean \u2713 Enable/disable encryption - <code>fileExtension</code> string \u2717 File extension for encrypted files <code>\".age\"</code> <code>recipients</code> []RecipientSpec \u2717 List of encryption recipients <code>[]</code>"},{"location":"reference/crd-spec/#recipientspec","title":"RecipientSpec","text":"<pre><code>recipients:\n  - type: string        # required - Recipient type\n    secretRef:         # required - Secret reference\n      name: string     # required - Secret name\n      key: string      # optional - Key within Secret\n</code></pre> Field Type Required Description Values <code>type</code> string \u2713 Recipient type <code>\"age\"</code>, <code>\"ssh\"</code>, <code>\"passphrase\"</code>, <code>\"yubikey\"</code> <code>secretRef.name</code> string \u2713 Name of Kubernetes Secret containing the recipient - <code>secretRef.key</code> string \u2717 Key within the Secret Defaults to appropriate key for type <p>Recipient Types:</p> Type Description Secret Key Format Use Case <code>age</code> Age encryption public key age1... format Software-based encryption <code>ssh</code> SSH public key ssh-rsa/ssh-ed25519 format Team collaboration <code>passphrase</code> Password-based encryption Plain text passphrase Simple shared secrets <code>yubikey</code> YubiKey PIV public key PIV public key format Hardware security <p>Example: <pre><code>encryption:\n  enabled: true\n  fileExtension: \".encrypted\"\n  recipients:\n    # Age key recipient\n    - type: age\n      secretRef:\n        name: age-keys\n        key: public-key\n\n    # SSH key recipient\n    - type: ssh\n      secretRef:\n        name: ssh-keys\n        key: id_rsa.pub\n\n    # Passphrase recipient\n    - type: passphrase\n      secretRef:\n        name: passwords\n        key: encryption-passphrase\n\n    # YubiKey recipient (hardware security)\n    - type: yubikey\n      secretRef:\n        name: yubikey-piv\n        key: public-key\n</code></pre></p>"},{"location":"reference/crd-spec/#specwritemode","title":"spec.writeMode","text":"Field Type Required Description Values Default <code>writeMode</code> string \u2717 File writing behavior <code>\"overwrite\"</code>, <code>\"append\"</code> <code>\"overwrite\"</code> Value Description <code>overwrite</code> Replace file content completely <code>append</code> Add content to end of existing file"},{"location":"reference/crd-spec/#pullrequest-resource","title":"PullRequest Resource","text":""},{"location":"reference/crd-spec/#overview_1","title":"Overview","text":"<p>The <code>PullRequest</code> resource creates GitHub pull requests with files generated from Kubernetes resources.</p>"},{"location":"reference/crd-spec/#resource-definition_1","title":"Resource Definition","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: string\n  namespace: string  # optional, defaults to \"default\"\nspec:\n  repository: string              # required - GitHub repository URL\n  baseBranch: string             # optional - Base branch for PR (default: \"main\")\n  headBranch: string             # optional - Head branch name (auto-generated if not specified)\n  authSecretRef: string          # required - GitHub authentication secret\n  title: string                  # required - Pull request title\n  body: string                   # optional - Pull request description\n  files: []FileSpec             # optional - Static files to include\n  resourceReferences: []ResourceReferenceSpec  # optional - Kubernetes resource references\n  writeMode: string             # optional - \"overwrite\" (default) or \"append\"\n  encryption: EncryptionSpec   # optional - File encryption configuration\nstatus:\n  conditions: []Condition      # Status conditions\n  pullRequestURL: string      # URL of created pull request\n</code></pre>"},{"location":"reference/crd-spec/#complete-example_1","title":"Complete Example","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: example-pr\n  namespace: default\nspec:\n  repository: \"https://github.com/user/repo.git\"\n  baseBranch: \"main\"\n  authSecretRef: \"github-token\"\n  title: \"Automated configuration update\"\n  body: |\n    This pull request contains automated updates from the Kubernetes cluster.\n\n    ## Changes\n    - Updated application configuration\n    - Exported production secrets (encrypted)\n\n    ## Review Notes\n    Please verify configuration values before merging.\n\n  # Files and encryption (same as GitCommit)\n  files:\n    - path: \"config/metadata.yaml\"\n      content: |\n        generated_at: \"2023-10-01T10:00:00Z\"\n        source: \"kubernetes-cluster\"\n\n  resourceReferences:\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"config/app-config.yaml\"\n\n  encryption:\n    enabled: true\n    recipients:\n      - type: ssh\n        secretRef:\n          name: ssh-keys\n          key: id_rsa.pub\n</code></pre>"},{"location":"reference/crd-spec/#field-specifications_1","title":"Field Specifications","text":""},{"location":"reference/crd-spec/#specrepository_1","title":"spec.repository","text":"Field Type Required Description <code>repository</code> string \u2713 GitHub repository URL (HTTPS format)"},{"location":"reference/crd-spec/#specbasebranch","title":"spec.baseBranch","text":"Field Type Required Description Default <code>baseBranch</code> string \u2717 Base branch for the pull request <code>\"main\"</code>"},{"location":"reference/crd-spec/#specheadbranch","title":"spec.headBranch","text":"Field Type Required Description Default <code>headBranch</code> string \u2717 Head branch name for the pull request Auto-generated with timestamp"},{"location":"reference/crd-spec/#specauthsecretref_1","title":"spec.authSecretRef","text":"Field Type Required Description <code>authSecretRef</code> string \u2713 Name of Kubernetes Secret containing GitHub token <p>The referenced Secret must contain: <pre><code>apiVersion: v1\nkind: Secret\ntype: Opaque\ndata:\n  token: &lt;base64-encoded-github-token&gt;\n</code></pre></p>"},{"location":"reference/crd-spec/#spectitle","title":"spec.title","text":"Field Type Required Description <code>title</code> string \u2713 Pull request title"},{"location":"reference/crd-spec/#specbody","title":"spec.body","text":"Field Type Required Description <code>body</code> string \u2717 Pull request description (supports Markdown)"},{"location":"reference/crd-spec/#additional-fields","title":"Additional Fields","text":"<p>PullRequest resources support the same field specifications as GitCommit for: - <code>spec.files</code> - Static files to include in the pull request - <code>spec.resourceReferences</code> - Kubernetes resource references  - <code>spec.encryption</code> - File encryption configuration - <code>spec.writeMode</code> - File writing behavior</p>"},{"location":"reference/crd-spec/#status-fields","title":"Status Fields","text":"<p>Both GitCommit and PullRequest resources include status information:</p>"},{"location":"reference/crd-spec/#common-status-fields","title":"Common Status Fields","text":"<pre><code>status:\n  conditions:\n    - type: string              # Condition type\n      status: string            # True, False, Unknown\n      reason: string            # Machine-readable reason\n      message: string           # Human-readable message\n      lastTransitionTime: string # RFC3339 timestamp\n  phase: string                 # Current phase (Pending, Processing, Completed, Failed)\n</code></pre>"},{"location":"reference/crd-spec/#gitcommit-status","title":"GitCommit Status","text":"<pre><code>status:\n  lastCommitHash: \"abc123...\"   # SHA of the last successful commit\n  repositoryURL: \"https://github.com/user/repo/commit/abc123\"\n</code></pre>"},{"location":"reference/crd-spec/#pullrequest-status","title":"PullRequest Status","text":"<pre><code>status:\n  pullRequestURL: \"https://github.com/user/repo/pull/123\"  # URL of created PR\n  headBranch: \"auto-update-20231001-100000\"               # Generated branch name\n</code></pre>"},{"location":"reference/crd-spec/#validation-rules","title":"Validation Rules","text":""},{"location":"reference/crd-spec/#required-fields-validation","title":"Required Fields Validation","text":"<ul> <li>All required fields must be present and non-empty</li> <li>String fields cannot be empty when required</li> <li>Arrays can be empty but not null</li> </ul>"},{"location":"reference/crd-spec/#format-validation","title":"Format Validation","text":"<ul> <li>Repository URLs must be valid HTTPS URLs</li> <li>Field paths must use valid dot notation</li> <li>File paths must be relative (no leading <code>/</code>, no <code>../</code>)</li> <li>Encryption recipient types must be valid</li> </ul>"},{"location":"reference/crd-spec/#business-logic-validation","title":"Business Logic Validation","text":"<ul> <li>Referenced Secrets must exist and be accessible</li> <li>Referenced Kubernetes resources must exist when strategies are applied</li> <li>Field paths must exist in target resources for <code>single-field</code> strategy</li> <li>Output paths must be valid for the target repository</li> </ul>"},{"location":"reference/crd-spec/#security-validation","title":"Security Validation","text":"<ul> <li>Path traversal protection (no <code>../</code> sequences)</li> <li>File paths restricted to repository boundaries</li> <li>Sensitive data handling in logs (credentials are redacted)</li> </ul>"},{"location":"reference/crd-spec/#api-evolution","title":"API Evolution","text":""},{"location":"reference/crd-spec/#backward-compatibility","title":"Backward Compatibility","text":"<ul> <li>Field additions are backward compatible</li> <li>Optional fields may be added in future versions</li> <li>Required fields will not be removed within the same API version</li> </ul>"},{"location":"reference/crd-spec/#version-support","title":"Version Support","text":"<ul> <li><code>v1</code> is the current stable version</li> <li>Future versions (<code>v2</code>, etc.) may introduce breaking changes</li> <li>Migration guides will be provided for major version upgrades</li> </ul>"},{"location":"reference/crd-spec/#deprecated-features","title":"Deprecated Features","text":"<p>Currently no deprecated features. Deprecation notices will be provided at least one version before removal.</p>"},{"location":"reference/error-handling/","title":"Error Handling","text":"<p>This guide covers common errors, troubleshooting steps, and best practices for diagnosing issues with the Git Change Operator.</p>"},{"location":"reference/error-handling/#common-errors","title":"Common Errors","text":""},{"location":"reference/error-handling/#authentication-errors","title":"Authentication Errors","text":""},{"location":"reference/error-handling/#git-authentication-failed","title":"Git Authentication Failed","text":"<pre><code>Error: authentication required\n</code></pre> <p>Causes: - Invalid credentials in referenced Secret - Incorrect Secret name or namespace - Missing Secret fields (<code>username</code>, <code>password</code>)</p> <p>Solutions: 1. Verify Secret exists and contains correct fields:    <pre><code>kubectl get secret git-credentials -o yaml\n</code></pre></p> <ol> <li> <p>Check Secret data format:    <pre><code>apiVersion: v1\nkind: Secret\ntype: Opaque\ndata:\n  username: &lt;base64-encoded-username&gt;\n  password: &lt;base64-encoded-token&gt;  # Use personal access token for GitHub\n</code></pre></p> </li> <li> <p>Ensure the operator has permission to read the Secret:    <pre><code>kubectl auth can-i get secrets --as=system:serviceaccount:git-change-operator-system:git-change-operator-controller-manager\n</code></pre></p> </li> </ol>"},{"location":"reference/error-handling/#github-token-issues","title":"GitHub Token Issues","text":"<pre><code>Error: 401 Unauthorized - Bad credentials\n</code></pre> <p>Solutions: - Use a Personal Access Token instead of password - Ensure token has required permissions: <code>repo</code>, <code>pull_request</code> - Check token expiration date - Verify token scope includes target repository</p>"},{"location":"reference/error-handling/#repository-errors","title":"Repository Errors","text":""},{"location":"reference/error-handling/#repository-not-found","title":"Repository Not Found","text":"<pre><code>Error: repository not found\n</code></pre> <p>Causes: - Incorrect repository URL - Private repository without proper credentials - Repository has been moved or deleted</p> <p>Solutions: 1. Verify repository URL format:    <pre><code>repository:\n  url: \"https://github.com/user/repo.git\"  # Include .git suffix\n</code></pre></p> <ol> <li>Check repository accessibility:    <pre><code>git ls-remote https://github.com/user/repo.git\n</code></pre></li> </ol>"},{"location":"reference/error-handling/#branch-not-found","title":"Branch Not Found","text":"<pre><code>Error: branch 'main' not found\n</code></pre> <p>Solutions: - Verify branch exists in repository - Check default branch name (might be <code>master</code> instead of <code>main</code>) - Create branch if needed or use existing branch name</p>"},{"location":"reference/error-handling/#non-fast-forward-push-errors","title":"Non-Fast-Forward Push Errors","text":"<pre><code>Error: Updates were rejected because the tip of your current branch is behind\n</code></pre> <p>Causes: - Repository has changes not present in operator's local copy - Multiple operators writing to same repository simultaneously - Manual commits made to target branch</p> <p>Solutions: 1. The operator automatically handles this by pulling latest changes before pushing 2. If issues persist, check for conflicting file modifications 3. Consider using different branches for different operators</p>"},{"location":"reference/error-handling/#resource-reference-errors","title":"Resource Reference Errors","text":""},{"location":"reference/error-handling/#resource-not-found","title":"Resource Not Found","text":"<pre><code>Error: configmap \"my-config\" not found\n</code></pre> <p>Solutions: 1. Verify resource exists:    <pre><code>kubectl get configmap my-config -n default\n</code></pre></p> <ol> <li> <p>Check namespace specification:    <pre><code>resourceReferences:\n  - name: \"my-config\"\n    namespace: \"correct-namespace\"  # Must match actual namespace\n</code></pre></p> </li> <li> <p>Verify API version and kind:    <pre><code>kubectl api-resources | grep configmap\n</code></pre></p> </li> </ol>"},{"location":"reference/error-handling/#field-not-found","title":"Field Not Found","text":"<pre><code>Error: field \"spec.nonexistent\" not found in resource\n</code></pre> <p>Causes: - Invalid field path in <code>single-field</code> strategy - Field doesn't exist in the resource - Typo in field name</p> <p>Solutions: 1. Inspect resource structure:    <pre><code>kubectl get configmap my-config -o yaml\n</code></pre></p> <ol> <li> <p>Use correct field path:    <pre><code>strategy: \"single-field\"\nfield: \"data.config.yaml\"  # Correct path\n</code></pre></p> </li> <li> <p>Switch to <code>fields</code> or <code>dump</code> strategy if unsure about field structure</p> </li> </ol>"},{"location":"reference/error-handling/#permission-errors","title":"Permission Errors","text":""},{"location":"reference/error-handling/#rbac-permissions","title":"RBAC Permissions","text":"<pre><code>Error: configmaps is forbidden: User \"system:serviceaccount:git-change-operator-system:git-change-operator-controller-manager\" cannot get resource \"configmaps\"\n</code></pre> <p>Solutions: 1. Check existing ClusterRole:    <pre><code>kubectl get clusterrole git-change-operator-manager-role -o yaml\n</code></pre></p> <ol> <li>Update ClusterRole to include required permissions:    <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: git-change-operator-manager-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n</code></pre></li> </ol>"},{"location":"reference/error-handling/#cross-namespace-access","title":"Cross-Namespace Access","text":"<pre><code>Error: secrets \"my-secret\" is forbidden: User cannot get resource \"secrets\" in API group \"\" in the namespace \"other-namespace\"\n</code></pre> <p>Solutions: 1. Use Role/RoleBinding for namespace-specific permissions:    <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: other-namespace\n  name: git-change-operator-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"secrets\", \"configmaps\"]  \n  verbs: [\"get\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: git-change-operator-binding\n  namespace: other-namespace\nsubjects:\n- kind: ServiceAccount\n  name: git-change-operator-controller-manager\n  namespace: git-change-operator-system\nroleRef:\n  kind: Role\n  name: git-change-operator-role\n  apiGroup: rbac.authorization.k8s.io\n</code></pre></p>"},{"location":"reference/error-handling/#file-system-errors","title":"File System Errors","text":""},{"location":"reference/error-handling/#invalid-file-paths","title":"Invalid File Paths","text":"<pre><code>Error: invalid file path \"../../../etc/passwd\"\n</code></pre> <p>Causes: - Path traversal attempts (security protection) - Invalid characters in file paths - Paths outside repository root</p> <p>Solutions: - Use relative paths within repository: <code>config/app.yaml</code> - Avoid <code>../</code> path traversal - Use forward slashes <code>/</code> even on Windows</p>"},{"location":"reference/error-handling/#large-file-issues","title":"Large File Issues","text":"<pre><code>Error: file size exceeds limit\n</code></pre> <p>Solutions: - Break large files into smaller chunks - Use external storage for large binary files - Consider Git LFS for large file management</p>"},{"location":"reference/error-handling/#troubleshooting-steps","title":"Troubleshooting Steps","text":""},{"location":"reference/error-handling/#1-check-resource-status","title":"1. Check Resource Status","text":"<pre><code># Check GitCommit status\nkubectl get gitcommit my-commit -o yaml\n\n# Look for status conditions\nkubectl get gitcommit my-commit -o jsonpath='{.status.conditions}'\n</code></pre>"},{"location":"reference/error-handling/#2-review-controller-logs","title":"2. Review Controller Logs","text":"<pre><code># Get controller pod name\nkubectl get pods -n git-change-operator-system\n\n# Check logs\nkubectl logs -n git-change-operator-system deployment/git-change-operator-controller-manager\n\n# Follow logs in real-time\nkubectl logs -f -n git-change-operator-system deployment/git-change-operator-controller-manager\n</code></pre>"},{"location":"reference/error-handling/#3-validate-configuration","title":"3. Validate Configuration","text":"<pre><code># Dry-run validation\nkubectl apply --dry-run=client -f gitcommit.yaml\n\n# Check YAML syntax\nyamllint gitcommit.yaml\n</code></pre>"},{"location":"reference/error-handling/#4-test-resource-access","title":"4. Test Resource Access","text":"<pre><code># Test resource accessibility\nkubectl get configmap my-config -n target-namespace\n\n# Check resource content\nkubectl get configmap my-config -o yaml\n\n# Verify field paths\nkubectl get configmap my-config -o jsonpath='{.data.config\\.yaml}'\n</code></pre>"},{"location":"reference/error-handling/#5-debug-authentication","title":"5. Debug Authentication","text":"<pre><code># Check Secret content\nkubectl get secret git-credentials -o yaml\n\n# Decode Secret values\nkubectl get secret git-credentials -o jsonpath='{.data.username}' | base64 -d\n\n# Test git access manually\ngit ls-remote https://username:token@github.com/user/repo.git\n</code></pre>"},{"location":"reference/error-handling/#status-conditions","title":"Status Conditions","text":"<p>The operator reports status through Kubernetes conditions:</p>"},{"location":"reference/error-handling/#ready-condition","title":"Ready Condition","text":"<pre><code>status:\n  conditions:\n  - type: Ready\n    status: \"True\"\n    lastTransitionTime: \"2023-10-01T10:00:00Z\"\n    reason: \"CommitSuccessful\"\n    message: \"Successfully committed to repository\"\n</code></pre>"},{"location":"reference/error-handling/#failed-condition","title":"Failed Condition","text":"<pre><code>status:\n  conditions:\n  - type: Ready\n    status: \"False\" \n    lastTransitionTime: \"2023-10-01T10:00:00Z\"\n    reason: \"AuthenticationFailed\"\n    message: \"Failed to authenticate with git repository\"\n</code></pre>"},{"location":"reference/error-handling/#common-reasons","title":"Common Reasons","text":"Reason Meaning Action <code>CommitSuccessful</code> Operation completed successfully None <code>AuthenticationFailed</code> Git authentication failed Check credentials <code>RepositoryNotFound</code> Repository doesn't exist or inaccessible Verify URL and permissions <code>ResourceNotFound</code> Referenced Kubernetes resource not found Check resource name and namespace <code>FieldNotFound</code> Field path invalid for single-field strategy Verify field path <code>PermissionDenied</code> Insufficient RBAC permissions Update ClusterRole/Role <code>InvalidConfiguration</code> Invalid GitCommit specification Review YAML configuration"},{"location":"reference/error-handling/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"reference/error-handling/#metrics","title":"Metrics","text":"<p>The operator exposes Prometheus metrics for monitoring:</p> <pre><code># Successful reconciliations\ngitchange_operator_reconciliations_total{status=\"success\"}\n\n# Failed reconciliations  \ngitchange_operator_reconciliations_total{status=\"error\"}\n\n# Active GitCommit resources\ngitchange_operator_active_resources{type=\"GitCommit\"}\n</code></pre>"},{"location":"reference/error-handling/#alert-examples","title":"Alert Examples","text":"<pre><code># Alert on reconciliation failures\n- alert: GitChangeOperatorFailures\n  expr: rate(gitchange_operator_reconciliations_total{status=\"error\"}[5m]) &gt; 0\n  for: 2m\n  labels:\n    severity: warning\n  annotations:\n    summary: \"Git Change Operator experiencing failures\"\n    description: \"{{ $value }} reconciliation failures per second\"\n\n# Alert on authentication issues\n- alert: GitChangeOperatorAuthFailures  \n  expr: gitchange_operator_reconciliations_total{reason=\"AuthenticationFailed\"} &gt; 0\n  labels:\n    severity: critical\n  annotations:\n    summary: \"Git Change Operator authentication failing\"\n    description: \"Check git credentials and permissions\"\n</code></pre>"},{"location":"reference/error-handling/#best-practices","title":"Best Practices","text":""},{"location":"reference/error-handling/#error-prevention","title":"Error Prevention","text":"<ol> <li> <p>Validate configuration before applying: <pre><code>kubectl apply --dry-run=client -f gitcommit.yaml\n</code></pre></p> </li> <li> <p>Use specific resource references: <pre><code>resourceReferences:\n  - name: \"exact-resource-name\"\n    namespace: \"specific-namespace\"\n    apiVersion: \"v1\"\n    kind: \"ConfigMap\"\n</code></pre></p> </li> <li> <p>Test authentication separately: <pre><code>git clone https://github.com/user/repo.git\n</code></pre></p> </li> <li> <p>Monitor resource changes: <pre><code>kubectl get events --field-selector involvedObject.name=my-gitcommit\n</code></pre></p> </li> </ol>"},{"location":"reference/error-handling/#recovery-procedures","title":"Recovery Procedures","text":"<ol> <li> <p>Reset failed GitCommit: <pre><code>kubectl delete gitcommit my-commit\nkubectl apply -f gitcommit.yaml\n</code></pre></p> </li> <li> <p>Update credentials: <pre><code>kubectl delete secret git-credentials\nkubectl create secret generic git-credentials \\\n  --from-literal=username=myuser \\\n  --from-literal=password=mytoken\n</code></pre></p> </li> <li> <p>Force reconciliation: <pre><code>kubectl annotate gitcommit my-commit reconcile.gco.galos.one/trigger=\"$(date)\"\n</code></pre></p> </li> </ol>"},{"location":"reference/error-handling/#log-analysis","title":"Log Analysis","text":"<p>Common log patterns to watch for:</p> <pre><code># Successful operations\n\"Successfully committed\" level=info\n\n# Authentication issues  \n\"authentication failed\" level=error\n\n# Resource access problems\n\"resource not found\" level=error\n\n# Git operation failures\n\"failed to push\" level=error\n</code></pre> <p>Use log aggregation tools (Fluentd, Logstash) to centralize and analyze operator logs for patterns and trends.</p>"},{"location":"reference/resource-reference-strategies/","title":"Resource Reference Strategies","text":"<p>Resource reference strategies determine how data is extracted from Kubernetes resources and written to files in your Git repository.</p>"},{"location":"reference/resource-reference-strategies/#overview","title":"Overview","text":"<p>The Git Change Operator supports three strategies for extracting data from Kubernetes resources:</p> <ol> <li>Dump Strategy - Export the entire resource as YAML</li> <li>Fields Strategy - Extract all data fields as separate files  </li> <li>Single-Field Strategy - Extract a specific field with custom naming</li> </ol>"},{"location":"reference/resource-reference-strategies/#dump-strategy","title":"Dump Strategy","text":"<p>The <code>dump</code> strategy exports the complete Kubernetes resource as a YAML file.</p>"},{"location":"reference/resource-reference-strategies/#configuration","title":"Configuration","text":"<pre><code>resourceReferences:\n  - name: \"my-configmap\"\n    apiVersion: \"v1\"\n    kind: \"ConfigMap\" \n    namespace: \"default\"\n    strategy: \"dump\"\n    output:\n      path: \"exported/my-configmap.yaml\"\n</code></pre>"},{"location":"reference/resource-reference-strategies/#output","title":"Output","text":"<p>For a ConfigMap like this: <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-configmap\n  namespace: default\ndata:\n  app.properties: |\n    server.port=8080\n    debug=true\n  version: \"1.0.0\"\n</code></pre></p> <p>The <code>dump</code> strategy creates <code>exported/my-configmap.yaml</code> with the complete resource: <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-configmap\n  namespace: default\n  resourceVersion: \"12345\"\n  # ... other metadata\ndata:\n  app.properties: |\n    server.port=8080\n    debug=true\n  version: \"1.0.0\"\n</code></pre></p>"},{"location":"reference/resource-reference-strategies/#use-cases","title":"Use Cases","text":"<ul> <li>Backup and versioning: Complete resource snapshots</li> <li>Resource migration: Moving resources between clusters</li> <li>Audit trails: Full resource history in Git</li> </ul>"},{"location":"reference/resource-reference-strategies/#fields-strategy","title":"Fields Strategy","text":"<p>The <code>fields</code> strategy extracts each data field from the resource as a separate file.</p>"},{"location":"reference/resource-reference-strategies/#configuration_1","title":"Configuration","text":"<pre><code>resourceReferences:\n  - name: \"my-configmap\"\n    apiVersion: \"v1\"\n    kind: \"ConfigMap\"\n    namespace: \"default\" \n    strategy: \"fields\"\n    output:\n      path: \"config/\"  # Directory path\n</code></pre>"},{"location":"reference/resource-reference-strategies/#output_1","title":"Output","text":"<p>For the same ConfigMap above, the <code>fields</code> strategy creates:</p> <ul> <li> <p><code>config/app.properties</code>:   <pre><code>server.port=8080\ndebug=true\n</code></pre></p> </li> <li> <p><code>config/version</code>:   <pre><code>1.0.0\n</code></pre></p> </li> </ul>"},{"location":"reference/resource-reference-strategies/#supported-resource-types","title":"Supported Resource Types","text":"Resource Type Extracted Fields ConfigMap <code>.data.*</code> and <code>.binaryData.*</code> Secret <code>.data.*</code> (base64 decoded) Custom Resources <code>.spec.*</code>, <code>.status.*</code>, and other top-level fields"},{"location":"reference/resource-reference-strategies/#use-cases_1","title":"Use Cases","text":"<ul> <li>Configuration management: Individual config files</li> <li>Template generation: Separate files for different components</li> <li>Fine-grained versioning: Track changes to individual settings</li> </ul>"},{"location":"reference/resource-reference-strategies/#single-field-strategy","title":"Single-Field Strategy","text":"<p>The <code>single-field</code> strategy extracts a specific field with custom file naming and path control.</p>"},{"location":"reference/resource-reference-strategies/#configuration_2","title":"Configuration","text":"<pre><code>resourceReferences:\n  - name: \"database-secret\"\n    apiVersion: \"v1\"\n    kind: \"Secret\"\n    namespace: \"default\"\n    strategy: \"single-field\"\n    field: \"password\"  # Field to extract\n    output:\n      path: \"secrets/db-password.txt\"  # Custom file path\n</code></pre>"},{"location":"reference/resource-reference-strategies/#output_2","title":"Output","text":"<p>For a Secret like this: <pre><code>apiVersion: v1\nkind: Secret\ndata:\n  username: dXNlcg==  # \"user\"\n  password: cGFzcw==  # \"pass\"\n</code></pre></p> <p>The <code>single-field</code> strategy creates <code>secrets/db-password.txt</code> with: <pre><code>pass\n</code></pre></p>"},{"location":"reference/resource-reference-strategies/#field-path-syntax","title":"Field Path Syntax","text":"<p>The <code>field</code> parameter supports dot notation for nested fields:</p> <pre><code># Extract nested field from Custom Resource\nresourceReferences:\n  - name: \"my-app-config\"\n    apiVersion: \"apps.example.com/v1\"\n    kind: \"AppConfig\"\n    strategy: \"single-field\"\n    field: \"spec.database.host\"  # Nested field\n    output:\n      path: \"config/db-host.txt\"\n</code></pre>"},{"location":"reference/resource-reference-strategies/#use-cases_2","title":"Use Cases","text":"<ul> <li>Credential extraction: Individual secrets or tokens</li> <li>Configuration values: Specific settings for external systems  </li> <li>Custom naming: Files with meaningful names for consumers</li> </ul>"},{"location":"reference/resource-reference-strategies/#advanced-examples","title":"Advanced Examples","text":""},{"location":"reference/resource-reference-strategies/#multiple-strategies-in-one-gitcommit","title":"Multiple Strategies in One GitCommit","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: multi-strategy-commit\nspec:\n  repository:\n    url: \"https://github.com/user/config-repo.git\"\n  auth:\n    secretName: \"git-credentials\"\n  commit:\n    author: \"Config Operator &lt;config@example.com&gt;\"\n    message: \"Update configurations and secrets\"\n\n  resourceReferences:\n    # Full backup of critical ConfigMap\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"dump\"\n      output:\n        path: \"backups/app-config-backup.yaml\"\n\n    # Individual config files for deployment\n    - name: \"app-config\" \n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"production\"\n      strategy: \"fields\"\n      output:\n        path: \"deploy/config/\"\n\n    # Extract database password for external use\n    - name: \"db-credentials\"\n      apiVersion: \"v1\" \n      kind: \"Secret\"\n      namespace: \"production\"\n      strategy: \"single-field\"\n      field: \"password\"\n      output:\n        path: \"secrets/db-password\"\n</code></pre>"},{"location":"reference/resource-reference-strategies/#working-with-custom-resources","title":"Working with Custom Resources","text":"<pre><code>resourceReferences:\n  # Dump entire custom resource\n  - name: \"my-application\"\n    apiVersion: \"apps.example.com/v1\"\n    kind: \"Application\"\n    namespace: \"default\"\n    strategy: \"dump\"\n    output:\n      path: \"applications/my-app.yaml\"\n\n  # Extract specific configuration section\n  - name: \"my-application\"\n    apiVersion: \"apps.example.com/v1\" \n    kind: \"Application\"\n    namespace: \"default\"\n    strategy: \"single-field\"\n    field: \"spec.configuration\"\n    output:\n      path: \"config/app-settings.json\"\n</code></pre>"},{"location":"reference/resource-reference-strategies/#strategy-selection-guidelines","title":"Strategy Selection Guidelines","text":"Use Case Recommended Strategy Reason Resource backup <code>dump</code> Preserves complete resource state Config file deployment <code>fields</code> Creates usable individual files Secret extraction <code>single-field</code> Precise control over sensitive data Documentation generation <code>dump</code> Complete resource schemas Template processing <code>fields</code> Separate files for different templates External tool integration <code>single-field</code> Custom paths and naming"},{"location":"reference/resource-reference-strategies/#error-handling","title":"Error Handling","text":""},{"location":"reference/resource-reference-strategies/#common-issues","title":"Common Issues","text":"Error Cause Solution \"Field not found\" Invalid field path in <code>single-field</code> strategy Check resource structure and field path \"Resource not found\" Referenced resource doesn't exist Verify resource name, namespace, and API version \"No data fields\" Resource has no extractable data Use <code>dump</code> strategy or check resource content"},{"location":"reference/resource-reference-strategies/#validation","title":"Validation","text":"<p>The operator validates resource references at reconciliation time: - Checks if referenced resources exist - Validates field paths for <code>single-field</code> strategy - Ensures output paths are valid</p> <p>See Error Handling for detailed troubleshooting information.</p>"},{"location":"reference/write-modes/","title":"Write Modes","text":"<p>Write modes control how the Git Change Operator handles existing file content when writing files to your Git repository.</p>"},{"location":"reference/write-modes/#overview","title":"Overview","text":"<p>The Git Change Operator supports two write modes:</p> <ol> <li>Overwrite Mode - Replace existing file content (default)</li> <li>Append Mode - Add content to existing files</li> </ol>"},{"location":"reference/write-modes/#overwrite-mode","title":"Overwrite Mode","text":"<p>Default behavior - Replaces the entire content of existing files.</p>"},{"location":"reference/write-modes/#configuration","title":"Configuration","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: overwrite-example\nspec:\n  # ... repository and auth config\n  writeMode: \"overwrite\"  # This is the default\n\n  files:\n    - path: \"config/app.properties\"\n      content: |\n        server.port=8080\n        debug=true\n</code></pre>"},{"location":"reference/write-modes/#behavior","title":"Behavior","text":"<ul> <li>New files: Creates the file with specified content</li> <li>Existing files: Completely replaces existing content</li> <li>Empty content: Creates or overwrites with empty file</li> </ul>"},{"location":"reference/write-modes/#use-cases","title":"Use Cases","text":"<ul> <li>Configuration updates: Replace entire config files</li> <li>Resource exports: Clean exports of Kubernetes resources  </li> <li>Template generation: Generate fresh templates</li> <li>Documentation: Update complete documentation files</li> </ul>"},{"location":"reference/write-modes/#example","title":"Example","text":"<p>Initial file content (<code>config/app.properties</code>): <pre><code>server.port=3000\ndatabase.url=localhost\ndebug=false\n</code></pre></p> <p>After GitCommit with overwrite mode: <pre><code>server.port=8080\ndebug=true\n</code></pre></p> <p>Note: The <code>database.url</code> line is removed because overwrite mode replaces the entire content.</p>"},{"location":"reference/write-modes/#append-mode","title":"Append Mode","text":"<p>Adds new content to the end of existing files.</p>"},{"location":"reference/write-modes/#configuration_1","title":"Configuration","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: append-example\nspec:\n  # ... repository and auth config  \n  writeMode: \"append\"\n\n  files:\n    - path: \"logs/deployment.log\"\n      content: |\n        2023-10-01 10:00:00 - Deployment started\n        2023-10-01 10:05:00 - Application healthy\n</code></pre>"},{"location":"reference/write-modes/#behavior_1","title":"Behavior","text":"<ul> <li>New files: Creates the file with specified content</li> <li>Existing files: Adds content to the end of the file</li> <li>Multiple appends: Each reconciliation adds more content</li> </ul>"},{"location":"reference/write-modes/#use-cases_1","title":"Use Cases","text":"<ul> <li>Log aggregation: Collect logs from multiple sources</li> <li>Audit trails: Build chronological records</li> <li>Configuration merging: Add settings to existing configs</li> <li>Report generation: Accumulate data over time</li> </ul>"},{"location":"reference/write-modes/#example_1","title":"Example","text":"<p>Initial file content (<code>logs/deployment.log</code>): <pre><code>2023-09-30 15:30:00 - Previous deployment completed\n2023-09-30 15:35:00 - System stable\n</code></pre></p> <p>After GitCommit with append mode: <pre><code>2023-09-30 15:30:00 - Previous deployment completed  \n2023-09-30 15:35:00 - System stable\n2023-10-01 10:00:00 - Deployment started\n2023-10-01 10:05:00 - Application healthy\n</code></pre></p>"},{"location":"reference/write-modes/#resource-references-and-write-modes","title":"Resource References and Write Modes","text":"<p>Write modes apply to both static files and resource references:</p>"},{"location":"reference/write-modes/#overwrite-with-resource-references","title":"Overwrite with Resource References","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: config-export\nspec:\n  # ... repository and auth config\n  writeMode: \"overwrite\"\n\n  resourceReferences:\n    - name: \"app-config\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"dump\"\n      output:\n        path: \"exported/app-config.yaml\"\n</code></pre> <p>Result: Replaces <code>exported/app-config.yaml</code> with current ConfigMap state.</p>"},{"location":"reference/write-modes/#append-with-resource-references","title":"Append with Resource References","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit  \nmetadata:\n  name: log-collection\nspec:\n  # ... repository and auth config\n  writeMode: \"append\"\n\n  resourceReferences:\n    - name: \"application-logs\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"single-field\"\n      field: \"latest.log\"\n      output:\n        path: \"aggregated/all-logs.txt\"\n</code></pre> <p>Result: Adds the log content to the end of <code>aggregated/all-logs.txt</code>.</p>"},{"location":"reference/write-modes/#advanced-examples","title":"Advanced Examples","text":""},{"location":"reference/write-modes/#mixed-content-types","title":"Mixed Content Types","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: mixed-content\nspec:\n  repository:\n    url: \"https://github.com/user/config-repo.git\"\n  auth:\n    secretName: \"git-credentials\"\n  commit:\n    author: \"Operator &lt;operator@example.com&gt;\"\n    message: \"Update configurations and logs\"\n\n  writeMode: \"append\"\n\n  files:\n    # Static timestamp\n    - path: \"activity/timestamps.log\"\n      content: |\n        {{ .Timestamp }} - GitCommit reconciliation started\n\n  resourceReferences:\n    # Append ConfigMap data to log file\n    - name: \"audit-log\"\n      apiVersion: \"v1\"\n      kind: \"ConfigMap\"\n      namespace: \"default\"\n      strategy: \"single-field\"  \n      field: \"audit.log\"\n      output:\n        path: \"activity/timestamps.log\"  # Same file as above\n</code></pre>"},{"location":"reference/write-modes/#per-file-write-mode-control","title":"Per-File Write Mode Control","text":"<p>Currently, write mode applies to all files in a GitCommit. For different behaviors, use separate GitCommit resources:</p> <pre><code># Overwrite configuration files\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: config-update\nspec:\n  # ... repository and auth config\n  writeMode: \"overwrite\"\n  files:\n    - path: \"config/app.yaml\"\n      content: \"# Fresh config\"\n\n---\n# Append to log files  \napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: log-update\nspec:\n  # ... repository and auth config\n  writeMode: \"append\" \n  files:\n    - path: \"logs/activity.log\"\n      content: \"New log entry\"\n</code></pre>"},{"location":"reference/write-modes/#best-practices","title":"Best Practices","text":""},{"location":"reference/write-modes/#when-to-use-overwrite-mode","title":"When to Use Overwrite Mode","text":"<p>\u2705 Good for: - Configuration files that should be completely replaced - Exported Kubernetes resources (<code>dump</code> strategy) - Generated documentation or templates - Files where you want clean, predictable content</p> <p>\u274c Avoid for: - Log files or audit trails - Files where you need to preserve existing data - Collaborative files that others might modify</p>"},{"location":"reference/write-modes/#when-to-use-append-mode","title":"When to Use Append Mode","text":"<p>\u2705 Good for: - Log aggregation and audit trails - Building chronological records - Accumulating data over time - Files where existing content should be preserved</p> <p>\u274c Avoid for: - Configuration files (can create duplicates) - Files that need clean, structured content - Cases where file size could grow indefinitely</p>"},{"location":"reference/write-modes/#file-management","title":"File Management","text":"<pre><code># Good: Clear intent with appropriate mode\nfiles:\n  - path: \"config/database.yaml\"      # Overwrite mode (default)\n    content: \"host: db.example.com\"\n\n  - path: \"logs/deployment.log\"       # Should use append mode\n    content: \"Deployment completed\"\n</code></pre> <p>Consider implementing log rotation or cleanup strategies for append mode files to prevent unlimited growth.</p>"},{"location":"reference/write-modes/#error-handling","title":"Error Handling","text":""},{"location":"reference/write-modes/#common-issues","title":"Common Issues","text":"Issue Cause Solution File conflicts Multiple resources writing to same path with different modes Use separate GitCommit resources or different paths Large files Append mode causing excessive file growth Implement cleanup strategy or use overwrite mode Permission denied Git repository doesn't allow file modifications Check repository permissions and authentication"},{"location":"reference/write-modes/#validation","title":"Validation","text":"<p>The operator validates: - Write mode is either \"overwrite\" or \"append\" - File paths are valid for the target repository - Authentication allows write access</p> <p>See Error Handling for detailed troubleshooting information.</p>"},{"location":"reference/write-modes/#migration-between-write-modes","title":"Migration Between Write Modes","text":""},{"location":"reference/write-modes/#from-overwrite-to-append","title":"From Overwrite to Append","text":"<p>Before changing to append mode, ensure existing files contain the baseline content you want to preserve.</p> <pre><code># Step 1: Final overwrite with baseline content\nwriteMode: \"overwrite\"\nfiles:\n  - path: \"logs/audit.log\" \n    content: |\n      # Audit Log Started\n      2023-10-01 00:00:00 - Baseline established\n</code></pre> <pre><code># Step 2: Switch to append mode\nwriteMode: \"append\"\nfiles:\n  - path: \"logs/audit.log\"\n    content: |\n      2023-10-01 10:00:00 - First append entry\n</code></pre>"},{"location":"reference/write-modes/#from-append-to-overwrite","title":"From Append to Overwrite","text":"<p>Backup existing content before switching, as overwrite mode will replace all accumulated content.</p> <pre><code># Backup existing file\ngit show HEAD:logs/audit.log &gt; backup-audit.log\n\n# Then switch GitCommit to overwrite mode\n</code></pre>"},{"location":"user-guide/","title":"User Guide","text":"<p>Welcome to the Git Change Operator User Guide! This comprehensive guide will help you understand, install, configure, and use the Git Change Operator effectively.</p>"},{"location":"user-guide/#getting-started","title":"Getting Started","text":"<p>If you're new to the Git Change Operator, start here:</p> <ol> <li>Installation - Install the operator in your Kubernetes cluster</li> <li>Quick Start - Create your first GitCommit resource</li> <li>Configuration - Configure authentication and operator settings</li> <li>Kind Full Demo - Complete end-to-end demo using Kind cluster</li> </ol>"},{"location":"user-guide/#core-concepts","title":"Core Concepts","text":""},{"location":"user-guide/#resource-types","title":"Resource Types","text":"<p>The operator provides two main resource types:</p> <ul> <li>GitCommit Resources - Direct commits to Git repositories</li> <li>PullRequest Resources - Create GitHub pull requests</li> </ul>"},{"location":"user-guide/#advanced-features","title":"Advanced Features","text":"<ul> <li>Resource References - Reference existing Kubernetes resources</li> <li>Authentication - Set up secure Git authentication</li> </ul>"},{"location":"user-guide/#common-workflows","title":"Common Workflows","text":""},{"location":"user-guide/#basic-file-commit","title":"Basic File Commit","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: basic-commit\nspec:\n  repository: https://github.com/user/repo.git\n  branch: main\n  commitMessage: \"Add configuration file\"\n  authSecretRef: git-token\n  files:\n    - path: config/app.yaml\n      content: |\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          name: app-config\n</code></pre>"},{"location":"user-guide/#resource-reference","title":"Resource Reference","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: export-configmap\nspec:\n  repository: https://github.com/user/repo.git\n  branch: main\n  commitMessage: \"Export ConfigMap data\"\n  authSecretRef: git-token\n  resourceRefs:\n    - name: app-config\n      kind: ConfigMap\n      strategy:\n        type: fields\n        outputPath: configs/\n</code></pre>"},{"location":"user-guide/authentication/","title":"Authentication","text":"<p>This guide covers all authentication methods supported by the Git Change Operator for secure access to Git repositories and Git hosting providers like GitHub, GitLab, and Bitbucket.</p>"},{"location":"user-guide/authentication/#overview","title":"Overview","text":"<p>The Git Change Operator supports multiple authentication methods:</p> <ul> <li>Personal Access Tokens - GitHub, GitLab, Bitbucket tokens</li> <li>SSH Keys - Public/private key authentication</li> <li>Basic Authentication - Username/password (not recommended for production)</li> <li>App Authentication - GitHub App authentication (coming soon)</li> <li>OAuth - OAuth-based authentication (coming soon)</li> </ul>"},{"location":"user-guide/authentication/#personal-access-tokens","title":"Personal Access Tokens","text":""},{"location":"user-guide/authentication/#github-personal-access-token","title":"GitHub Personal Access Token","text":"<p>GitHub Personal Access Tokens (PAT) are the recommended method for GitHub authentication.</p>"},{"location":"user-guide/authentication/#creating-a-github-token","title":"Creating a GitHub Token","text":"<ol> <li>Go to GitHub Settings \u2192 Developer settings \u2192 Personal access tokens</li> <li>Click \"Generate new token\"</li> <li>Select appropriate scopes:</li> <li><code>repo</code> - Full repository access (for private repos)</li> <li><code>public_repo</code> - Public repository access (for public repos)</li> <li><code>workflow</code> - Update GitHub Actions workflows (if needed)</li> <li><code>read:org</code> - Read organization membership (if using organization repos)</li> </ol>"},{"location":"user-guide/authentication/#token-permissions-by-use-case","title":"Token Permissions by Use Case","text":"<p>Public Repository Access: <pre><code># Minimal permissions for public repos\nscopes:\n  - public_repo\n</code></pre></p> <p>Private Repository Access: <pre><code># Full repository access for private repos  \nscopes:\n  - repo\n</code></pre></p> <p>Organization Repository with Workflows: <pre><code># Organization repos with GitHub Actions\nscopes:\n  - repo\n  - workflow\n  - read:org\n</code></pre></p>"},{"location":"user-guide/authentication/#storing-github-tokens","title":"Storing GitHub Tokens","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: github-credentials\n  namespace: default\ntype: Opaque\ndata:\n  token: Z2hwX3Rva2VuX2hlcmU=  # base64 encoded GitHub PAT\n  # Optional: store username for reference\n  username: bXl1c2VybmFtZQ==     # base64 encoded username\n</code></pre>"},{"location":"user-guide/authentication/#using-github-tokens-in-resources","title":"Using GitHub Tokens in Resources","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: github-commit\nspec:\n  repository: \"https://github.com/myorg/private-repo.git\"\n  branch: \"main\"\n  message: \"Update from cluster\"\n\n  # GitHub token authentication\n  credentials:\n    secretName: github-credentials\n    tokenKey: token  # Key in secret containing the token\n\n  resourceRef:\n    apiVersion: v1\n    kind: ConfigMap\n    name: app-config\n    namespace: default\n    path: \"config.yaml\"\n</code></pre>"},{"location":"user-guide/authentication/#gitlab-personal-access-token","title":"GitLab Personal Access Token","text":""},{"location":"user-guide/authentication/#creating-a-gitlab-token","title":"Creating a GitLab Token","text":"<ol> <li>Go to GitLab Settings \u2192 Access Tokens</li> <li>Create a new token with appropriate scopes:</li> <li><code>api</code> - Full API access</li> <li><code>read_repository</code> - Read repository access</li> <li><code>write_repository</code> - Write repository access</li> </ol>"},{"location":"user-guide/authentication/#gitlab-token-configuration","title":"GitLab Token Configuration","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: gitlab-credentials\n  namespace: default\ntype: Opaque\ndata:\n  token: Z2xwYXRfdG9rZW5faGVyZQ==  # base64 encoded GitLab token\n  username: Z2l0bGFidXNlcg==         # base64 encoded username\n\n---\napiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: gitlab-mr\nspec:\n  repository: \"https://gitlab.com/myorg/project.git\"\n  baseBranch: \"main\"\n  headBranch: \"automated-update\"\n  title: \"Automated update from cluster\"\n\n  # GitLab token authentication\n  credentials:\n    secretName: gitlab-credentials\n    tokenKey: token\n\n  # GitLab-specific provider\n  provider: \"gitlab\"\n</code></pre>"},{"location":"user-guide/authentication/#bitbucket-app-password","title":"Bitbucket App Password","text":""},{"location":"user-guide/authentication/#creating-bitbucket-app-password","title":"Creating Bitbucket App Password","text":"<ol> <li>Go to Bitbucket Settings \u2192 App passwords</li> <li>Create a new app password with permissions:</li> <li><code>Repositories: Read</code> - Read repository access</li> <li><code>Repositories: Write</code> - Write repository access</li> <li><code>Pull requests: Write</code> - Create pull requests</li> </ol>"},{"location":"user-guide/authentication/#bitbucket-configuration","title":"Bitbucket Configuration","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: bitbucket-credentials\n  namespace: default\ntype: Opaque\ndata:\n  username: Yml0YnVja2V0dXNlcg==  # base64 encoded Bitbucket username\n  password: YXBwX3Bhc3N3b3Jk      # base64 encoded app password\n\n---\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: bitbucket-commit\nspec:\n  repository: \"https://bitbucket.org/myworkspace/repo.git\"\n\n  credentials:\n    secretName: bitbucket-credentials\n    usernameKey: username\n    passwordKey: password\n\n  provider: \"bitbucket\"\n</code></pre>"},{"location":"user-guide/authentication/#ssh-key-authentication","title":"SSH Key Authentication","text":"<p>SSH keys provide secure authentication without exposing passwords or tokens.</p>"},{"location":"user-guide/authentication/#generating-ssh-keys","title":"Generating SSH Keys","text":"<pre><code># Generate SSH key pair\nssh-keygen -t ed25519 -C \"git-change-operator@mycompany.com\" -f git-operator-key\n\n# This creates:\n# - git-operator-key (private key)  \n# - git-operator-key.pub (public key)\n</code></pre>"},{"location":"user-guide/authentication/#adding-ssh-key-to-git-provider","title":"Adding SSH Key to Git Provider","text":""},{"location":"user-guide/authentication/#github-ssh-key","title":"GitHub SSH Key","text":"<ol> <li> <p>Copy the public key content:    <pre><code>cat git-operator-key.pub\n</code></pre></p> </li> <li> <p>Go to GitHub Settings \u2192 SSH and GPG keys</p> </li> <li> <p>Click \"New SSH key\" and paste the public key</p> </li> </ol>"},{"location":"user-guide/authentication/#gitlab-ssh-key","title":"GitLab SSH Key","text":"<ol> <li>Copy the public key content</li> <li>Go to GitLab Settings \u2192 SSH Keys</li> <li>Add the public key</li> </ol>"},{"location":"user-guide/authentication/#creating-ssh-secret","title":"Creating SSH Secret","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: git-ssh-credentials\n  namespace: default\ntype: kubernetes.io/ssh-auth\ndata:\n  ssh-privatekey: |\n    LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0=\n    # ... base64 encoded private key content ...\n    LS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0t\nstringData:\n  # Optional: known_hosts for host verification\n  known_hosts: |\n    github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\n    gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\n</code></pre>"},{"location":"user-guide/authentication/#using-ssh-authentication","title":"Using SSH Authentication","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: ssh-commit\nspec:\n  # Use SSH URL format\n  repository: \"git@github.com:myorg/private-repo.git\"\n\n  credentials:\n    secretName: git-ssh-credentials\n    # SSH secrets use standard keys\n    privateKeyKey: ssh-privatekey  # Default for ssh-auth type\n    knownHostsKey: known_hosts     # Optional\n</code></pre>"},{"location":"user-guide/authentication/#basic-authentication","title":"Basic Authentication","text":"<p>Note: Basic authentication with username/password is not recommended for production use due to security concerns. Use Personal Access Tokens instead.</p>"},{"location":"user-guide/authentication/#basic-auth-configuration","title":"Basic Auth Configuration","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: basic-auth-credentials\n  namespace: default\ntype: Opaque\ndata:\n  username: bXl1c2VybmFtZQ==  # base64 encoded username\n  password: bXlwYXNzd29yZA==  # base64 encoded password\n\n---\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: basic-auth-commit\nspec:\n  repository: \"https://github.com/myorg/repo.git\"\n\n  credentials:\n    secretName: basic-auth-credentials\n    usernameKey: username\n    passwordKey: password\n</code></pre>"},{"location":"user-guide/authentication/#multi-repository-authentication","title":"Multi-Repository Authentication","text":""},{"location":"user-guide/authentication/#per-repository-credentials","title":"Per-Repository Credentials","text":"<p>Use different credentials for different repositories:</p> <pre><code># Production repository credentials\napiVersion: v1\nkind: Secret\nmetadata:\n  name: prod-repo-creds\n  namespace: production\ntype: Opaque\ndata:\n  token: cHJvZF90b2tlbl9oZXJl\n\n---\n# Staging repository credentials  \napiVersion: v1\nkind: Secret\nmetadata:\n  name: staging-repo-creds\n  namespace: staging\ntype: Opaque\ndata:\n  token: c3RhZ2luZ190b2tlbl9oZXJl\n\n---\n# Production GitCommit\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: prod-commit\n  namespace: production\nspec:\n  repository: \"https://github.com/myorg/prod-config.git\"\n  credentials:\n    secretName: prod-repo-creds\n    tokenKey: token\n\n---\n# Staging GitCommit\napiVersion: gco.galos.one/v1\nkind: GitCommit  \nmetadata:\n  name: staging-commit\n  namespace: staging\nspec:\n  repository: \"https://github.com/myorg/staging-config.git\"\n  credentials:\n    secretName: staging-repo-creds\n    tokenKey: token\n</code></pre>"},{"location":"user-guide/authentication/#default-credentials","title":"Default Credentials","text":"<p>Configure default credentials at the operator level:</p> <pre><code># Default credentials secret\napiVersion: v1\nkind: Secret\nmetadata:\n  name: default-git-credentials\n  namespace: git-change-operator-system\ntype: Opaque\ndata:\n  token: ZGVmYXVsdF90b2tlbl9oZXJl\n\n---\n# Configure operator to use default credentials\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: git-change-operator-controller-manager\n  namespace: git-change-operator-system\nspec:\n  template:\n    spec:\n      containers:\n      - name: manager\n        env:\n        - name: DEFAULT_GIT_TOKEN\n          valueFrom:\n            secretKeyRef:\n              name: default-git-credentials\n              key: token\n        - name: DEFAULT_GIT_USERNAME\n          value: \"git-change-operator\"\n</code></pre>"},{"location":"user-guide/authentication/#organization-wide-credentials","title":"Organization-Wide Credentials","text":"<p>Use organization credentials for multiple repositories:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: org-credentials\n  namespace: default\ntype: Opaque\ndata:\n  token: b3JnX3Rva2VuX2hlcmU=  # Token with access to all org repos\n\n---\n# Multiple GitCommits using same credentials\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: repo1-commit\nspec:\n  repository: \"https://github.com/myorg/repo1.git\"\n  credentials:\n    secretName: org-credentials\n    tokenKey: token\n\n---\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: repo2-commit\nspec:\n  repository: \"https://github.com/myorg/repo2.git\"\n  credentials:\n    secretName: org-credentials\n    tokenKey: token\n</code></pre>"},{"location":"user-guide/authentication/#advanced-authentication","title":"Advanced Authentication","text":""},{"location":"user-guide/authentication/#token-rotation","title":"Token Rotation","text":"<p>Implement automatic token rotation:</p> <pre><code># Primary token\napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-token-primary\n  namespace: default\n  annotations:\n    rotation.io/expires: \"2024-12-31\"\ntype: Opaque\ndata:\n  token: cHJpbWFyeV90b2tlbg==\n\n---\n# Backup token (for rotation)\napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-token-backup\n  namespace: default\n  annotations:\n    rotation.io/expires: \"2025-01-31\"\ntype: Opaque\ndata:\n  token: YmFja3VwX3Rva2Vu\n\n---\n# GitCommit with fallback credentials\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: rotating-auth-commit\nspec:\n  repository: \"https://github.com/myorg/repo.git\"\n\n  # Primary credentials\n  credentials:\n    secretName: github-token-primary\n    tokenKey: token\n\n  # Fallback credentials (used if primary fails)\n  fallbackCredentials:\n    secretName: github-token-backup\n    tokenKey: token\n</code></pre>"},{"location":"user-guide/authentication/#cross-cluster-authentication","title":"Cross-Cluster Authentication","text":"<p>Share credentials across clusters:</p> <pre><code># External secret for cross-cluster sync\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: git-credentials-sync\n  namespace: default\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    name: cluster-secret-store\n    kind: ClusterSecretStore\n  target:\n    name: git-credentials\n    creationPolicy: Owner\n  data:\n  - secretKey: token\n    remoteRef:\n      key: git-tokens\n      property: github-token\n</code></pre>"},{"location":"user-guide/authentication/#environment-specific-authentication","title":"Environment-Specific Authentication","text":"<p>Use different authentication per environment:</p> <pre><code># Base secret template\napiVersion: v1\nkind: Secret\nmetadata:\n  name: git-creds-template\ntype: Opaque\nstringData:\n  token: ${GIT_TOKEN}\n  username: ${GIT_USERNAME}\n\n---\n# Production overlay\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nnamespace: production\nresources:\n- ../base\nreplacements:\n- source:\n    kind: Secret\n    name: production-git-token\n    fieldPath: data.token\n  targets:\n  - select:\n      kind: Secret\n      name: git-creds-template\n    fieldPaths:\n    - stringData.token\n\n---\n# Staging overlay  \napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nnamespace: staging\nresources:\n- ../base\nreplacements:\n- source:\n    kind: Secret\n    name: staging-git-token\n    fieldPath: data.token\n  targets:\n  - select:\n      kind: Secret\n      name: git-creds-template\n    fieldPaths:\n    - stringData.token\n</code></pre>"},{"location":"user-guide/authentication/#security-best-practices","title":"Security Best Practices","text":""},{"location":"user-guide/authentication/#token-security","title":"Token Security","text":"<ol> <li>Use minimal permissions - Only grant necessary scopes</li> <li>Rotate tokens regularly - Set expiration dates and rotate</li> <li>Monitor token usage - Track API calls and access patterns</li> <li>Revoke unused tokens - Remove tokens that are no longer needed</li> <li>Use separate tokens for different environments</li> </ol>"},{"location":"user-guide/authentication/#secret-management","title":"Secret Management","text":"<ol> <li>Use Kubernetes secrets - Store credentials securely</li> <li>Enable secret encryption at rest</li> <li>Limit secret access with RBAC</li> <li>Audit secret usage - Monitor secret access</li> <li>Use external secret managers when possible</li> </ol>"},{"location":"user-guide/authentication/#rbac-configuration","title":"RBAC Configuration","text":"<pre><code># Minimal RBAC for reading credentials\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: git-credentials-reader\nrules:\n- apiGroups: [\"\"]\n  resources: [\"secrets\"]\n  resourceNames: [\"git-credentials\", \"github-token\"]\n  verbs: [\"get\"]\n\n---\n# Bind to operator service account\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: git-credentials-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: git-change-operator-controller-manager\n  namespace: git-change-operator-system\nroleRef:\n  kind: Role\n  name: git-credentials-reader\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"user-guide/authentication/#network-security","title":"Network Security","text":"<pre><code># Network policy to restrict operator access\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: git-change-operator-netpol\n  namespace: git-change-operator-system\nspec:\n  podSelector:\n    matchLabels:\n      control-plane: controller-manager\n  policyTypes:\n  - Egress\n  egress:\n  # Allow Git hosting providers\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 443  # HTTPS\n    - protocol: TCP\n      port: 22   # SSH\n  # Allow Kubernetes API\n  - to:\n    - namespaceSelector: {}\n    ports:\n    - protocol: TCP\n      port: 443\n</code></pre>"},{"location":"user-guide/authentication/#provider-specific-configuration","title":"Provider-Specific Configuration","text":""},{"location":"user-guide/authentication/#github-enterprise","title":"GitHub Enterprise","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: github-enterprise-commit\nspec:\n  repository: \"https://github.enterprise.com/myorg/repo.git\"\n\n  # GitHub Enterprise configuration\n  provider: \"github\"\n  providerConfig:\n    baseURL: \"https://github.enterprise.com/api/v3\"\n    uploadURL: \"https://github.enterprise.com/api/uploads\"\n\n  credentials:\n    secretName: github-enterprise-token\n    tokenKey: token\n</code></pre>"},{"location":"user-guide/authentication/#troubleshooting-authentication","title":"Troubleshooting Authentication","text":""},{"location":"user-guide/authentication/#common-issues","title":"Common Issues","text":""},{"location":"user-guide/authentication/#token-permission-errors","title":"Token Permission Errors","text":"<pre><code># Error: Insufficient permissions\n# Check token scopes\ncurl -H \"Authorization: token $GITHUB_TOKEN\" \\\n     -H \"Accept: application/vnd.github.v3+json\" \\\n     https://api.github.com/user\n\n# Verify repository access\ncurl -H \"Authorization: token $GITHUB_TOKEN\" \\\n     https://api.github.com/repos/myorg/myrepo\n</code></pre>"},{"location":"user-guide/authentication/#ssh-key-issues","title":"SSH Key Issues","text":"<pre><code># Test SSH connection\nssh -T git@github.com\n\n# Debug SSH connection\nssh -vT git@github.com\n\n# Check SSH key fingerprint\nssh-keygen -lf ~/.ssh/id_ed25519.pub\n</code></pre>"},{"location":"user-guide/authentication/#certificate-issues","title":"Certificate Issues","text":"<pre><code># Skip SSL verification (not recommended for production)\ngit config --global http.sslVerify false\n\n# Use custom CA certificate\ngit config --global http.sslCAInfo /path/to/ca-cert.pem\n</code></pre>"},{"location":"user-guide/authentication/#debug-commands","title":"Debug Commands","text":"<pre><code># Check secret content\nkubectl get secret git-credentials -o yaml\n\n# Test authentication manually\nkubectl exec -it &lt;operator-pod&gt; -- git ls-remote https://github.com/myorg/repo.git\n\n# Check operator logs for auth errors\nkubectl logs -n git-change-operator-system -l control-plane=controller-manager --tail=100\n</code></pre>"},{"location":"user-guide/authentication/#validation-steps","title":"Validation Steps","text":"<pre><code># 1. Verify secret exists and has correct keys\nkubectl describe secret git-credentials\n\n# 2. Check RBAC permissions\nkubectl auth can-i get secrets --as=system:serviceaccount:git-change-operator-system:git-change-operator-controller-manager\n\n# 3. Test repository access\ngit clone &lt;repository-url&gt;\n\n# 4. Verify token permissions\ncurl -H \"Authorization: token &lt;token&gt;\" https://api.github.com/user/repos\n\n# 5. Check network connectivity\nkubectl exec &lt;operator-pod&gt; -- nslookup github.com\n</code></pre>"},{"location":"user-guide/authentication/#next-steps","title":"Next Steps","text":"<p>After setting up authentication:</p> <ol> <li>GitCommit Resources - Create your first GitCommit</li> <li>PullRequest Resources - Automate pull request creation</li> <li>Configuration - Fine-tune operator settings</li> <li>Examples - See real-world authentication examples</li> </ol> <p>For enterprise authentication patterns, see our Corporate Setup Guide.</p>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>This guide covers all configuration options for the Git Change Operator, from basic setup to advanced enterprise configurations.</p>"},{"location":"user-guide/configuration/#overview","title":"Overview","text":"<p>The Git Change Operator can be configured at multiple levels: - Operator-level configuration via command-line flags and environment variables - Resource-level configuration via GitCommit and PullRequest specs - Cluster-level configuration via ConfigMaps and other Kubernetes resources</p>"},{"location":"user-guide/configuration/#operator-configuration","title":"Operator Configuration","text":""},{"location":"user-guide/configuration/#command-line-flags","title":"Command Line Flags","text":"<p>The operator controller supports various command-line flags:</p> <pre><code>git-change-operator \\\n  --metrics-bind-addr=:8080 \\\n  --leader-elect=true \\\n  --zap-log-level=info \\\n  --reconcile-interval=30s \\\n  --max-concurrent-reconciles=10\n</code></pre>"},{"location":"user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>Configure the operator using environment variables:</p> <pre><code># config/manager/manager.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: controller-manager\nspec:\n  template:\n    spec:\n      containers:\n      - name: manager\n        env:\n        - name: RECONCILE_INTERVAL\n          value: \"30s\"\n        - name: MAX_CONCURRENT_RECONCILES  \n          value: \"10\"\n        - name: LOG_LEVEL\n          value: \"info\"\n        - name: ENABLE_WEBHOOKS\n          value: \"true\"\n        - name: GIT_TIMEOUT\n          value: \"300s\"\n        - name: DEFAULT_BRANCH\n          value: \"main\"\n</code></pre>"},{"location":"user-guide/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"user-guide/configuration/#core-settings","title":"Core Settings","text":"Flag Environment Variable Default Description <code>--metrics-bind-addr</code> <code>METRICS_BIND_ADDR</code> <code>:8080</code> Address for metrics server <code>--leader-elect</code> <code>ENABLE_LEADER_ELECTION</code> <code>true</code> Enable leader election <code>--zap-log-level</code> <code>LOG_LEVEL</code> <code>info</code> Log level (debug, info, error) <code>--reconcile-interval</code> <code>RECONCILE_INTERVAL</code> <code>30s</code> Default reconciliation interval <code>--max-concurrent-reconciles</code> <code>MAX_CONCURRENT_RECONCILES</code> <code>10</code> Max concurrent reconciliations"},{"location":"user-guide/configuration/#git-settings","title":"Git Settings","text":"Flag Environment Variable Default Description <code>--git-timeout</code> <code>GIT_TIMEOUT</code> <code>300s</code> Timeout for Git operations <code>--default-branch</code> <code>DEFAULT_BRANCH</code> <code>main</code> Default Git branch <code>--git-user-name</code> <code>GIT_USER_NAME</code> <code>git-change-operator</code> Default Git user name <code>--git-user-email</code> <code>GIT_USER_EMAIL</code> <code>operator@example.com</code> Default Git user email"},{"location":"user-guide/configuration/#resource-settings","title":"Resource Settings","text":"Flag Environment Variable Default Description <code>--enable-webhooks</code> <code>ENABLE_WEBHOOKS</code> <code>true</code> Enable admission webhooks <code>--webhook-port</code> <code>WEBHOOK_PORT</code> <code>9443</code> Webhook server port <code>--cert-dir</code> <code>WEBHOOK_CERT_DIR</code> <code>/tmp/k8s-webhook-server/serving-certs</code> Webhook certificate directory"},{"location":"user-guide/configuration/#resource-configuration","title":"Resource Configuration","text":""},{"location":"user-guide/configuration/#gitcommit-configuration","title":"GitCommit Configuration","text":""},{"location":"user-guide/configuration/#basic-configuration","title":"Basic Configuration","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: example-commit\n  namespace: default\nspec:\n  # Required fields\n  repository: \"https://github.com/myorg/config-repo.git\"\n  branch: \"main\"\n  message: \"Update configuration\"\n\n  # Optional configuration\n  reconcileInterval: \"60s\"\n  retryPolicy:\n    maxRetries: 3\n    backoff: \"30s\"\n</code></pre>"},{"location":"user-guide/configuration/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: advanced-commit\nspec:\n  repository: \"https://github.com/myorg/config-repo.git\"\n  branch: \"feature/automated-updates\"\n  message: |\n    Automated configuration update\n\n    Updated by: git-change-operator\n    Cluster: {{ .cluster.name }}\n    Timestamp: {{ .timestamp }}\n\n  # Authentication configuration\n  credentials:\n    secretName: git-credentials\n    usernameKey: username  # default: username\n    passwordKey: token     # default: password\n\n  # Git configuration\n  author:\n    name: \"Git Change Operator\"\n    email: \"operator@mycompany.com\"\n  committer:\n    name: \"Automation System\"\n    email: \"automation@mycompany.com\"\n\n  # Resource reference configuration\n  resourceRef:\n    apiVersion: v1\n    kind: ConfigMap\n    name: app-config\n    namespace: default\n    path: \"config/application.yaml\"\n    strategy: \"template\"\n    template: |\n      # Application Configuration\n      # Generated on: {{ .timestamp }}\n      app:\n        name: {{ .metadata.name }}\n        namespace: {{ .metadata.namespace }}\n        data:\n      {{ range $key, $value := .data }}\n        {{ $key }}: {{ $value | quote }}\n      {{ end }}\n\n  # Write mode configuration\n  writeMode: \"overwrite\"  # overwrite, append, merge\n\n  # File configuration\n  fileMode: \"0644\"\n  directoryMode: \"0755\"\n  createDirs: true\n\n  # Reconciliation configuration\n  reconcileInterval: \"300s\"\n  suspend: false\n\n  # Retry configuration\n  retryPolicy:\n    maxRetries: 5\n    backoff: \"60s\"\n    maxBackoff: \"600s\"\n    backoffMultiplier: 2.0\n</code></pre>"},{"location":"user-guide/configuration/#pullrequest-configuration","title":"PullRequest Configuration","text":""},{"location":"user-guide/configuration/#basic-configuration_1","title":"Basic Configuration","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: example-pr\nspec:\n  repository: \"https://github.com/myorg/config-repo.git\"\n  baseBranch: \"main\"\n  headBranch: \"automated-update\"\n  title: \"Automated configuration update\"\n  body: \"This PR contains automated updates from the Kubernetes cluster\"\n</code></pre>"},{"location":"user-guide/configuration/#advanced-configuration_1","title":"Advanced Configuration","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: advanced-pr\nspec:\n  repository: \"https://github.com/myorg/config-repo.git\"\n  baseBranch: \"main\"\n  headBranch: \"config-update-{{ .timestamp }}\"\n\n  # PR metadata\n  title: \"Configuration update from {{ .cluster.name }}\"\n  body: |\n    # Automated Configuration Update\n\n    This pull request contains automated configuration updates from the Kubernetes cluster.\n\n    ## Changes\n    {{ range .changes }}\n    - Updated {{ .resource.kind }}/{{ .resource.name }} in namespace {{ .resource.namespace }}\n    {{ end }}\n\n    ## Validation\n    - [ ] Configuration syntax is valid\n    - [ ] No sensitive data is exposed\n    - [ ] Changes are backwards compatible\n\n    Generated by: git-change-operator\n    Cluster: {{ .cluster.name }}\n    Timestamp: {{ .timestamp }}\n\n  # Labels and assignees\n  labels:\n    - \"automated\"\n    - \"configuration\"\n    - \"cluster-sync\"\n  assignees:\n    - \"devops-team\"\n  reviewers:\n    - \"config-reviewers\"\n\n  # PR options\n  draft: false\n  maintainerCanModify: true\n\n  # Authentication\n  credentials:\n    secretName: github-token\n    tokenKey: token\n\n  # Resource references (same as GitCommit)\n  resourceRef:\n    apiVersion: v1\n    kind: Secret\n    name: database-config\n    namespace: production\n    path: \"config/database.yaml\"\n    strategy: \"template\"\n</code></pre>"},{"location":"user-guide/configuration/#authentication-configuration","title":"Authentication Configuration","text":""},{"location":"user-guide/configuration/#git-credentials","title":"Git Credentials","text":""},{"location":"user-guide/configuration/#usernamepassword-authentication","title":"Username/Password Authentication","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: git-credentials\n  namespace: default\ntype: Opaque\ndata:\n  username: dXNlcm5hbWU=  # base64 encoded username\n  password: cGFzc3dvcmQ=  # base64 encoded password/token\n</code></pre>"},{"location":"user-guide/configuration/#ssh-key-authentication","title":"SSH Key Authentication","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: git-ssh-key\n  namespace: default\ntype: kubernetes.io/ssh-auth\ndata:\n  ssh-privatekey: LS0tLS1CRUdJTi... # base64 encoded SSH private key\n</code></pre>"},{"location":"user-guide/configuration/#github-token-authentication","title":"GitHub Token Authentication","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: github-token\n  namespace: default\ntype: Opaque\ndata:\n  token: Z2hwX3Rva2Vu...  # base64 encoded GitHub personal access token\n</code></pre>"},{"location":"user-guide/configuration/#authentication-strategies","title":"Authentication Strategies","text":""},{"location":"user-guide/configuration/#per-resource-authentication","title":"Per-Resource Authentication","text":"<pre><code># GitCommit with specific credentials\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: secure-commit\nspec:\n  repository: \"https://github.com/private/repo.git\"\n  credentials:\n    secretName: private-repo-creds\n    usernameKey: username\n    passwordKey: token\n</code></pre>"},{"location":"user-guide/configuration/#default-authentication","title":"Default Authentication","text":"<p>Configure default credentials via environment variables:</p> <pre><code># In controller deployment\nenv:\n- name: DEFAULT_GIT_USERNAME\n  valueFrom:\n    secretKeyRef:\n      name: default-git-creds\n      key: username\n- name: DEFAULT_GIT_PASSWORD\n  valueFrom:\n    secretKeyRef:\n      name: default-git-creds\n      key: password\n</code></pre>"},{"location":"user-guide/configuration/#cluster-level-configuration","title":"Cluster-Level Configuration","text":""},{"location":"user-guide/configuration/#configmap-configuration","title":"ConfigMap Configuration","text":"<p>Create a ConfigMap for operator-wide settings:</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: git-change-operator-config\n  namespace: git-change-operator-system\ndata:\n  config.yaml: |\n    git:\n      timeout: \"300s\"\n      defaultBranch: \"main\"\n      defaultAuthor:\n        name: \"Git Change Operator\"\n        email: \"operator@example.com\"\n\n    reconciliation:\n      interval: \"30s\"\n      maxConcurrent: 10\n      retryPolicy:\n        maxRetries: 3\n        backoff: \"30s\"\n\n    webhooks:\n      enabled: true\n      port: 9443\n      certDir: \"/tmp/k8s-webhook-server/serving-certs\"\n\n    features:\n      enableMetrics: true\n      enableProfiling: false\n      enableTracing: false\n</code></pre> <p>Mount the ConfigMap in the controller:</p> <pre><code># config/manager/manager.yaml\nspec:\n  template:\n    spec:\n      containers:\n      - name: manager\n        args:\n        - --config=/etc/config/config.yaml\n        volumeMounts:\n        - name: config\n          mountPath: /etc/config\n          readOnly: true\n      volumes:\n      - name: config\n        configMap:\n          name: git-change-operator-config\n</code></pre>"},{"location":"user-guide/configuration/#rbac-configuration","title":"RBAC Configuration","text":""},{"location":"user-guide/configuration/#minimal-rbac","title":"Minimal RBAC","text":"<pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: git-change-operator-manager-role\nrules:\n# GitCommit and PullRequest resources\n- apiGroups: [\"gco.galos.one\"]\n  resources: [\"gitcommits\", \"pullrequests\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"gco.galos.one\"]\n  resources: [\"gitcommits/status\", \"pullrequests/status\"]\n  verbs: [\"get\", \"update\", \"patch\"]\n\n# Resources to read for references (minimal example)\n- apiGroups: [\"\"]\n  resources: [\"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"configmaps\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n</code></pre>"},{"location":"user-guide/configuration/#extended-rbac-for-all-resources","title":"Extended RBAC for All Resources","text":"<pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: git-change-operator-extended-role\nrules:\n# Core resources\n- apiGroups: [\"\"]\n  resources: [\"*\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n\n# Apps resources\n- apiGroups: [\"apps\"]\n  resources: [\"*\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n\n# Custom resources (add as needed)\n- apiGroups: [\"networking.k8s.io\"]\n  resources: [\"*\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n\n# Operator's own resources\n- apiGroups: [\"gco.galos.one\"]\n  resources: [\"*\"]\n  verbs: [\"*\"]\n</code></pre>"},{"location":"user-guide/configuration/#performance-configuration","title":"Performance Configuration","text":""},{"location":"user-guide/configuration/#resource-limits","title":"Resource Limits","text":"<p>Configure appropriate resource limits:</p> <pre><code># config/manager/manager.yaml\nspec:\n  template:\n    spec:\n      containers:\n      - name: manager\n        resources:\n          limits:\n            cpu: 500m\n            memory: 512Mi\n          requests:\n            cpu: 100m\n            memory: 128Mi\n</code></pre>"},{"location":"user-guide/configuration/#scaling-configuration","title":"Scaling Configuration","text":""},{"location":"user-guide/configuration/#horizontal-pod-autoscaling","title":"Horizontal Pod Autoscaling","text":"<pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: git-change-operator-hpa\n  namespace: git-change-operator-system\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: git-change-operator-controller-manager\n  minReplicas: 1\n  maxReplicas: 5\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"user-guide/configuration/#vertical-pod-autoscaling","title":"Vertical Pod Autoscaling","text":"<pre><code>apiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: git-change-operator-vpa\n  namespace: git-change-operator-system\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: git-change-operator-controller-manager\n  updatePolicy:\n    updateMode: \"Auto\"\n  resourcePolicy:\n    containerPolicies:\n    - containerName: manager\n      minAllowed:\n        cpu: 100m\n        memory: 128Mi\n      maxAllowed:\n        cpu: 1000m\n        memory: 1Gi\n</code></pre>"},{"location":"user-guide/configuration/#monitoring-configuration","title":"Monitoring Configuration","text":""},{"location":"user-guide/configuration/#metrics-configuration","title":"Metrics Configuration","text":"<p>Enable Prometheus metrics:</p> <pre><code># config/prometheus/monitor.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: git-change-operator-metrics\n  namespace: git-change-operator-system\nspec:\n  endpoints:\n  - path: /metrics\n    port: http\n    interval: 30s\n    scheme: http\n  selector:\n    matchLabels:\n      control-plane: controller-manager\n</code></pre>"},{"location":"user-guide/configuration/#custom-metrics","title":"Custom Metrics","text":"<p>Configure custom metrics in the operator:</p> <pre><code># ConfigMap configuration\ndata:\n  config.yaml: |\n    metrics:\n      enabled: true\n      port: 8080\n      path: \"/metrics\"\n      interval: \"30s\"\n      customMetrics:\n        - name: \"git_operations_total\"\n          help: \"Total number of Git operations\"\n          type: \"counter\"\n        - name: \"git_operation_duration_seconds\"\n          help: \"Duration of Git operations in seconds\"\n          type: \"histogram\"\n        - name: \"resource_references_total\"\n          help: \"Total number of resource references processed\"\n          type: \"counter\"\n</code></pre>"},{"location":"user-guide/configuration/#logging-configuration","title":"Logging Configuration","text":""},{"location":"user-guide/configuration/#log-levels","title":"Log Levels","text":"<p>Configure different log levels:</p> <pre><code>env:\n- name: LOG_LEVEL\n  value: \"info\"  # debug, info, warn, error\n- name: LOG_FORMAT\n  value: \"json\"  # json, console\n- name: LOG_CALLER\n  value: \"true\"\n- name: LOG_STACKTRACE_LEVEL\n  value: \"error\"\n</code></pre>"},{"location":"user-guide/configuration/#structured-logging","title":"Structured Logging","text":"<p>Configure structured logging format:</p> <pre><code>data:\n  config.yaml: |\n    logging:\n      level: \"info\"\n      format: \"json\"\n      caller: true\n      stacktraceLevel: \"error\"\n      fields:\n        service: \"git-change-operator\"\n        version: \"v1.0.0\"\n      outputs:\n        - \"stdout\"\n        - \"/var/log/git-change-operator.log\"\n</code></pre>"},{"location":"user-guide/configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"user-guide/configuration/#pod-security-standards","title":"Pod Security Standards","text":"<p>Configure Pod Security Standards:</p> <pre><code># Namespace configuration\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: git-change-operator-system\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\n</code></pre>"},{"location":"user-guide/configuration/#security-context","title":"Security Context","text":"<p>Configure security context for the controller:</p> <pre><code># config/manager/manager.yaml\nspec:\n  template:\n    spec:\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 65532\n        runAsGroup: 65532\n        fsGroup: 65532\n        seccompProfile:\n          type: RuntimeDefault\n      containers:\n      - name: manager\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 65532\n          runAsGroup: 65532\n</code></pre>"},{"location":"user-guide/configuration/#network-policies","title":"Network Policies","text":"<p>Restrict network access:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: git-change-operator-netpol\n  namespace: git-change-operator-system\nspec:\n  podSelector:\n    matchLabels:\n      control-plane: controller-manager\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: git-change-operator-system\n    ports:\n    - protocol: TCP\n      port: 8080  # metrics\n    - protocol: TCP\n      port: 9443  # webhooks\n  egress:\n  - {}  # Allow all egress (for Git operations)\n</code></pre>"},{"location":"user-guide/configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"user-guide/configuration/#development-environment","title":"Development Environment","text":"<pre><code># dev/config.yaml\ngit:\n  timeout: \"60s\"\n  defaultBranch: \"dev\"\n\nreconciliation:\n  interval: \"10s\"  # Faster reconciliation for development\n  maxConcurrent: 5\n\nlogging:\n  level: \"debug\"\n  format: \"console\"\n\nfeatures:\n  enableMetrics: true\n  enableProfiling: true  # Enable profiling in dev\n  enableTracing: true\n</code></pre>"},{"location":"user-guide/configuration/#production-environment","title":"Production Environment","text":"<pre><code># prod/config.yaml\ngit:\n  timeout: \"300s\"\n  defaultBranch: \"main\"\n\nreconciliation:\n  interval: \"60s\"  # Slower reconciliation for stability\n  maxConcurrent: 20\n\nlogging:\n  level: \"info\"\n  format: \"json\"\n\nfeatures:\n  enableMetrics: true\n  enableProfiling: false  # Disable profiling in production\n  enableTracing: false\n\nsecurity:\n  enableWebhooks: true\n  requireTLS: true\n  minTLSVersion: \"1.2\"\n</code></pre>"},{"location":"user-guide/configuration/#enterprise-environment","title":"Enterprise Environment","text":"<pre><code># enterprise/config.yaml\ngit:\n  timeout: \"600s\"\n  defaultBranch: \"main\"\n  proxy:\n    http: \"http://proxy.company.com:8080\"\n    https: \"http://proxy.company.com:8080\"\n    noProxy: \"localhost,127.0.0.1,.company.com\"\n\nreconciliation:\n  interval: \"300s\"  # Conservative reconciliation\n  maxConcurrent: 50\n\nlogging:\n  level: \"info\"\n  format: \"json\"\n  auditLog:\n    enabled: true\n    path: \"/var/log/audit/git-change-operator.log\"\n\nsecurity:\n  enableWebhooks: true\n  requireTLS: true\n  minTLSVersion: \"1.3\"\n  certificateAuthority: \"/etc/ssl/certs/ca-certificates.crt\"\n\ncompliance:\n  enableAuditLogging: true\n  retentionPeriod: \"2555d\"  # 7 years\n  encryptionAtRest: true\n</code></pre>"},{"location":"user-guide/configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"user-guide/configuration/#webhook-validation","title":"Webhook Validation","text":"<p>The operator includes admission webhooks to validate configurations:</p> <pre><code># Automatic validation for GitCommit resources\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingAdmissionWebhook\nmetadata:\n  name: vgitcommit.kb.io\nwebhooks:\n- name: vgitcommit.kb.io\n  clientConfig:\n    service:\n      name: webhook-service\n      namespace: git-change-operator-system\n      path: /validate-git-galos-one-v1-gitcommit\n  rules:\n  - operations: [\"CREATE\", \"UPDATE\"]\n    apiGroups: [\"gco.galos.one\"]\n    apiVersions: [\"v1\"]\n    resources: [\"gitcommits\"]\n</code></pre>"},{"location":"user-guide/configuration/#configuration-testing","title":"Configuration Testing","text":"<p>Test your configuration before applying:</p> <pre><code># Validate GitCommit resource\nkubectl apply --dry-run=server -f gitcommit.yaml\n\n# Validate with webhook\nkubectl apply --dry-run=server -f gitcommit.yaml --validate=true\n\n# Test configuration parsing\ngit-change-operator --config=config.yaml --validate-config\n</code></pre>"},{"location":"user-guide/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"user-guide/configuration/#common-configuration-issues","title":"Common Configuration Issues","text":""},{"location":"user-guide/configuration/#invalid-git-repository-urls","title":"Invalid Git Repository URLs","text":"<pre><code># \u274c Invalid\nrepository: \"github.com/user/repo\"\n\n# \u2705 Valid\nrepository: \"https://github.com/user/repo.git\"\nrepository: \"git@github.com:user/repo.git\"\n</code></pre>"},{"location":"user-guide/configuration/#missing-required-fields","title":"Missing Required Fields","text":"<pre><code># \u274c Missing required fields\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: incomplete\nspec:\n  repository: \"https://github.com/user/repo.git\"\n  # Missing: branch, message\n\n# \u2705 Complete\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: complete\nspec:\n  repository: \"https://github.com/user/repo.git\"\n  branch: \"main\"\n  message: \"Update configuration\"\n</code></pre>"},{"location":"user-guide/configuration/#resource-reference-errors","title":"Resource Reference Errors","text":"<pre><code># \u274c Invalid field path\nresourceRef:\n  fieldPath: \"data.nonexistent\"\n\n# \u2705 Valid field path\nresourceRef:\n  fieldPath: \"data.config\"\n</code></pre>"},{"location":"user-guide/configuration/#configuration-debugging","title":"Configuration Debugging","text":"<p>Enable debug logging to troubleshoot configuration issues:</p> <pre><code># Enable debug logging\nkubectl patch deployment git-change-operator-controller-manager \\\n  -n git-change-operator-system \\\n  --type='json' \\\n  -p='[{\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/env/0/value\", \"value\": \"debug\"}]'\n\n# View debug logs\nkubectl logs -n git-change-operator-system -l control-plane=controller-manager --tail=100 -f\n</code></pre>"},{"location":"user-guide/configuration/#next-steps","title":"Next Steps","text":"<p>After configuring the operator:</p> <ol> <li>GitCommit Resources - Learn about GitCommit resources</li> <li>PullRequest Resources - Understand PullRequest automation</li> <li>Authentication - Set up secure authentication</li> <li>Examples - See real-world configuration examples</li> </ol> <p>For advanced configuration scenarios, see our Enterprise Setup Guide.</p>"},{"location":"user-guide/gitcommit/","title":"GitCommit Resources","text":"<p>The <code>GitCommit</code> resource is the primary way to automate Git commit operations based on Kubernetes cluster data. This guide covers everything you need to know about creating, configuring, and managing GitCommit resources.</p>"},{"location":"user-guide/gitcommit/#overview","title":"Overview","text":"<p>GitCommit resources enable you to: - Extract data from Kubernetes resources and commit it to Git repositories - Transform resource data using various strategies and templates - Automate configuration synchronization between cluster and Git - Implement GitOps workflows with automated commits</p>"},{"location":"user-guide/gitcommit/#basic-gitcommit-resource","title":"Basic GitCommit Resource","text":""},{"location":"user-guide/gitcommit/#minimal-example","title":"Minimal Example","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: simple-commit\n  namespace: default\nspec:\n  repository: \"https://github.com/myorg/config-repo.git\"\n  branch: \"main\"\n  message: \"Update configuration from cluster\"\n  resourceRef:\n    apiVersion: v1\n    kind: ConfigMap\n    name: app-config\n    namespace: default\n    path: \"config.yaml\"\n</code></pre> <p>This creates a commit with the contents of the <code>app-config</code> ConfigMap.</p>"},{"location":"user-guide/gitcommit/#complete-example","title":"Complete Example","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: comprehensive-commit\n  namespace: default\n  labels:\n    app: myapp\n    environment: production\nspec:\n  # Git repository configuration\n  repository: \"https://github.com/myorg/config-repo.git\"\n  branch: \"main\"\n  message: |\n    Update {{ .resourceRef.kind }}/{{ .resourceRef.name }} configuration\n\n    Namespace: {{ .resourceRef.namespace }}\n    Updated: {{ .timestamp }}\n    Cluster: {{ .cluster.name }}\n\n  # Authentication\n  credentials:\n    secretName: git-credentials\n    usernameKey: username\n    passwordKey: token\n\n  # Git author information\n  author:\n    name: \"Git Change Operator\"\n    email: \"operator@mycompany.com\"\n\n  # Resource reference\n  resourceRef:\n    apiVersion: v1\n    kind: ConfigMap\n    name: app-config\n    namespace: default\n    path: \"applications/myapp/config.yaml\"\n    strategy: \"template\"\n    template: |\n      # Application Configuration\n      # Generated: {{ .timestamp }}\n      apiVersion: v1\n      kind: ConfigMap\n      metadata:\n        name: {{ .metadata.name }}\n        namespace: {{ .metadata.namespace }}\n        labels:\n      {{ range $key, $value := .metadata.labels }}\n        {{ $key }}: {{ $value }}\n      {{ end }}\n      data:\n      {{ range $key, $value := .data }}\n        {{ $key }}: |\n      {{ $value | indent 4 }}\n      {{ end }}\n\n  # File handling\n  writeMode: \"overwrite\"\n  fileMode: \"0644\"\n  createDirs: true\n\n  # Reconciliation settings\n  reconcileInterval: \"300s\"\n  suspend: false\n\n  # Retry policy\n  retryPolicy:\n    maxRetries: 3\n    backoff: \"30s\"\n</code></pre>"},{"location":"user-guide/gitcommit/#resource-reference-strategies","title":"Resource Reference Strategies","text":"<p>GitCommit resources can extract data from Kubernetes resources using different strategies:</p>"},{"location":"user-guide/gitcommit/#full-resource-strategy","title":"Full Resource Strategy","text":"<p>Extract the entire resource as YAML:</p> <pre><code>spec:\n  resourceRef:\n    apiVersion: v1\n    kind: ConfigMap\n    name: app-config\n    namespace: default\n    path: \"configmaps/app-config.yaml\"\n    strategy: \"full\"  # Default strategy\n</code></pre> <p>Results in a file containing the complete ConfigMap YAML.</p>"},{"location":"user-guide/gitcommit/#value-strategy","title":"Value Strategy","text":"<p>Extract a specific field value:</p> <pre><code>spec:\n  resourceRef:\n    apiVersion: v1\n    kind: Secret\n    name: database-secret\n    namespace: default\n    path: \"database-url.txt\"\n    strategy: \"value\"\n    fieldPath: \"data.url\"\n</code></pre> <p>Results in a file containing only the decoded value of <code>data.url</code>.</p>"},{"location":"user-guide/gitcommit/#template-strategy","title":"Template Strategy","text":"<p>Transform resource data using Go templates:</p> <pre><code>spec:\n  resourceRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: myapp\n    namespace: default\n    path: \"deployments/myapp.env\"\n    strategy: \"template\"\n    template: |\n      # Environment configuration for {{ .metadata.name }}\n      REPLICAS={{ .spec.replicas }}\n      IMAGE={{ (index .spec.template.spec.containers 0).image }}\n      {{ range .spec.template.spec.containers }}\n      {{ range .env }}\n      {{ .name }}={{ .value }}\n      {{ end }}\n      {{ end }}\n</code></pre>"},{"location":"user-guide/gitcommit/#jsonpath-strategy","title":"JSONPath Strategy","text":"<p>Extract data using JSONPath expressions:</p> <pre><code>spec:\n  resourceRef:\n    apiVersion: v1\n    kind: Pod\n    name: mypod\n    namespace: default\n    path: \"pod-ip.txt\"\n    strategy: \"jsonpath\"\n    jsonPath: \"{.status.podIP}\"\n</code></pre>"},{"location":"user-guide/gitcommit/#write-modes","title":"Write Modes","text":"<p>Control how data is written to files:</p>"},{"location":"user-guide/gitcommit/#overwrite-mode","title":"Overwrite Mode","text":"<p>Replace the entire file content (default):</p> <pre><code>spec:\n  writeMode: \"overwrite\"\n  resourceRef:\n    # ... resource config\n    path: \"config.yaml\"\n</code></pre>"},{"location":"user-guide/gitcommit/#append-mode","title":"Append Mode","text":"<p>Add content to the end of existing files:</p> <pre><code>spec:\n  writeMode: \"append\"\n  resourceRef:\n    # ... resource config  \n    path: \"logs/events.log\"\n    template: |\n      {{ .timestamp }}: {{ .metadata.name }} updated in {{ .metadata.namespace }}\n</code></pre>"},{"location":"user-guide/gitcommit/#merge-mode","title":"Merge Mode","text":"<p>Intelligently merge structured data:</p> <pre><code>spec:\n  writeMode: \"merge\"\n  resourceRef:\n    # ... resource config\n    path: \"combined-config.yaml\"\n    strategy: \"template\"\n    template: |\n      {{ .metadata.name }}:\n        namespace: {{ .metadata.namespace }}\n        data:\n      {{ range $key, $value := .data }}\n        {{ $key }}: {{ $value }}\n      {{ end }}\n</code></pre>"},{"location":"user-guide/gitcommit/#advanced-resource-references","title":"Advanced Resource References","text":""},{"location":"user-guide/gitcommit/#multiple-resources","title":"Multiple Resources","text":"<p>Reference multiple resources in a single commit:</p> <pre><code>spec:\n  resourceRefs:  # Note: plural form\n    - apiVersion: v1\n      kind: ConfigMap\n      name: app-config\n      namespace: default\n      path: \"config/app.yaml\"\n    - apiVersion: v1\n      kind: Secret\n      name: app-secrets\n      namespace: default  \n      path: \"secrets/app.yaml\"\n      strategy: \"template\"\n      template: |\n        # Secrets (values redacted)\n        {{ range $key, $value := .data }}\n        {{ $key }}: \"[REDACTED]\"\n        {{ end }}\n</code></pre>"},{"location":"user-guide/gitcommit/#resource-selectors","title":"Resource Selectors","text":"<p>Select resources using labels or field selectors:</p> <pre><code>spec:\n  resourceRef:\n    apiVersion: v1\n    kind: ConfigMap\n    namespace: default\n    selector:\n      matchLabels:\n        app: myapp\n        environment: production\n    path: \"configs/\"  # Directory for multiple resources\n</code></pre>"},{"location":"user-guide/gitcommit/#cross-namespace-references","title":"Cross-Namespace References","text":"<p>Reference resources from different namespaces:</p> <pre><code>spec:\n  resourceRef:\n    apiVersion: v1\n    kind: Secret\n    name: shared-secret\n    namespace: shared-resources  # Different namespace\n    path: \"secrets/shared.yaml\"\n</code></pre>"},{"location":"user-guide/gitcommit/#file-encryption","title":"File Encryption","text":"<p>Protect sensitive files by encrypting them before committing to Git repositories using age encryption:</p>"},{"location":"user-guide/gitcommit/#basic-encryption-with-ssh-key","title":"Basic Encryption with SSH Key","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: encrypted-secrets\n  namespace: default\nspec:\n  repository: \"https://github.com/myorg/secure-configs.git\"\n  branch: \"main\"\n  authSecretRef: \"git-credentials\"\n  commitMessage: \"Add encrypted database configuration\"\n\n  encryption:\n    enabled: true\n    recipients:\n      - type: ssh\n        secretRef:\n          name: ssh-keys\n          key: id_rsa.pub\n\n  files:\n    - path: \"database/production.yaml\"\n      content: |\n        database:\n          host: prod-db.internal\n          username: app_user\n          password: super-secret-password\n          ssl_key: |\n            -----BEGIN PRIVATE KEY-----\n            MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC...\n            -----END PRIVATE KEY-----\n</code></pre>"},{"location":"user-guide/gitcommit/#multiple-recipient-types","title":"Multiple Recipient Types","text":"<p>Support for different encryption methods in a single GitCommit:</p> <pre><code>spec:\n  encryption:\n    enabled: true\n    fileExtension: \".secret\"  # Custom extension (default: .age)\n    recipients:\n      # Age public key\n      - type: age\n        secretRef:\n          name: age-keys\n          key: team-public-key\n\n      # SSH public key (from authorized_keys format)\n      - type: ssh\n        secretRef:\n          name: ssh-keys\n          key: id_rsa.pub\n\n      # Passphrase-based encryption\n      - type: passphrase\n        secretRef:\n          name: encryption-secrets\n          key: backup-passphrase\n\n      # YubiKey PIV encryption (hardware security)\n      - type: yubikey\n        secretRef:\n          name: yubikey-keys\n          key: piv-public-key\n\n  resourceRefs:\n    - apiVersion: v1\n      kind: Secret\n      name: database-credentials\n      namespace: production\n      path: \"secrets/database.yaml\"\n      # Will be encrypted as secrets/database.yaml.secret\n</code></pre>"},{"location":"user-guide/gitcommit/#encrypted-resource-references","title":"Encrypted Resource References","text":"<p>Encrypt sensitive data from Kubernetes resources:</p> <pre><code>spec:\n  encryption:\n    enabled: true\n    recipients:\n      - type: age\n        secretRef:\n          name: backup-keys\n          key: public-key\n\n  resourceRefs:\n    # Encrypt TLS certificates\n    - apiVersion: v1\n      kind: Secret\n      name: tls-cert\n      namespace: ingress-system\n      path: \"certificates/tls.yaml\"\n\n    # Encrypt database connection strings\n    - apiVersion: v1\n      kind: ConfigMap\n      name: database-config\n      namespace: app\n      path: \"config/database.yaml\"\n\n    # Encrypt API keys and tokens\n    - apiVersion: v1\n      kind: Secret\n      name: api-credentials\n      namespace: integration\n      path: \"secrets/api-keys.yaml\"\n      strategy: \"fields\"  # Extract individual fields as encrypted files\n</code></pre>"},{"location":"user-guide/gitcommit/#setting-up-encryption-secrets","title":"Setting Up Encryption Secrets","text":"<p>Create the necessary secrets for encryption:</p> <pre><code># Age key secret\napiVersion: v1\nkind: Secret\nmetadata:\n  name: age-keys\n  namespace: default\ntype: Opaque\ndata:\n  # Base64 encoded age public key\n  team-public-key: YWdlMXh4eGJ4eGJ4eGJ4eGJ4eGJ4eGJ4eGJ4eGJ4eGJ4eGJ4...\n\n---\n# SSH key secret  \napiVersion: v1\nkind: Secret\nmetadata:\n  name: ssh-keys\n  namespace: default\ntype: Opaque\ndata:\n  # Base64 encoded SSH public key\n  id_rsa.pub: c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FD...\n\n---\n# Passphrase secret\napiVersion: v1\nkind: Secret\nmetadata:\n  name: encryption-secrets\n  namespace: default\ntype: Opaque\ndata:\n  # Base64 encoded passphrase\n  backup-passphrase: bXktc2VjdXJlLXBhc3NwaHJhc2UtZm9yLWJhY2t1cHM=\n</code></pre>"},{"location":"user-guide/gitcommit/#encryption-best-practices","title":"Encryption Best Practices","text":"<p>\ud83d\udd10 Security Considerations: - Store encryption keys securely in Kubernetes Secrets - Use different keys for different environments (dev/staging/prod) - Regularly rotate encryption keys and passphrases - Consider using age keys for better security than passphrases - Validate encrypted files can be decrypted before committing</p> <p>\ud83d\udcc1 File Management: - Encrypted files use <code>.age</code> extension by default (customizable) - Original filenames are preserved with encryption extension added - Already encrypted files (<code>.age</code> extension) are not re-encrypted - Use descriptive paths to organize encrypted content</p> <p>\ud83d\udd04 GitOps Integration: - Encrypted files can be safely stored in public repositories - Use tools like SOPS or age CLI for manual decryption when needed - Consider automation for decrypting files in CI/CD pipelines - Document which files are encrypted for team awareness</p>"},{"location":"user-guide/gitcommit/#complete-encryption-examples","title":"Complete Encryption Examples","text":""},{"location":"user-guide/gitcommit/#enterprise-multi-key-encryption","title":"Enterprise Multi-Key Encryption","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: enterprise-encrypted-backup\n  namespace: security\nspec:\n  repository: \"https://github.com/enterprise/secure-backups.git\"\n  branch: \"encrypted-backups\"\n  commitMessage: \"Automated encrypted backup - {{ .Timestamp }}\"\n  authSecretRef: \"enterprise-git-credentials\"\n\n  # Multi-recipient encryption for enterprise security\n  encryption:\n    enabled: true\n    fileExtension: \".secure\"\n    recipients:\n      # Security team YubiKeys (hardware-backed)\n      - type: yubikey\n        secretRef:\n          name: security-team-yubikeys\n          key: ciso-yubikey.pub\n      - type: yubikey\n        secretRef:\n          name: security-team-yubikeys\n          key: security-officer.pub\n\n      # DevOps team SSH keys\n      - type: ssh\n        secretRef:\n          name: devops-ssh-keys\n          key: devops-team.pub\n\n      # Emergency recovery keys\n      - type: age\n        secretRef:\n          name: emergency-keys\n          key: break-glass-key\n\n      # Compliance backup passphrase\n      - type: passphrase\n        secretRef:\n          name: compliance-auth\n          key: audit-passphrase\n\n  # Comprehensive resource backup\n  resourceRefs:\n    # All production secrets\n    - apiVersion: v1\n      kind: Secret\n      name: \"*\"\n      namespace: production\n      path: \"backups/production/secrets/\"\n\n    # Certificate store\n    - apiVersion: v1\n      kind: Secret\n      name: \"*\"\n      namespace: cert-manager\n      labelSelector: \"cert-manager.io/certificate-name\"\n      path: \"backups/certificates/\"\n\n    # Database configurations\n    - apiVersion: v1\n      kind: ConfigMap\n      name: database-config\n      namespace: production\n      path: \"backups/production/config/database.yaml\"\n</code></pre>"},{"location":"user-guide/gitcommit/#hardware-security-with-yubikey","title":"Hardware Security with YubiKey","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: yubikey-secured-commit\n  namespace: security\nspec:\n  repository: \"https://github.com/enterprise/sensitive-configs.git\"\n  branch: \"main\"\n  commitMessage: \"Hardware-encrypted configuration update\"\n  authSecretRef: \"secure-git-credentials\"\n\n  # YubiKey-only encryption for maximum security\n  encryption:\n    enabled: true\n    recipients:\n      - type: yubikey\n        secretRef:\n          name: primary-yubikey\n          key: security-lead.pub\n\n  files:\n    - path: \"production/secrets/database.yaml\"\n      content: |\n        database:\n          host: \"prod-db.enterprise.com\"\n          username: \"app_production\"\n          password: \"ultra-secure-password-2024\"\n          ssl_cert: |\n            -----BEGIN CERTIFICATE-----\n            MIIBkTCB+wIJANfKvPOD7JEBMA0GCSqGSIb3DQEBBQUAMBkx...\n            -----END CERTIFICATE-----\n\n    - path: \"production/secrets/api-keys.yaml\"\n      content: |\n        api:\n          payment_gateway: \"pk_live_abcdefghijklmnop\"\n          email_service: \"key-xyz123456789\"\n          monitoring: \"token-secure-monitoring-2024\"\n</code></pre>"},{"location":"user-guide/gitcommit/#encrypted-resource-synchronization","title":"Encrypted Resource Synchronization","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: encrypted-gitops-sync\n  namespace: gitops-system\nspec:\n  repository: \"https://github.com/enterprise/gitops-encrypted.git\"\n  branch: \"sync-{{ .Date }}\"\n  commitMessage: \"Encrypted GitOps sync - {{ .Timestamp }}\"\n  authSecretRef: \"gitops-credentials\"\n\n  encryption:\n    enabled: true\n    recipients:\n      # Primary encryption: Hardware keys\n      - type: yubikey\n        secretRef:\n          name: gitops-yubikey\n          key: gitops-lead.pub\n\n      # Secondary: Team SSH keys\n      - type: ssh\n        secretRef:\n          name: gitops-team\n          key: team-key.pub\n\n      # Emergency: Age keys\n      - type: age\n        secretRef:\n          name: emergency-recovery\n          key: disaster-recovery.pub\n\n  # Synchronize multiple resource types\n  resourceRefs:\n    # Application secrets across environments\n    - apiVersion: v1\n      kind: Secret\n      name: app-secrets\n      namespace: production\n      path: \"encrypted-state/production/app-secrets.yaml\"\n\n    - apiVersion: v1\n      kind: Secret\n      name: app-secrets\n      namespace: staging\n      path: \"encrypted-state/staging/app-secrets.yaml\"\n\n    # Infrastructure secrets\n    - apiVersion: v1\n      kind: Secret\n      name: infrastructure-keys\n      namespace: kube-system\n      path: \"encrypted-state/infrastructure/keys.yaml\"\n\n    # Monitoring configurations with sensitive data\n    - apiVersion: v1\n      kind: ConfigMap\n      name: monitoring-config\n      namespace: monitoring\n      path: \"encrypted-state/monitoring/config.yaml\"\n</code></pre>"},{"location":"user-guide/gitcommit/#setting-up-all-encryption-types","title":"Setting Up All Encryption Types","text":"<pre><code># 1. SSH Keys\nkubectl create secret generic devops-ssh-keys \\\n  --from-file=devops-team.pub=~/.ssh/team_rsa.pub \\\n  --namespace=security\n\n# 2. YubiKey Setup\n# Extract YubiKey PIV public key\nykman piv keys export 9a yubikey.pem\nssh-keygen -i -m PKCS8 -f yubikey.pem &gt; yubikey.pub\nkubectl create secret generic security-team-yubikeys \\\n  --from-file=ciso-yubikey.pub=yubikey.pub \\\n  --namespace=security\n\n# 3. Age Keys\nage-keygen -o emergency.key\ngrep 'public key:' emergency.key | cut -d: -f2 | tr -d ' ' &gt; emergency.pub\nkubectl create secret generic emergency-keys \\\n  --from-file=break-glass-key=emergency.pub \\\n  --namespace=security\n\n# 4. Passphrases\nkubectl create secret generic compliance-auth \\\n  --from-literal=audit-passphrase=\"enterprise-compliance-key-2024\" \\\n  --namespace=security\n</code></pre>"},{"location":"user-guide/gitcommit/#templating","title":"Templating","text":""},{"location":"user-guide/gitcommit/#template-functions","title":"Template Functions","text":"<p>Available template functions in GitCommit resources:</p> <pre><code>template: |\n  # String functions\n  name: {{ .metadata.name | upper }}\n  namespace: {{ .metadata.namespace | lower }}\n\n  # Date functions\n  updated: {{ .timestamp | date \"2006-01-02 15:04:05\" }}\n\n  # Encoding functions\n  secret: {{ .data.password | b64decode }}\n  encoded: {{ \"plain text\" | b64encode }}\n\n  # Conditional logic\n  {{ if .metadata.labels }}\n  labels:\n  {{ range $key, $value := .metadata.labels }}\n    {{ $key }}: {{ $value }}\n  {{ end }}\n  {{ end }}\n\n  # Math functions\n  scaled_replicas: {{ .spec.replicas | add 1 }}\n\n  # Custom functions\n  cluster: {{ cluster_name }}\n  git_commit: {{ git_commit_sha }}\n</code></pre>"},{"location":"user-guide/gitcommit/#template-variables","title":"Template Variables","text":"<p>Available variables in templates:</p> Variable Description Example <code>.metadata</code> Resource metadata <code>.metadata.name</code>, <code>.metadata.namespace</code> <code>.spec</code> Resource specification <code>.spec.replicas</code>, <code>.spec.template</code> <code>.status</code> Resource status <code>.status.phase</code>, <code>.status.conditions</code> <code>.data</code> ConfigMap/Secret data <code>.data.config</code>, <code>.data.token</code> <code>.timestamp</code> Current timestamp <code>2024-01-15T10:30:00Z</code> <code>.cluster</code> Cluster information <code>.cluster.name</code>, <code>.cluster.version</code>"},{"location":"user-guide/gitcommit/#complex-templates","title":"Complex Templates","text":"<pre><code>template: |\n  # Multi-resource configuration template\n  apiVersion: v1\n  kind: ConfigMap\n  metadata:\n    name: generated-config\n    namespace: {{ .metadata.namespace }}\n    labels:\n      generated-by: git-change-operator\n      source-resource: {{ .metadata.name }}\n      timestamp: \"{{ .timestamp | date \"20060102-150405\" }}\"\n  data:\n    config.yaml: |\n  {{ range $key, $value := .data }}\n    {{ $key }}: {{ $value | quote }}\n  {{ end }}\n\n    metadata.json: |\n      {\n        \"source\": {\n          \"name\": \"{{ .metadata.name }}\",\n          \"namespace\": \"{{ .metadata.namespace }}\",\n          \"resourceVersion\": \"{{ .metadata.resourceVersion }}\"\n        },\n        \"generated\": {\n          \"timestamp\": \"{{ .timestamp }}\",\n          \"cluster\": \"{{ cluster_name }}\",\n          \"operator\": \"git-change-operator\"\n        }\n      }\n</code></pre>"},{"location":"user-guide/gitcommit/#lifecycle-management","title":"Lifecycle Management","text":""},{"location":"user-guide/gitcommit/#reconciliation","title":"Reconciliation","text":"<p>Control when and how GitCommit resources are reconciled:</p> <pre><code>spec:\n  # Reconcile every 5 minutes\n  reconcileInterval: \"300s\"\n\n  # Suspend reconciliation\n  suspend: true\n\n  # One-time execution\n  schedule: \"once\"\n\n  # Cron-based execution\n  schedule: \"0 */6 * * *\"  # Every 6 hours\n</code></pre>"},{"location":"user-guide/gitcommit/#conditions-and-status","title":"Conditions and Status","text":"<p>Monitor GitCommit resource status:</p> <pre><code># Check GitCommit status\nkubectl get gitcommit mycommit -o yaml\n\n# Example status\nstatus:\n  phase: \"Completed\"  # Pending, Running, Completed, Failed\n  conditions:\n  - type: \"Ready\"\n    status: \"True\"\n    lastTransitionTime: \"2024-01-15T10:30:00Z\"\n    reason: \"CommitSuccessful\"\n    message: \"Successfully committed to repository\"\n  lastCommitSHA: \"abc123def456\"\n  lastCommitTime: \"2024-01-15T10:30:00Z\"\n  observedGeneration: 1\n</code></pre>"},{"location":"user-guide/gitcommit/#events","title":"Events","text":"<p>Monitor GitCommit events:</p> <pre><code># View events\nkubectl describe gitcommit mycommit\n\n# Example events\nEvents:\n  Type    Reason           Age   From                     Message\n  ----    ------           ----  ----                     -------\n  Normal  CommitStarted    5m    gitcommit-controller     Starting Git commit operation\n  Normal  ResourceFetched  5m    gitcommit-controller     Successfully fetched resource data\n  Normal  FileWritten      5m    gitcommit-controller     File written to repository\n  Normal  CommitCreated    5m    gitcommit-controller     Commit created: abc123def456\n</code></pre>"},{"location":"user-guide/gitcommit/#error-handling","title":"Error Handling","text":""},{"location":"user-guide/gitcommit/#common-errors-and-solutions","title":"Common Errors and Solutions","text":""},{"location":"user-guide/gitcommit/#authentication-failures","title":"Authentication Failures","text":"<pre><code># Error: Authentication failed\nstatus:\n  phase: \"Failed\"\n  conditions:\n  - type: \"Ready\"\n    status: \"False\"\n    reason: \"AuthenticationFailed\"\n    message: \"Invalid credentials for repository\"\n\n# Solution: Check credentials secret\nkubectl get secret git-credentials -o yaml\n</code></pre>"},{"location":"user-guide/gitcommit/#resource-not-found","title":"Resource Not Found","text":"<pre><code># Error: Resource reference not found\nstatus:\n  phase: \"Failed\"\n  conditions:\n  - type: \"Ready\"\n    status: \"False\"\n    reason: \"ResourceNotFound\"\n    message: \"ConfigMap 'missing-config' not found in namespace 'default'\"\n\n# Solution: Verify resource exists\nkubectl get configmap missing-config\n</code></pre>"},{"location":"user-guide/gitcommit/#invalid-git-repository","title":"Invalid Git Repository","text":"<pre><code># Error: Invalid repository URL\nstatus:\n  phase: \"Failed\" \n  conditions:\n  - type: \"Ready\"\n    status: \"False\"\n    reason: \"RepositoryError\"\n    message: \"Repository not found or access denied\"\n\n# Solution: Verify repository URL and access\ngit clone https://github.com/myorg/config-repo.git\n</code></pre>"},{"location":"user-guide/gitcommit/#retry-configuration","title":"Retry Configuration","text":"<p>Configure retry behavior for failed operations:</p> <pre><code>spec:\n  retryPolicy:\n    maxRetries: 5\n    backoff: \"30s\"\n    maxBackoff: \"300s\"\n    backoffMultiplier: 2.0\n    retryableErrors:\n      - \"AuthenticationFailed\"\n      - \"NetworkError\"  \n      - \"TemporaryFailure\"\n</code></pre>"},{"location":"user-guide/gitcommit/#security-considerations","title":"Security Considerations","text":""},{"location":"user-guide/gitcommit/#rbac-permissions","title":"RBAC Permissions","text":"<p>GitCommit resources require appropriate RBAC permissions:</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: gitcommit-reader\nrules:\n# Permission to manage GitCommit resources\n- apiGroups: [\"gco.galos.one\"]\n  resources: [\"gitcommits\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n\n# Permission to read referenced resources\n- apiGroups: [\"\"]\n  resources: [\"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n</code></pre>"},{"location":"user-guide/gitcommit/#credential-management","title":"Credential Management","text":"<p>Best practices for credential management:</p> <pre><code># Use separate secrets for different repositories\napiVersion: v1\nkind: Secret\nmetadata:\n  name: production-repo-creds\n  namespace: production\ntype: Opaque\ndata:\n  username: cHJvZC11c2Vy\n  token: Z2hwX3Rva2VuX2hlcmU=\n\n---\n# Reference in GitCommit\napiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: prod-commit\n  namespace: production\nspec:\n  credentials:\n    secretName: production-repo-creds\n</code></pre>"},{"location":"user-guide/gitcommit/#sensitive-data-handling","title":"Sensitive Data Handling","text":"<p>Prevent sensitive data from being committed:</p> <pre><code>spec:\n  resourceRef:\n    apiVersion: v1\n    kind: Secret\n    name: app-secrets\n    path: \"secrets/app.yaml\"\n    strategy: \"template\"\n    template: |\n      # Redacted secrets configuration\n      {{ range $key, $value := .data }}\n      {{ $key }}: \"[REDACTED-{{ $value | len }}-bytes]\"\n      {{ end }}\n</code></pre>"},{"location":"user-guide/gitcommit/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"user-guide/gitcommit/#metrics","title":"Metrics","text":"<p>Monitor GitCommit operations with Prometheus metrics:</p> <pre><code># Total GitCommit operations\ngit_change_operator_gitcommit_operations_total\n\n# Operation duration\ngit_change_operator_gitcommit_duration_seconds\n\n# Success rate\nrate(git_change_operator_gitcommit_operations_total{status=\"success\"}[5m])\n</code></pre>"},{"location":"user-guide/gitcommit/#logging","title":"Logging","text":"<p>Configure structured logging for debugging:</p> <pre><code># Enable debug logging for GitCommit controller\nenv:\n- name: LOG_LEVEL\n  value: \"debug\"\n- name: LOG_FORMAT\n  value: \"json\"\n</code></pre> <p>Example log output: <pre><code>{\n  \"level\": \"info\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"logger\": \"gitcommit-controller\",\n  \"message\": \"Successfully created commit\",\n  \"gitcommit\": \"default/mycommit\",\n  \"repository\": \"https://github.com/myorg/repo.git\",\n  \"commitSHA\": \"abc123def456\",\n  \"duration\": \"2.3s\"\n}\n</code></pre></p>"},{"location":"user-guide/gitcommit/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/gitcommit/#batching-operations","title":"Batching Operations","text":"<p>Group multiple resource changes into single commits:</p> <pre><code>spec:\n  # Wait for multiple changes before committing\n  batchInterval: \"60s\"\n  batchSize: 10\n\n  resourceRefs:\n    - apiVersion: v1\n      kind: ConfigMap\n      namespace: default\n      selector:\n        matchLabels:\n          batch-group: \"app-configs\"\n</code></pre>"},{"location":"user-guide/gitcommit/#resource-caching","title":"Resource Caching","text":"<p>Enable caching for frequently accessed resources:</p> <pre><code>spec:\n  cache:\n    enabled: true\n    ttl: \"300s\"\n    maxSize: 100\n\n  resourceRef:\n    # Cached resource reference\n    apiVersion: v1\n    kind: ConfigMap\n    name: frequently-updated-config\n</code></pre>"},{"location":"user-guide/gitcommit/#use-cases-and-patterns","title":"Use Cases and Patterns","text":""},{"location":"user-guide/gitcommit/#configuration-backup","title":"Configuration Backup","text":"<p>Automatically backup all ConfigMaps:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: config-backup\nspec:\n  repository: \"https://github.com/myorg/k8s-backups.git\"\n  branch: \"main\"\n  message: \"Daily configuration backup - {{ .timestamp | date \"2006-01-02\" }}\"\n  schedule: \"0 2 * * *\"  # Daily at 2 AM\n\n  resourceRef:\n    apiVersion: v1\n    kind: ConfigMap\n    namespace: \"*\"  # All namespaces\n    selector:\n      matchLabels:\n        backup: \"enabled\"\n    path: \"configs/{{ .metadata.namespace }}/{{ .metadata.name }}.yaml\"\n</code></pre>"},{"location":"user-guide/gitcommit/#application-deployment-tracking","title":"Application Deployment Tracking","text":"<p>Track deployment changes:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: deployment-tracker\nspec:\n  repository: \"https://github.com/myorg/deployment-history.git\"\n  branch: \"deployments\"\n  message: \"Deployment update: {{ .metadata.name }} to {{ (index .spec.template.spec.containers 0).image }}\"\n\n  resourceRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: myapp\n    namespace: production\n    path: \"deployments/{{ .timestamp | date \"2006/01/02\" }}/{{ .metadata.name }}.yaml\"\n    strategy: \"template\"\n    template: |\n      deployment: {{ .metadata.name }}\n      namespace: {{ .metadata.namespace }}\n      replicas: {{ .spec.replicas }}\n      image: {{ (index .spec.template.spec.containers 0).image }}\n      timestamp: {{ .timestamp }}\n      resourceVersion: {{ .metadata.resourceVersion }}\n</code></pre>"},{"location":"user-guide/gitcommit/#multi-environment-sync","title":"Multi-Environment Sync","text":"<p>Sync configurations across environments:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: cross-env-sync\nspec:\n  repository: \"https://github.com/myorg/multi-env-configs.git\"\n  branch: \"sync/{{ .cluster.name }}\"\n  message: \"Sync {{ .metadata.name }} from {{ .cluster.name }}\"\n\n  resourceRef:\n    apiVersion: v1\n    kind: ConfigMap\n    name: shared-config\n    namespace: default\n    path: \"environments/{{ .cluster.name }}/config.yaml\"\n</code></pre>"},{"location":"user-guide/gitcommit/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/gitcommit/#resource-organization","title":"Resource Organization","text":"<ol> <li>Use meaningful names for GitCommit resources</li> <li>Group related resources using labels and selectors</li> <li>Organize files in logical directory structures</li> <li>Use consistent naming conventions</li> </ol>"},{"location":"user-guide/gitcommit/#template-design","title":"Template Design","text":"<ol> <li>Keep templates simple and readable</li> <li>Handle missing data gracefully</li> <li>Use comments to document template logic</li> <li>Test templates thoroughly</li> </ol>"},{"location":"user-guide/gitcommit/#performance","title":"Performance","text":"<ol> <li>Set appropriate reconcile intervals based on change frequency</li> <li>Use resource selectors to limit scope</li> <li>Enable caching for frequently accessed resources</li> <li>Monitor resource usage and adjust limits</li> </ol>"},{"location":"user-guide/gitcommit/#security","title":"Security","text":"<ol> <li>Use least-privilege RBAC permissions</li> <li>Store credentials securely in secrets</li> <li>Audit Git operations regularly</li> <li>Avoid committing sensitive data</li> </ol>"},{"location":"user-guide/gitcommit/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/gitcommit/#debug-gitcommit-issues","title":"Debug GitCommit Issues","text":"<pre><code># Check GitCommit status\nkubectl get gitcommit -o wide\n\n# Describe resource for events\nkubectl describe gitcommit mycommit\n\n# Check controller logs\nkubectl logs -n git-change-operator-system -l control-plane=controller-manager\n\n# Validate RBAC permissions\nkubectl auth can-i get configmaps --as=system:serviceaccount:git-change-operator-system:git-change-operator-controller-manager\n</code></pre>"},{"location":"user-guide/gitcommit/#test-templates","title":"Test Templates","text":"<p>Test templates before applying:</p> <pre><code># Use a temporary GitCommit with dry-run\nkubectl apply --dry-run=server -f test-gitcommit.yaml\n\n# Validate template syntax\ngit-change-operator validate-template --template-file=template.txt --resource-file=resource.yaml\n</code></pre>"},{"location":"user-guide/gitcommit/#next-steps","title":"Next Steps","text":"<ul> <li>PullRequest Resources - Learn about automated PR creation</li> <li>Resource References - Deep dive into resource extraction</li> <li>Authentication - Configure secure Git access</li> <li>Examples - See real-world examples</li> </ul> <p>For advanced GitCommit patterns, see our Advanced Examples.</p>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>This guide covers the installation and initial setup of the Git Change Operator in your Kubernetes cluster.</p>"},{"location":"user-guide/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing the Git Change Operator, ensure you have:</p> <ul> <li>Kubernetes cluster (v1.20+)</li> <li>kubectl configured to access your cluster</li> <li>Cluster admin permissions (for CRD installation)</li> <li>Git repository with write access</li> <li>GitHub personal access token (for PullRequest resources)</li> </ul>"},{"location":"user-guide/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"user-guide/installation/#helm-installation-from-upstream-recommended","title":"Helm Installation from upstream (Recommended)","text":"<p>The easiest way to install the Git Change Operator is using Helm:</p> <pre><code># Add the Helm repository\nhelm repo add git-change-operator https://raw.githubusercontent.com/mihaigalos/git-change-operator/helm-chart/\nhelm repo update\n\n# Install the operator\nhelm install git-change-operator git-change-operator/git-change-operator \\\n  --namespace git-change-operator-system \\\n  --create-namespace\n</code></pre>"},{"location":"user-guide/installation/#helm-installation-from-the-operator-container","title":"Helm installation from the operator container","text":"<p>The git-change-operator Docker image includes the Helm chart for easy deployment without needing to clone the repository.</p> <pre><code># Extract the chart from the image\ndocker create --name temp-container ghcr.io/mihaigalos/git-change-operator:latest\ndocker cp temp-container:/helm/git-change-operator ./chart\ndocker rm temp-container\n\n# Use the extracted chart with Helm\nhelm install git-change-operator ./chart --namespace git-change-operator-system --create-namespace\n</code></pre> <p>The Helm chart is located at <code>/helm/git-change-operator</code> in the Docker image.</p>"},{"location":"user-guide/installation/#kubectl-installation","title":"kubectl Installation","text":"<p>You can install directly using kubectl:</p> <pre><code># Install CRDs and RBAC\nkubectl apply -k https://github.com/mihaigalos/git-change-operator/config\n\n# Or clone and install locally\ngit clone https://github.com/mihaigalos/git-change-operator.git\ncd git-change-operator\nmake install\n</code></pre>"},{"location":"user-guide/installation/#development-installation","title":"Development Installation","text":"<p>For development and testing:</p> <pre><code># Clone the repository\ngit clone https://github.com/mihaigalos/git-change-operator.git\ncd git-change-operator\n\n# Install CRDs\nmake install\n\n# Run locally (outside cluster)\nmake run\n</code></pre>"},{"location":"user-guide/installation/#configuration","title":"Configuration","text":""},{"location":"user-guide/installation/#authentication-setup","title":"Authentication Setup","text":"<p>Create a Kubernetes secret containing your git credentials:</p> <pre><code>kubectl create secret generic git-credentials \\\n  --namespace=git-change-operator-system \\\n  --from-literal=username=your-github-username \\\n  --from-literal=token=ghp_your_personal_access_token\n</code></pre> <p>For GitHub personal access tokens, you need the following scopes: - <code>repo</code> (full repository access) - <code>write:packages</code> (if using GitHub Container Registry)</p>"},{"location":"user-guide/installation/#operator-configuration","title":"Operator Configuration","text":"<p>The operator can be configured through Helm values or environment variables:</p> <pre><code># values.yaml for Helm\noperator:\n  image:\n    repository: git-change-operator\n    tag: latest\n\n  resources:\n    limits:\n      cpu: 200m\n      memory: 256Mi\n    requests:\n      cpu: 100m\n      memory: 128Mi\n\n  # Leader election (for multiple replicas)\n  leaderElection:\n    enabled: true\n</code></pre>"},{"location":"user-guide/installation/#verification","title":"Verification","text":""},{"location":"user-guide/installation/#check-installation","title":"Check Installation","text":"<p>Verify the operator is running:</p> <pre><code># Check operator deployment\nkubectl get deployment git-change-operator-controller-manager \\\n  -n git-change-operator-system\n\n# Check CRDs are installed\nkubectl get crd | grep gco.galos.one\n\n# Expected output:\n# gitcommits.gco.galos.one\n# pullrequests.gco.galos.one\n</code></pre>"},{"location":"user-guide/installation/#test-basic-functionality","title":"Test Basic Functionality","text":"<p>Create a simple GitCommit resource to test:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: test-commit\n  namespace: default\nspec:\n  repository: https://github.com/your-username/your-repo.git\n  branch: main\n  commitMessage: \"Test commit from Git Change Operator\"\n  authSecretRef: git-credentials\n  files:\n    - path: test-file.txt\n      content: |\n        This is a test file created by the Git Change Operator.\n        Installation successful!\n</code></pre> <p>Apply and check:</p> <pre><code>kubectl apply -f test-gitcommit.yaml\nkubectl get gitcommits test-commit -o yaml\n</code></pre>"},{"location":"user-guide/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/installation/#common-issues","title":"Common Issues","text":"<p>CRDs not installed: <pre><code># Manually install CRDs\nkubectl apply -f config/crd/bases/\n</code></pre></p> <p>Permission denied errors: <pre><code># Check RBAC permissions\nkubectl auth can-i create gitcommits --as=system:serviceaccount:git-change-operator-system:git-change-operator-controller-manager\n</code></pre></p> <p>Git authentication failures: <pre><code># Verify secret exists and has correct format\nkubectl get secret git-credentials -o yaml\nkubectl describe secret git-credentials\n</code></pre></p>"},{"location":"user-guide/installation/#logs-and-debugging","title":"Logs and Debugging","text":"<p>Check operator logs:</p> <pre><code># Get operator logs\nkubectl logs deployment/git-change-operator-controller-manager \\\n  -n git-change-operator-system\n\n# Follow logs in real-time\nkubectl logs -f deployment/git-change-operator-controller-manager \\\n  -n git-change-operator-system\n</code></pre>"},{"location":"user-guide/installation/#uninstallation","title":"Uninstallation","text":"<p>To completely remove the operator:</p> <pre><code># Using Helm\nhelm uninstall git-change-operator -n git-change-operator-system\n\n# Using kubectl\nkubectl delete -k config/\n\n# Remove namespace\nkubectl delete namespace git-change-operator-system\n</code></pre>"},{"location":"user-guide/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure authentication for your git repositories</li> <li>Create your first GitCommit resource</li> <li>Set up PullRequest automation</li> <li>Explore advanced features</li> </ol>"},{"location":"user-guide/installation/#support","title":"Support","text":"<p>If you encounter issues:</p> <ul> <li>Check the troubleshooting guide</li> <li>Review GitHub Issues</li> <li>Join GitHub Discussions</li> </ul>"},{"location":"user-guide/kind-demo/","title":"Kind Full Demo","text":"<p>This guide provides a complete end-to-end demonstration of the Git Change Operator using a local Kind (Kubernetes in Docker) cluster. This is the fastest way to see the operator in action and understand its capabilities.</p>"},{"location":"user-guide/kind-demo/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li>Docker installed and running</li> <li>Kind installed</li> <li>Helm installed</li> <li>A GitHub personal access token with repository permissions</li> <li>The git-change-operator source code cloned locally</li> </ul>"},{"location":"user-guide/kind-demo/#corporate-environment-support","title":"Corporate Environment Support","text":"<p>If you're behind a corporate proxy or firewall, the demo includes built-in support for corporate CA certificates. Place your corporate CA certificate at <code>~/certs/zscaler.pem</code> (or adjust the path in <code>kind-config.yaml</code>).</p>"},{"location":"user-guide/kind-demo/#one-command-demo","title":"One-Command Demo","text":"<p>The simplest way to run the complete demo is with our comprehensive Makefile target:</p> <pre><code>make kind-full-demo\n</code></pre> <p>This single command will: 1. Create a Kind cluster with proper configuration 2. Build and load the operator Docker image 3. Deploy the operator using Helm 4. Create a test GitCommit resource 5. Verify the commit was created on GitHub</p>"},{"location":"user-guide/kind-demo/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":"<p>If you want to understand each step or run them individually, here's what the full demo does:</p>"},{"location":"user-guide/kind-demo/#1-create-kind-cluster","title":"1. Create Kind Cluster","text":"<pre><code>make kind-create\n</code></pre> <p>This creates a Kind cluster with: - Corporate proxy/CA certificate support - Proper networking configuration - Extended timeouts for corporate environments</p>"},{"location":"user-guide/kind-demo/#2-build-and-deploy-operator","title":"2. Build and Deploy Operator","text":"<pre><code>make kind-deploy\n</code></pre> <p>This will: - Build the operator Docker image with version tags - Load the image into the Kind cluster - Install/upgrade the Helm chart with conditional CRD installation - Verify all pods are running</p>"},{"location":"user-guide/kind-demo/#3-test-the-operator","title":"3. Test the Operator","text":"<p>The demo creates a sample GitCommit resource that will: - Create a real commit on GitHub - Demonstrate the operator's core functionality - Show the reconciliation process in action</p>"},{"location":"user-guide/kind-demo/#4-verify-results","title":"4. Verify Results","text":"<p>You can verify the demo worked by:</p> <pre><code># Check operator logs\nkubectl logs -n git-change-operator-system deployment/git-change-operator-controller-manager\n\n# Check GitCommit resource status\nkubectl get gitcommits -o yaml\n\n# Verify the commit exists on GitHub (check the output for the commit URL)\n</code></pre>"},{"location":"user-guide/kind-demo/#expected-output","title":"Expected Output","text":"<p>When successful, you should see: - Kind cluster created and ready - Operator pods running in <code>git-change-operator-system</code> namespace - GitCommit resource created and processed - Real commit created on your GitHub repository - Commit SHA and URL displayed in the resource status</p>"},{"location":"user-guide/kind-demo/#configuration","title":"Configuration","text":"<p>The demo uses these key files: - <code>kind-config.yaml</code> - Kind cluster configuration with corporate support - <code>corporate-config.env</code> - Environment variables for corporate proxy - <code>Makefile</code> - Automation workflow with hidden helper targets</p>"},{"location":"user-guide/kind-demo/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/kind-demo/#common-issues","title":"Common Issues","text":"<p>Docker image not found: <pre><code># Verify image was built and loaded\ndocker images | grep git-change-operator\nkind get clusters\n</code></pre></p> <p>Operator pods not starting: <pre><code># Check pod status and logs\nkubectl get pods -n git-change-operator-system\nkubectl describe pods -n git-change-operator-system\n</code></pre></p> <p>GitHub authentication issues: <pre><code># Verify your GitHub token has proper permissions\n# Check the secret was created correctly\nkubectl get secrets -n git-change-operator-system\n</code></pre></p> <p>Corporate proxy issues: - Ensure <code>~/certs/zscaler.pem</code> exists and contains your CA certificate - Check <code>corporate-config.env</code> has correct proxy settings - Verify Docker can pull images through your proxy</p>"},{"location":"user-guide/kind-demo/#clean-up","title":"Clean Up","text":"<p>To remove the demo environment:</p> <pre><code>make kind-destroy\n</code></pre> <p>This removes the Kind cluster and cleans up all resources.</p>"},{"location":"user-guide/kind-demo/#next-steps","title":"Next Steps","text":"<p>After running the demo successfully: 1. Explore the Configuration guide for production setup 2. Learn about advanced features in the Quick Start guide 3. Check the Installation guide for production deployment options</p> <p>The Kind demo provides a safe, local environment to experiment with the Git Change Operator before deploying it to production clusters.</p>"},{"location":"user-guide/pullrequest/","title":"PullRequest Resources","text":"<p>The <code>PullRequest</code> resource automates the creation and management of pull requests based on Kubernetes cluster data. This guide covers everything you need to know about using PullRequest resources for GitOps workflows and automated change management.</p>"},{"location":"user-guide/pullrequest/#overview","title":"Overview","text":"<p>PullRequest resources enable you to: - Automatically create pull requests when cluster resources change - Implement change approval workflows through Git-based review processes - Sync cluster state to Git repositories with proper change tracking - Integrate with CI/CD pipelines triggered by pull request events</p>"},{"location":"user-guide/pullrequest/#basic-pullrequest-resource","title":"Basic PullRequest Resource","text":""},{"location":"user-guide/pullrequest/#minimal-example","title":"Minimal Example","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: simple-pr\n  namespace: default\nspec:\n  repository: \"https://github.com/myorg/config-repo.git\"\n  baseBranch: \"main\"\n  headBranch: \"automated-update\"\n  title: \"Automated configuration update\"\n  body: \"This PR contains automated updates from the Kubernetes cluster\"\n  resourceRef:\n    apiVersion: v1\n    kind: ConfigMap\n    name: app-config\n    namespace: default\n    path: \"config/app.yaml\"\n</code></pre> <p>This creates a pull request with the contents of the <code>app-config</code> ConfigMap.</p>"},{"location":"user-guide/pullrequest/#complete-example","title":"Complete Example","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: comprehensive-pr\n  namespace: default\n  labels:\n    app: myapp\n    automation: enabled\nspec:\n  # Repository configuration\n  repository: \"https://github.com/myorg/config-repo.git\"\n  baseBranch: \"main\"\n  headBranch: \"config-update-{{ .timestamp | date \"20060102-150405\" }}\"\n\n  # PR metadata\n  title: \"\ud83e\udd16 Automated configuration update from {{ .cluster.name }}\"\n  body: |\n    # Automated Configuration Update\n\n    This pull request contains automated configuration updates from the Kubernetes cluster `{{ .cluster.name }}`.\n\n    ## Changes Summary\n    - **Resource**: {{ .resourceRef.kind }}/{{ .resourceRef.name }}\n    - **Namespace**: {{ .resourceRef.namespace }}\n    - **Updated**: {{ .timestamp | date \"2006-01-02 15:04:05 UTC\" }}\n\n    ## Resource Details\n    ```yaml\n    {{ .resourceContent | indent 4 }}\n    ```\n\n    ## Validation Checklist\n    - [ ] Configuration syntax is valid\n    - [ ] No sensitive data is exposed\n    - [ ] Changes are backwards compatible\n    - [ ] All required fields are present\n\n    ## Approval Required\n    This PR requires approval from the configuration management team before merging.\n\n    ---\n    *Generated by git-change-operator on {{ .timestamp }}*\n\n  # Labels and metadata  \n  labels:\n    - \"automated\"\n    - \"configuration\"\n    - \"cluster-sync\"\n    - \"{{ .cluster.environment }}\"\n\n  # Review assignments\n  assignees:\n    - \"config-team\"\n    - \"{{ .resourceRef.owner | default \"devops-team\" }}\"\n  reviewers:\n    - \"senior-engineers\"\n  teamReviewers:\n    - \"platform-team\"\n\n  # PR options\n  draft: false\n  maintainerCanModify: true\n\n  # Authentication\n  credentials:\n    secretName: github-token\n    tokenKey: token\n\n  # Resource reference (same options as GitCommit)\n  resourceRef:\n    apiVersion: v1\n    kind: ConfigMap\n    name: app-config\n    namespace: default\n    path: \"applications/myapp/config.yaml\"\n    strategy: \"template\"\n    template: |\n      # Application Configuration\n      # Source: {{ .metadata.namespace }}/{{ .metadata.name }}\n      # Generated: {{ .timestamp }}\n\n      apiVersion: v1\n      kind: ConfigMap\n      metadata:\n        name: {{ .metadata.name }}\n        namespace: {{ .metadata.namespace }}\n        labels:\n      {{ range $key, $value := .metadata.labels }}\n          {{ $key }}: {{ $value }}\n      {{ end }}\n        annotations:\n          generated-by: git-change-operator\n          source-cluster: {{ .cluster.name }}\n          sync-timestamp: \"{{ .timestamp }}\"\n      data:\n      {{ range $key, $value := .data }}\n        {{ $key }}: |\n      {{ $value | indent 4 }}\n      {{ end }}\n\n  # Write configuration\n  writeMode: \"overwrite\"\n  fileMode: \"0644\"\n  createDirs: true\n\n  # Reconciliation settings\n  reconcileInterval: \"300s\"\n  suspend: false\n\n  # Auto-merge settings (optional)\n  autoMerge:\n    enabled: false\n    strategy: \"squash\"  # merge, squash, rebase\n    conditions:\n      - allChecksPass: true\n      - reviewApproved: true\n      - upToDate: true\n</code></pre>"},{"location":"user-guide/pullrequest/#pull-request-lifecycle","title":"Pull Request Lifecycle","text":""},{"location":"user-guide/pullrequest/#creation-process","title":"Creation Process","text":"<ol> <li>Resource Change Detection - Operator detects changes to referenced resources</li> <li>Branch Creation - Creates or updates the head branch with new content</li> <li>PR Creation - Creates pull request if it doesn't exist</li> <li>PR Update - Updates existing PR with new content if needed</li> <li>Status Tracking - Monitors PR status and reports back to Kubernetes</li> </ol>"},{"location":"user-guide/pullrequest/#branch-management","title":"Branch Management","text":"<p>PullRequest resources can manage branches automatically:</p> <pre><code>spec:\n  # Dynamic branch naming\n  headBranch: \"auto-update/{{ .resourceRef.name }}/{{ .timestamp | date \"20060102\" }}\"\n\n  # Branch creation options\n  branchOptions:\n    createFromBase: true     # Create branch from base branch\n    updateIfExists: true     # Update existing branch\n    deleteAfterMerge: true   # Auto-delete branch after PR merge\n    protectBranch: false     # Don't add branch protection\n</code></pre>"},{"location":"user-guide/pullrequest/#status-management","title":"Status Management","text":"<p>Monitor PullRequest resource status:</p> <pre><code># Check PullRequest status\nkubectl get pullrequest mypr -o yaml\n\n# Example status\nstatus:\n  phase: \"Open\"  # Pending, Open, Merged, Closed, Failed\n  prNumber: 123\n  prURL: \"https://github.com/myorg/config-repo/pull/123\"\n  headSHA: \"abc123def456\"\n  baseSHA: \"def456abc123\"\n  conditions:\n  - type: \"Ready\"\n    status: \"True\"\n    lastTransitionTime: \"2024-01-15T10:30:00Z\"\n    reason: \"PRCreated\"\n    message: \"Pull request created successfully\"\n  - type: \"ReviewsApproved\"\n    status: \"False\"\n    reason: \"PendingReview\"\n    message: \"Waiting for required reviews\"\n  lastUpdateTime: \"2024-01-15T10:30:00Z\"\n  observedGeneration: 1\n</code></pre>"},{"location":"user-guide/pullrequest/#authentication-and-permissions","title":"Authentication and Permissions","text":""},{"location":"user-guide/pullrequest/#github-token-authentication","title":"GitHub Token Authentication","text":"<pre><code># GitHub personal access token\napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-token\n  namespace: default\ntype: Opaque\ndata:\n  token: Z2hwX3Rva2VuX2hlcmU=  # base64 encoded GitHub token\n\n---\n# PullRequest using GitHub token\napiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: github-pr\nspec:\n  repository: \"https://github.com/myorg/repo.git\"\n  credentials:\n    secretName: github-token\n    tokenKey: token\n</code></pre>"},{"location":"user-guide/pullrequest/#required-github-token-permissions","title":"Required GitHub Token Permissions","text":"<p>For public repositories: - <code>public_repo</code> - Access to public repositories - <code>workflow</code> - Update GitHub Actions workflows (if needed)</p> <p>For private repositories: - <code>repo</code> - Full repository access - <code>workflow</code> - Update GitHub Actions workflows (if needed)</p>"},{"location":"user-guide/pullrequest/#gitlab-token-authentication","title":"GitLab Token Authentication","text":"<pre><code># GitLab access token\napiVersion: v1\nkind: Secret\nmetadata:\n  name: gitlab-token\n  namespace: default\ntype: Opaque\ndata:\n  token: Z2xwYXRfdG9rZW5faGVyZQ==  # base64 encoded GitLab token\n\n---\n# PullRequest for GitLab (merge request)\napiVersion: gco.galos.one/v1\nkind: PullRequest  \nmetadata:\n  name: gitlab-mr\nspec:\n  repository: \"https://gitlab.com/myorg/repo.git\"\n  provider: \"gitlab\"  # Specify GitLab provider\n  credentials:\n    secretName: gitlab-token\n    tokenKey: token\n</code></pre>"},{"location":"user-guide/pullrequest/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/pullrequest/#multiple-resource-references","title":"Multiple Resource References","text":"<p>Include multiple resources in a single PR:</p> <pre><code>spec:\n  resourceRefs:  # Note: plural form\n    - apiVersion: v1\n      kind: ConfigMap\n      name: app-config\n      namespace: default\n      path: \"config/app.yaml\"\n    - apiVersion: v1\n      kind: Secret\n      name: app-secrets\n      namespace: default\n      path: \"secrets/app.yaml\"\n      strategy: \"template\"\n      template: |\n        # Secret metadata (values redacted for security)\n        apiVersion: v1\n        kind: Secret\n        metadata:\n          name: {{ .metadata.name }}\n          namespace: {{ .metadata.namespace }}\n        type: {{ .type }}\n        data:\n        {{ range $key, $value := .data }}\n          {{ $key }}: \"[REDACTED-{{ $value | len }}-bytes]\"\n        {{ end }}\n    - apiVersion: apps/v1\n      kind: Deployment\n      name: myapp\n      namespace: default\n      path: \"deployments/myapp.yaml\"\n</code></pre>"},{"location":"user-guide/pullrequest/#conditional-pr-creation","title":"Conditional PR Creation","text":"<p>Create PRs based on conditions:</p> <pre><code>spec:\n  # Only create PR if conditions are met\n  conditions:\n    - field: \".metadata.labels.environment\"\n      operator: \"equals\"\n      value: \"production\"\n    - field: \".spec.replicas\"\n      operator: \"greaterThan\"\n      value: 1\n\n  # Template with conditional logic\n  body: |\n    # Configuration Update\n\n    {{ if eq .metadata.labels.environment \"production\" }}\n    \u26a0\ufe0f **PRODUCTION CHANGE** - This change affects the production environment.\n\n    Additional review required from:\n    - Platform Engineering Team\n    - Security Team\n    {{ end }}\n\n    ## Resource Details\n    - **Name**: {{ .metadata.name }}\n    - **Namespace**: {{ .metadata.namespace }}\n    - **Environment**: {{ .metadata.labels.environment }}\n</code></pre>"},{"location":"user-guide/pullrequest/#auto-merge-configuration","title":"Auto-Merge Configuration","text":"<p>Configure automatic merging for trusted changes:</p> <pre><code>spec:\n  autoMerge:\n    enabled: true\n    strategy: \"squash\"  # merge, squash, rebase\n\n    # Conditions that must be met before auto-merge\n    conditions:\n      - allChecksPass: true\n      - reviewApproved: true\n      - upToDate: true\n      - noConflicts: true\n\n    # Additional requirements\n    requirements:\n      minApprovals: 2\n      dismissStaleReviews: true\n      requireCodeOwnerReviews: true\n      requiredStatusChecks:\n        - \"continuous-integration\"\n        - \"security-scan\"\n        - \"config-validation\"\n\n    # Auto-merge delays\n    delays:\n      afterCreation: \"30m\"   # Wait 30 minutes after creation\n      afterUpdate: \"10m\"     # Wait 10 minutes after updates\n      afterApproval: \"5m\"    # Wait 5 minutes after final approval\n</code></pre>"},{"location":"user-guide/pullrequest/#file-encryption","title":"File Encryption","text":"<p>Encrypt sensitive files before committing them to the repository using age encryption:</p> <pre><code>spec:\n  # Basic encryption setup with SSH public key\n  encryption:\n    enabled: true\n    recipients:\n      - type: ssh\n        secretRef:\n          name: ssh-keys\n          key: id_rsa.pub\n\n  files:\n    - path: \"secrets/database.yaml\"\n      content: |\n        database:\n          host: db.example.com\n          password: super-secret-password\n          ssl_cert: |\n            -----BEGIN CERTIFICATE-----\n            MIIBkTCB+wIJANfKvPOD7JEBMA0GCSqGSIb3DQEBBQUAMBkx...\n            -----END CERTIFICATE-----\n</code></pre> <p>Advanced encryption with multiple recipient types:</p> <pre><code>spec:\n  encryption:\n    enabled: true\n    fileExtension: \".encrypted\"  # Custom extension (default: .age)\n    recipients:\n      # Age key recipient\n      - type: age\n        secretRef:\n          name: age-keys\n          key: public-key\n\n      # SSH key recipient (uses SSH public key)\n      - type: ssh\n        secretRef:\n          name: ssh-keys\n          key: id_rsa.pub\n\n      # Passphrase recipient\n      - type: passphrase\n        secretRef:\n          name: passwords\n          key: encryption-passphrase\n\n      # YubiKey recipient (hardware security key)\n      - type: yubikey\n        secretRef:\n          name: yubikey-piv\n          key: public-key\n\n  resourceRefs:\n    - apiVersion: v1\n      kind: Secret\n      name: app-secrets\n      namespace: default\n      path: \"secrets/app-secrets.yaml\"\n      # This will be encrypted as secrets/app-secrets.yaml.encrypted\n</code></pre> <p>Encryption secrets setup:</p> <pre><code># Create age key secret\napiVersion: v1\nkind: Secret\nmetadata:\n  name: age-keys\n  namespace: default\ndata:\n  public-key: YWdlMXh4eGJ4eGJ4eGJ4eGJ4eGJ4eGJ4eGJ4eGJ4eGJ4eGJ4...\n\n---\n# Create SSH key secret\napiVersion: v1\nkind: Secret\nmetadata:\n  name: ssh-keys  \n  namespace: default\ndata:\n  id_rsa.pub: c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FD...\n\n---\n# Create passphrase secret\napiVersion: v1\nkind: Secret\nmetadata:\n  name: passwords\n  namespace: default\ndata:\n  encryption-passphrase: bXktc2VjdXJlLXBhc3NwaHJhc2U=  # my-secure-passphrase\n\n---\n# Create YubiKey secret\napiVersion: v1\nkind: Secret\nmetadata:\n  name: yubikey-piv\n  namespace: default\ndata:\n  public-key: c2stcHV0dHk6QUFBQUIzTnphQzF5YzJFQUFBQURBUUFCQUFBQmdRRHo...\n</code></pre> <p>Benefits of encryption: - Security: Sensitive data is encrypted before being stored in Git - Compliance: Meet security requirements for storing secrets in repositories - Flexibility: Support for multiple encryption methods (age keys, SSH keys, passphrases, YubiKeys) - GitOps-ready: Encrypted files can be safely stored in public repositories</p>"},{"location":"user-guide/pullrequest/#complete-encryption-examples","title":"Complete Encryption Examples","text":""},{"location":"user-guide/pullrequest/#basic-encrypted-pullrequest","title":"Basic Encrypted PullRequest","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: encrypted-config-pr\n  namespace: default\nspec:\n  repository: \"https://github.com/myorg/secure-configs.git\"\n  baseBranch: \"main\"\n  headBranch: \"encrypted-secrets-update\"\n  title: \"Update encrypted application secrets\"\n  body: |\n    Automated update of encrypted configuration files.\n\n    Files are encrypted using age encryption for secure storage.\n\n    **Files Updated:**\n    - Database credentials\n    - API keys\n    - TLS certificates\n\n  authSecretRef: \"git-credentials\"\n\n  # Encryption Configuration\n  encryption:\n    enabled: true\n    fileExtension: \".encrypted\"  # Files will be saved as .encrypted\n    recipients:\n      - type: ssh\n        secretRef:\n          name: ssh-keys\n          key: id_rsa.pub\n\n  files:\n    - path: \"secrets/database.yaml\"\n      content: |\n        database:\n          host: \"production-db.example.com\"\n          username: \"app_user\"\n          password: \"super-secret-password-123\"\n          ssl_mode: \"require\"\n\n    - path: \"secrets/api-keys.yaml\"\n      content: |\n        api:\n          stripe_key: \"sk_live_abcdefghijklmnop\"\n          sendgrid_key: \"SG.xyz123.abc456\"\n          oauth_secret: \"oauth_secret_token_xyz\"\n</code></pre>"},{"location":"user-guide/pullrequest/#multi-recipient-encryption-with-yubikey","title":"Multi-Recipient Encryption with YubiKey","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: multi-encryption-pr\n  namespace: default\nspec:\n  repository: \"https://github.com/myorg/enterprise-config.git\"\n  baseBranch: \"main\"\n  headBranch: \"multi-encrypted-update\"\n  title: \"Multi-encrypted configuration update\"\n\n  authSecretRef: \"git-credentials\"\n\n  # Multiple Encryption Recipients\n  encryption:\n    enabled: true\n    recipients:\n      # Team SSH keys\n      - type: ssh\n        secretRef:\n          name: team-ssh-keys\n          key: devops-team.pub\n\n      # Hardware security keys\n      - type: yubikey\n        secretRef:\n          name: security-team-yubikeys\n          key: security-officer.pub\n\n      # Emergency age key\n      - type: age\n        secretRef:\n          name: emergency-keys\n          key: break-glass-key\n\n      # Backup passphrase\n      - type: passphrase\n        secretRef:\n          name: backup-auth\n          key: recovery-passphrase\n\n  # Reference existing Kubernetes resources\n  resourceReferences:\n    - apiVersion: v1\n      kind: Secret\n      name: app-secrets\n      namespace: production\n      strategy: dump\n      output:\n        path: \"production/secrets/app-secrets.yaml\"\n        # Will be encrypted as: production/secrets/app-secrets.yaml.encrypted\n\n    - apiVersion: v1\n      kind: ConfigMap\n      name: database-config\n      namespace: production\n      strategy: fields\n      output:\n        path: \"production/config/\"\n        # Each field becomes a separate encrypted file\n</code></pre>"},{"location":"user-guide/pullrequest/#encrypted-resource-backup","title":"Encrypted Resource Backup","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: backup-secrets-pr\n  namespace: backup-system\nspec:\n  repository: \"https://github.com/myorg/cluster-backups.git\"\n  baseBranch: \"main\"\n  headBranch: \"automated-backup\"\n  title: \"Automated encrypted backup of cluster secrets\"\n\n  authSecretRef: \"backup-git-credentials\"\n\n  encryption:\n    enabled: true\n    recipients:\n      - type: yubikey\n        secretRef:\n          name: backup-yubikey\n          key: backup-officer.pub\n\n  # Backup multiple secrets across namespaces\n  resourceReferences:\n    # Production secrets\n    - apiVersion: v1\n      kind: Secret\n      name: database-credentials\n      namespace: production\n      strategy: dump\n      output:\n        path: \"backups/production/database-credentials.yaml\"\n\n    # Staging secrets  \n    - apiVersion: v1\n      kind: Secret\n      name: api-tokens\n      namespace: staging\n      strategy: dump\n      output:\n        path: \"backups/staging/api-tokens.yaml\"\n\n    # Certificate secrets\n    - apiVersion: v1\n      kind: Secret\n      name: tls-certificates\n      namespace: cert-manager\n      strategy: fields\n      output:\n        path: \"backups/certificates/\"\n        # Each certificate becomes a separate encrypted file\n</code></pre>"},{"location":"user-guide/pullrequest/#setting-up-encryption-secrets","title":"Setting Up Encryption Secrets","text":"<pre><code># 1. SSH Key Secret\nkubectl create secret generic ssh-keys \\\n  --from-file=id_rsa.pub=~/.ssh/id_rsa.pub \\\n  --namespace=default\n\n# 2. YubiKey Secret (extract public key from YubiKey PIV)\nkubectl create secret generic yubikey-piv \\\n  --from-literal=public-key=\"$(ykman piv keys export 9a - | ssh-keygen -i -m PKCS8 -f /dev/stdin)\" \\\n  --namespace=default\n\n# 3. Age Key Secret  \nage-keygen -o age-key.txt\nkubectl create secret generic age-keys \\\n  --from-file=public-key=&lt;(grep 'public key:' age-key.txt | cut -d: -f2 | tr -d ' ') \\\n  --namespace=default\n\n# 4. Passphrase Secret\nkubectl create secret generic passwords \\\n  --from-literal=encryption-passphrase=\"my-secure-recovery-phrase\" \\\n  --namespace=default\n</code></pre>"},{"location":"user-guide/pullrequest/#pr-templates-and-customization","title":"PR Templates and Customization","text":""},{"location":"user-guide/pullrequest/#dynamic-pr-titles","title":"Dynamic PR Titles","text":"<pre><code>spec:\n  title: |\n    {{ if eq .resourceRef.kind \"Secret\" }}\ud83d\udd10{{ else if eq .resourceRef.kind \"ConfigMap\" }}\u2699\ufe0f{{ else }}\ud83d\udcdd{{ end }} \n    {{ .resourceRef.kind }}/{{ .resourceRef.name }} update in {{ .resourceRef.namespace }}\n    {{- if .metadata.labels.environment }} ({{ .metadata.labels.environment }}){{ end }}\n</code></pre>"},{"location":"user-guide/pullrequest/#rich-pr-bodies","title":"Rich PR Bodies","text":"<pre><code>spec:\n  body: |\n    # \ud83e\udd16 Automated Resource Update\n\n    ## Summary\n    This PR updates the **{{ .resourceRef.kind }}** `{{ .resourceRef.name }}` in namespace `{{ .resourceRef.namespace }}`.\n\n    ## Resource Information\n    | Field | Value |\n    |-------|-------|\n    | **Kind** | {{ .resourceRef.kind }} |\n    | **Name** | {{ .resourceRef.name }} |\n    | **Namespace** | {{ .resourceRef.namespace }} |\n    | **Cluster** | {{ .cluster.name }} |\n    | **Environment** | {{ .metadata.labels.environment | default \"unknown\" }} |\n    | **Updated** | {{ .timestamp | date \"2006-01-02 15:04:05 UTC\" }} |\n\n    ## Changes\n    {{ if .diff }}\n    ```diff\n    {{ .diff }}\n    ```\n    {{ else }}\n    New resource - no previous version available.\n    {{ end }}\n\n    ## Validation\n    - [x] Resource syntax is valid\n    - [x] All required fields are present  \n    - [ ] Manual review completed\n    - [ ] Security implications assessed\n\n    {{ if eq .metadata.labels.environment \"production\" }}\n    ## \u26a0\ufe0f Production Impact\n    This change affects the **production** environment. Please ensure:\n    1. Change has been tested in staging\n    2. Rollback plan is ready\n    3. Monitoring is in place\n    4. Team is notified\n    {{ end }}\n\n    ---\n    &lt;details&gt;\n    &lt;summary&gt;\ud83d\udd0d Resource Details&lt;/summary&gt;\n\n    ```yaml\n    {{ .resourceContent | indent 4 }}\n    ```\n    &lt;/details&gt;\n\n    *Automated by git-change-operator \u2022 [Documentation](https://github.com/myorg/git-change-operator/docs)*\n</code></pre>"},{"location":"user-guide/pullrequest/#provider-specific-configuration","title":"Provider-Specific Configuration","text":""},{"location":"user-guide/pullrequest/#github-configuration","title":"GitHub Configuration","text":"<pre><code>spec:\n  provider: \"github\"  # Default\n\n  # GitHub-specific options\n  github:\n    # Organization settings\n    organization: \"myorg\"\n\n    # PR settings\n    allowMaintainerEdit: true\n    deleteHeadBranch: true\n\n    # Draft PR settings\n    draft: false\n\n    # Issue linking\n    linkedIssues:\n      - number: 123\n        action: \"closes\"  # closes, fixes, resolves\n</code></pre>"},{"location":"user-guide/pullrequest/#gitlab-configuration","title":"GitLab Configuration","text":"<pre><code>spec:\n  provider: \"gitlab\"\n\n  # GitLab-specific options (merge requests)\n  gitlab:\n    # Project settings\n    projectID: 12345\n\n    # Merge request settings\n    removeSourceBranch: true\n    squash: true\n\n    # Approval settings\n    approvalsRequired: 2\n\n    # Milestone and labels\n    milestoneID: 5\n    labels: [\"automated\", \"config-sync\"]\n</code></pre>"},{"location":"user-guide/pullrequest/#bitbucket-configuration","title":"Bitbucket Configuration","text":"<pre><code>spec:\n  provider: \"bitbucket\"\n\n  # Bitbucket-specific options\n  bitbucket:\n    # Workspace settings\n    workspace: \"myworkspace\"\n\n    # PR settings\n    closeSourceBranch: true\n\n    # Default reviewers\n    defaultReviewers:\n      - \"platform-team\"\n</code></pre>"},{"location":"user-guide/pullrequest/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"user-guide/pullrequest/#metrics","title":"Metrics","text":"<p>Monitor PullRequest operations:</p> <pre><code># Total PullRequest operations\ngit_change_operator_pullrequest_operations_total\n\n# PR creation success rate\nrate(git_change_operator_pullrequest_operations_total{status=\"success\",operation=\"create\"}[5m])\n\n# Average PR processing time\ngit_change_operator_pullrequest_duration_seconds\n\n# Open PRs by namespace\ngit_change_operator_pullrequest_open_total\n</code></pre>"},{"location":"user-guide/pullrequest/#events","title":"Events","text":"<p>Monitor PullRequest events:</p> <pre><code># View PullRequest events\nkubectl describe pullrequest mypr\n\n# Example events\nEvents:\n  Type    Reason              Age   From                        Message\n  ----    ------              ----  ----                        -------\n  Normal  BranchCreated       5m    pullrequest-controller      Created branch 'auto-update-20240115'\n  Normal  ResourceFetched     5m    pullrequest-controller      Successfully fetched resource data\n  Normal  FileCommitted       4m    pullrequest-controller      Committed file to branch\n  Normal  PRCreated          4m    pullrequest-controller      Pull request created: #123\n  Normal  PRUpdated          2m    pullrequest-controller      Pull request updated with latest changes\n</code></pre>"},{"location":"user-guide/pullrequest/#alerting","title":"Alerting","text":"<p>Set up alerts for PullRequest issues:</p> <pre><code># Prometheus alert rules\ngroups:\n- name: git-change-operator-pullrequest\n  rules:\n  - alert: PullRequestCreationFailed\n    expr: increase(git_change_operator_pullrequest_operations_total{status=\"failed\",operation=\"create\"}[5m]) &gt; 0\n    for: 0m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"PullRequest creation failed\"\n      description: \"Failed to create pull request for {{ $labels.pullrequest }}\"\n\n  - alert: PullRequestStale  \n    expr: (time() - git_change_operator_pullrequest_last_update_time) &gt; 604800  # 1 week\n    for: 0m\n    labels:\n      severity: info\n    annotations:\n      summary: \"PullRequest is stale\"\n      description: \"PullRequest {{ $labels.pullrequest }} has not been updated for over 1 week\"\n</code></pre>"},{"location":"user-guide/pullrequest/#security-considerations","title":"Security Considerations","text":""},{"location":"user-guide/pullrequest/#token-permissions","title":"Token Permissions","text":"<p>Minimize required permissions:</p> <pre><code># GitHub token with minimal permissions\n# For public repos: public_repo\n# For private repos: repo\n# Additional: workflow (if updating GitHub Actions)\n\n# Store token securely\napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-token-minimal\n  namespace: git-change-operator-system\ntype: Opaque\ndata:\n  token: &lt;base64-encoded-token&gt;\n</code></pre>"},{"location":"user-guide/pullrequest/#sensitive-data-protection","title":"Sensitive Data Protection","text":"<p>Prevent sensitive data in PRs:</p> <pre><code>spec:\n  resourceRef:\n    apiVersion: v1\n    kind: Secret\n    name: app-secrets\n    path: \"secrets/app-secrets.yaml\"\n    strategy: \"template\"\n    template: |\n      # Sanitized secret for PR review\n      apiVersion: v1\n      kind: Secret\n      metadata:\n        name: {{ .metadata.name }}\n        namespace: {{ .metadata.namespace }}\n      type: {{ .type }}\n      data:\n      {{ range $key, $value := .data }}\n        {{ $key }}: \"[REDACTED]\"  # Don't expose actual values\n      {{ end }}\n\n      # Metadata for reviewers\n      _metadata:\n        originalKeys: {{ keys .data | join \", \" }}\n        keyCount: {{ len .data }}\n        lastUpdated: {{ .timestamp }}\n</code></pre>"},{"location":"user-guide/pullrequest/#rbac-configuration","title":"RBAC Configuration","text":"<pre><code># Minimal RBAC for PullRequest operations\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: pullrequest-operator\nrules:\n# PullRequest resources\n- apiGroups: [\"gco.galos.one\"]\n  resources: [\"pullrequests\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"gco.galos.one\"]  \n  resources: [\"pullrequests/status\"]\n  verbs: [\"get\", \"update\", \"patch\"]\n\n# Referenced resources (minimal read access)\n- apiGroups: [\"\"]\n  resources: [\"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\", \"statefulsets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n</code></pre>"},{"location":"user-guide/pullrequest/#use-cases-and-patterns","title":"Use Cases and Patterns","text":""},{"location":"user-guide/pullrequest/#configuration-review-workflow","title":"Configuration Review Workflow","text":"<p>Implement a configuration review process:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: config-review-workflow\nspec:\n  repository: \"https://github.com/myorg/k8s-configs.git\"\n  baseBranch: \"main\"\n  headBranch: \"review/{{ .metadata.namespace }}-{{ .metadata.name }}\"\n\n  title: \"\ud83d\udccb Configuration Review: {{ .metadata.name }}\"\n  body: |\n    # Configuration Review Required\n\n    A configuration change has been detected and requires review before deployment.\n\n    ## Change Details\n    - **Resource**: {{ .resourceRef.kind }}/{{ .resourceRef.name }}\n    - **Namespace**: {{ .resourceRef.namespace }}\n    - **Environment**: {{ .metadata.labels.environment }}\n\n    ## Review Checklist\n    - [ ] Configuration follows security guidelines\n    - [ ] Resource limits are appropriate\n    - [ ] No hardcoded secrets or credentials\n    - [ ] Backwards compatibility maintained\n    - [ ] Documentation updated (if needed)\n\n    ## Deployment Plan\n    1. Merge this PR to update the configuration repository\n    2. CI/CD pipeline will validate the changes\n    3. Automatic deployment to {{ .metadata.labels.environment }} environment\n    4. Monitor deployment and rollback if needed\n\n  labels: [\"config-review\", \"{{ .metadata.labels.environment }}\"]\n  reviewers: [\"config-team\", \"security-team\"]\n  draft: false\n</code></pre>"},{"location":"user-guide/pullrequest/#multi-environment-promotion","title":"Multi-Environment Promotion","text":"<p>Promote configurations across environments:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: env-promotion\nspec:\n  repository: \"https://github.com/myorg/env-configs.git\"\n  baseBranch: \"production\"\n  headBranch: \"promote/staging-to-prod\"\n\n  title: \"\ud83d\ude80 Promote {{ .metadata.name }} from staging to production\"\n  body: |\n    # Environment Promotion\n\n    This PR promotes configuration from **staging** to **production**.\n\n    ## Staging Validation\n    - [x] Configuration deployed successfully in staging\n    - [x] All tests passing\n    - [x] Performance benchmarks met\n    - [x] Security scan completed\n\n    ## Production Deployment Checklist\n    - [ ] Deployment window scheduled\n    - [ ] Monitoring alerts configured\n    - [ ] Rollback plan prepared\n    - [ ] Team notified\n\n    ## Risk Assessment\n    **Risk Level**: {{ .metadata.labels.risk | default \"Medium\" }}\n\n    {{ if eq .metadata.labels.risk \"High\" }}\n    \u26a0\ufe0f **HIGH RISK CHANGE** - Additional approvals required\n    {{ end }}\n\n  conditions:\n    - field: \".metadata.labels.environment\"\n      operator: \"equals\"\n      value: \"staging\"\n    - field: \".metadata.labels.validated\"\n      operator: \"equals\"\n      value: \"true\"\n</code></pre>"},{"location":"user-guide/pullrequest/#compliance-and-audit-trail","title":"Compliance and Audit Trail","text":"<p>Maintain compliance with automated documentation:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: compliance-audit\nspec:\n  repository: \"https://github.com/myorg/compliance-records.git\"\n  baseBranch: \"main\"\n  headBranch: \"audit/{{ .timestamp | date \"2006-01\" }}/{{ .metadata.name }}\"\n\n  title: \"\ud83d\udcca Compliance Record: {{ .metadata.name }} - {{ .timestamp | date \"January 2006\" }}\"\n  body: |\n    # Compliance Audit Record\n\n    ## Change Summary\n    - **Date**: {{ .timestamp | date \"2006-01-02 15:04:05 UTC\" }}\n    - **Resource**: {{ .resourceRef.kind }}/{{ .resourceRef.name }}\n    - **Namespace**: {{ .resourceRef.namespace }}\n    - **Change Type**: {{ .changeType | default \"Configuration Update\" }}\n    - **Initiated By**: {{ .initiator | default \"System Automation\" }}\n\n    ## Compliance Verification\n    - [x] Change follows organizational policies\n    - [x] Appropriate approvals obtained\n    - [x] Security implications assessed\n    - [x] Data classification reviewed\n    - [x] Retention policies applied\n\n    ## Audit Trail\n    | Field | Before | After |\n    |-------|--------|-------|\n    {{ range .changes }}\n    | {{ .field }} | {{ .before }} | {{ .after }} |\n    {{ end }}\n\n    ## Supporting Documentation\n    - Configuration Repository: [Link]({{ .configRepo }})\n    - Change Request: {{ .changeRequestID | default \"N/A\" }}\n    - Approval Workflow: [Link]({{ .approvalWorkflow }})\n\n  resourceRef:\n    path: \"audit-records/{{ .timestamp | date \"2006/01\" }}/{{ .metadata.name }}.md\"\n\n  labels: [\"compliance\", \"audit\", \"{{ .metadata.labels.classification }}\"]\n  assignees: [\"compliance-team\"]\n</code></pre>"},{"location":"user-guide/pullrequest/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/pullrequest/#common-issues","title":"Common Issues","text":""},{"location":"user-guide/pullrequest/#authentication-failures","title":"Authentication Failures","text":"<pre><code># Check token permissions\nkubectl get secret github-token -o yaml\n\n# Test token manually\ncurl -H \"Authorization: token $(echo '&lt;base64-token&gt;' | base64 -d)\" \\\n     https://api.github.com/user\n\n# Common errors:\n# - Token expired\n# - Insufficient permissions\n# - Invalid repository URL\n</code></pre>"},{"location":"user-guide/pullrequest/#branch-creation-failures","title":"Branch Creation Failures","text":"<pre><code># Check PullRequest status\nkubectl describe pullrequest mypr\n\n# Common errors:\n# - Branch already exists (check branchOptions.updateIfExists)\n# - Base branch doesn't exist\n# - Insufficient repository permissions\n</code></pre>"},{"location":"user-guide/pullrequest/#pr-creation-failures","title":"PR Creation Failures","text":"<pre><code># Check controller logs\nkubectl logs -n git-change-operator-system -l control-plane=controller-manager\n\n# Common errors:\n# - API rate limits exceeded\n# - Invalid PR template\n# - Repository not found\n# - Network connectivity issues\n</code></pre>"},{"location":"user-guide/pullrequest/#debug-commands","title":"Debug Commands","text":"<pre><code># Check PullRequest resources\nkubectl get pullrequest -A -o wide\n\n# Get detailed status\nkubectl get pullrequest mypr -o jsonpath='{.status}' | jq\n\n# View events\nkubectl get events --field-selector involvedObject.name=mypr\n\n# Test resource references\nkubectl get configmap app-config -o yaml\n</code></pre>"},{"location":"user-guide/pullrequest/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/pullrequest/#pr-management","title":"PR Management","text":"<ol> <li>Use descriptive titles that clearly indicate the change</li> <li>Provide comprehensive descriptions with context and impact</li> <li>Include validation checklists for reviewers</li> <li>Link to related issues and documentation</li> <li>Set appropriate labels for filtering and automation</li> </ol>"},{"location":"user-guide/pullrequest/#branch-strategy","title":"Branch Strategy","text":"<ol> <li>Use meaningful branch names with consistent patterns</li> <li>Clean up branches after PR merge</li> <li>Protect important branches from direct pushes</li> <li>Use branch prefixes to categorize changes</li> </ol>"},{"location":"user-guide/pullrequest/#review-process","title":"Review Process","text":"<ol> <li>Assign appropriate reviewers based on change impact</li> <li>Require approvals for sensitive changes</li> <li>Use draft PRs for work-in-progress changes</li> <li>Enable auto-merge for trusted automated changes</li> <li>Set up status checks to validate changes</li> </ol>"},{"location":"user-guide/pullrequest/#security","title":"Security","text":"<ol> <li>Use minimal token permissions required for operations</li> <li>Rotate tokens regularly and monitor usage</li> <li>Audit PR creation and review processes</li> <li>Sanitize sensitive data before including in PRs</li> <li>Monitor for unauthorized changes</li> </ol>"},{"location":"user-guide/pullrequest/#next-steps","title":"Next Steps","text":"<ul> <li>Authentication Guide - Set up secure Git authentication</li> <li>GitCommit Resources - Learn about direct Git commits</li> <li>Examples - See real-world PR automation examples</li> <li>Advanced Patterns - Complex workflow examples</li> </ul> <p>For enterprise PullRequest patterns, see our Corporate Setup Guide.</p>"},{"location":"user-guide/quick-start/","title":"Quick Start","text":"<p>Get up and running with the Git Change Operator in just a few minutes.</p>"},{"location":"user-guide/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster (v1.19+)</li> <li><code>kubectl</code> configured to access your cluster</li> <li>Helm 3.x installed</li> <li>GitHub personal access token or Git credentials</li> </ul>"},{"location":"user-guide/quick-start/#installation","title":"Installation","text":""},{"location":"user-guide/quick-start/#1-install-the-operator","title":"1. Install the Operator","text":"<p>Using Helm (recommended):</p> <pre><code># Add the repository\nhelm repo add git-change-operator https://raw.githubusercontent.com/mihaigalos/git-change-operator/helm-chart/\nhelm repo update\n\n# Install the operator\nhelm install git-change-operator git-change-operator/git-change-operator\n</code></pre> <p>Or install from source:</p> <pre><code># Clone the repository\ngit clone https://github.com/mihaigalos/git-change-operator.git\ncd git-change-operator\n\n# Install using Helm\nhelm install git-change-operator ./helm/git-change-operator/\n</code></pre>"},{"location":"user-guide/quick-start/#2-verify-installation","title":"2. Verify Installation","text":"<pre><code># Check if the operator is running\nkubectl get pods -l app=git-change-operator\n\n# Expected output:\n# NAME                                     READY   STATUS    RESTARTS   AGE\n# git-change-operator-xxx-xxx             1/1     Running   0          1m\n</code></pre>"},{"location":"user-guide/quick-start/#3-set-up-authentication","title":"3. Set Up Authentication","text":"<p>Create a Kubernetes Secret with your Git credentials:</p> GitHub TokenGit Credentials <pre><code># Create secret with GitHub personal access token\nkubectl create secret generic git-token \\\n  --from-literal=token=ghp_your_github_token_here \\\n  --from-literal=username=your-github-username\n</code></pre> <pre><code># Create secret with username/password\nkubectl create secret generic git-token \\\n  --from-literal=username=your-git-username \\\n  --from-literal=password=your-git-password\n</code></pre> <p>Tip</p> <p>For GitHub, ensure your personal access token has the following scopes:</p> <ul> <li><code>repo</code> (for repository access)</li> <li><code>pull_requests:write</code> (for creating pull requests)</li> </ul>"},{"location":"user-guide/quick-start/#your-first-gitcommit","title":"Your First GitCommit","text":"<p>Let's create a simple GitCommit that adds a configuration file to a Git repository.</p>"},{"location":"user-guide/quick-start/#1-create-a-test-gitcommit","title":"1. Create a Test GitCommit","text":"<p>Save this as <code>first-commit.yaml</code>:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: my-first-commit\n  namespace: default\nspec:\n  repository: https://github.com/your-username/test-repo.git\n  branch: main\n  commitMessage: \"Add configuration from Kubernetes operator\"\n  authSecretRef: git-token\n  files:\n    - path: config/app-settings.yaml\n      content: |\n        # Application Configuration\n        # Generated by Git Change Operator\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          name: app-settings\n        data:\n          environment: production\n          log_level: info\n          database_host: postgres.example.com\n          feature_flags: |\n            feature_a: true\n            feature_b: false\n</code></pre>"},{"location":"user-guide/quick-start/#2-apply-the-gitcommit","title":"2. Apply the GitCommit","text":"<pre><code>kubectl apply -f first-commit.yaml\n</code></pre>"},{"location":"user-guide/quick-start/#3-check-the-status","title":"3. Check the Status","text":"<pre><code># Check the GitCommit status\nkubectl get gitcommits my-first-commit\n\n# Get detailed status\nkubectl get gitcommits my-first-commit -o yaml\n</code></pre> <p>You should see output like: <pre><code>NAME              REPOSITORY                                   BRANCH   PHASE      COMMIT HASH\nmy-first-commit   https://github.com/your-username/test-repo   main     Committed  abc123def456\n</code></pre></p>"},{"location":"user-guide/quick-start/#4-verify-in-git","title":"4. Verify in Git","text":"<p>Check your Git repository - you should see a new commit with the file <code>config/app-settings.yaml</code>.</p>"},{"location":"user-guide/quick-start/#your-first-pullrequest","title":"Your First PullRequest","text":"<p>Now let's create a PullRequest resource:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: PullRequest\nmetadata:\n  name: my-first-pr\n  namespace: default\nspec:\n  repository: https://github.com/your-username/test-repo.git\n  baseBranch: main\n  headBranch: feature/operator-config\n  title: \"Add configuration via Git Change Operator\"\n  body: |\n    This PR was created automatically by the Git Change Operator.\n\n    Changes:\n    - Added application configuration\n    - Set up production settings\n  authSecretRef: git-token\n  files:\n    - path: config/database.yaml\n      content: |\n        apiVersion: v1\n        kind: Secret\n        metadata:\n          name: database-config\n        type: Opaque\n        stringData:\n          host: postgres.example.com\n          port: \"5432\"\n          database: myapp\n</code></pre> <p>Apply it: <pre><code>kubectl apply -f first-pr.yaml\n</code></pre></p> <p>Check the status: <pre><code>kubectl get pullrequests my-first-pr\n</code></pre></p>"},{"location":"user-guide/quick-start/#working-with-existing-resources","title":"Working with Existing Resources","text":"<p>One of the most powerful features is referencing existing Kubernetes resources:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: export-configmap\n  namespace: default\nspec:\n  repository: https://github.com/your-username/k8s-configs.git\n  branch: main\n  commitMessage: \"Export ConfigMap: {{ .ResourceName }}\"\n  authSecretRef: git-token\n  resourceRefs:\n    - name: app-config\n      kind: ConfigMap\n      strategy:\n        type: dump\n        path: exported-configs\n</code></pre> <p>This will: 1. Find the <code>app-config</code> ConfigMap in the default namespace 2. Export it as YAML to <code>exported-configs/app-config.yaml</code> 3. Commit it to the Git repository</p>"},{"location":"user-guide/quick-start/#next-steps","title":"Next Steps","text":"<p>\ud83c\udf89 Congratulations! You've successfully set up the Git Change Operator and created your first automated Git operations.</p>"},{"location":"user-guide/quick-start/#learn-more","title":"Learn More","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>Resource References - Advanced resource reference patterns  </li> <li>Examples - Real-world use cases and patterns</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"user-guide/quick-start/#common-next-tasks","title":"Common Next Tasks","text":"<ol> <li>Set up monitoring: Add Prometheus metrics collection</li> <li>Configure RBAC: Limit operator permissions to required resources</li> <li>Automate workflows: Create GitCommit/PullRequest resources from CI/CD pipelines</li> <li>Export cluster state: Set up regular backups of important configurations</li> </ol>"},{"location":"user-guide/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>Check the troubleshooting section for common issues</li> <li>Review operator logs: <code>kubectl logs -l app=git-change-operator</code></li> </ul>"},{"location":"user-guide/resource-references/","title":"Resource References","text":"<p>The Git Change Operator supports referencing arbitrary Kubernetes resources and committing their content to Git repositories with flexible output strategies. This powerful feature enables you to automatically export cluster state to Git repositories.</p>"},{"location":"user-guide/resource-references/#overview","title":"Overview","text":"<p>Instead of specifying static file content, you can reference existing Kubernetes resources (Secrets, ConfigMaps, Custom Resources, etc.) and have the operator extract and commit their data using various strategies.</p>"},{"location":"user-guide/resource-references/#basic-concept","title":"Basic Concept","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: export-resources\nspec:\n  repository: https://github.com/user/repo.git\n  branch: main\n  commitMessage: \"Export cluster resources\"\n  authSecretRef: git-token\n  resourceRefs:\n    - name: app-config\n      kind: ConfigMap\n      strategy:\n        type: dump\n        path: configs/app\n</code></pre>"},{"location":"user-guide/resource-references/#resource-reference-structure","title":"Resource Reference Structure","text":"<pre><code>resourceRefs:\n  - apiVersion: \"v1\"           # API version of the resource\n    kind: \"ConfigMap\"          # Kind of the resource  \n    name: \"my-config\"          # Name of the resource\n    namespace: \"default\"       # Namespace (optional, defaults to resource namespace)\n    strategy:                  # Output strategy configuration\n      type: \"dump\"             # Output type: dump, fields, or single-field\n      path: \"output/path\"      # Base path for output files\n      writeMode: \"overwrite\"   # Write mode: overwrite or append\n      fieldRef:                # Field reference (for single-field strategy)\n        key: \"fieldname\"       # Field key to extract\n        fileName: \"custom.txt\" # Custom filename (optional)\n</code></pre>"},{"location":"user-guide/resource-references/#output-strategies","title":"Output Strategies","text":""},{"location":"user-guide/resource-references/#dump-strategy","title":"Dump Strategy","text":"<p>Exports the entire resource as YAML, perfect for backing up complete resource definitions.</p> <pre><code>strategy:\n  type: dump\n  path: backups/configmaps\n</code></pre> <p>Example Output: <code>backups/configmaps/my-config.yaml</code> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-config\n  namespace: default\ndata:\n  database.url: postgres://localhost:5432/mydb\n  log.level: info\n</code></pre></p>"},{"location":"user-guide/resource-references/#fields-strategy","title":"Fields Strategy","text":"<p>Extracts all data fields as separate files, useful for exporting configuration files individually.</p> <pre><code>strategy:\n  type: fields\n  path: configs/app\n</code></pre> <p>Example Output: - <code>configs/app/database.url</code> \u2192 <code>postgres://localhost:5432/mydb</code> - <code>configs/app/log.level</code> \u2192 <code>info</code></p>"},{"location":"user-guide/resource-references/#single-field-strategy","title":"Single-Field Strategy","text":"<p>Extracts one specific field, ideal for extracting individual configuration files or secrets.</p> <pre><code>strategy:\n  type: single-field\n  path: configs/database\n  fieldRef:\n    key: database.url\n    fileName: connection.txt\n</code></pre> <p>Example Output: <code>configs/database/connection.txt</code> \u2192 <code>postgres://localhost:5432/mydb</code></p>"},{"location":"user-guide/resource-references/#write-modes","title":"Write Modes","text":""},{"location":"user-guide/resource-references/#overwrite-mode-default","title":"Overwrite Mode (Default)","text":"<p>Replaces existing file content completely.</p> <pre><code>writeMode: overwrite\n</code></pre>"},{"location":"user-guide/resource-references/#append-mode","title":"Append Mode","text":"<p>Adds content to existing files, useful for log aggregation or cumulative exports.</p> <pre><code>writeMode: append\n</code></pre>"},{"location":"user-guide/resource-references/#practical-examples","title":"Practical Examples","text":""},{"location":"user-guide/resource-references/#export-all-configmaps","title":"Export All ConfigMaps","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: backup-configs\nspec:\n  repository: https://github.com/company/k8s-backups.git\n  branch: main\n  commitMessage: \"Backup ConfigMaps - {{.Timestamp}}\"\n  authSecretRef: backup-token\n  resourceRefs:\n    - name: app-config\n      kind: ConfigMap\n      strategy:\n        type: dump\n        path: backups/configmaps\n    - name: database-config\n      kind: ConfigMap  \n      strategy:\n        type: fields\n        path: configs/database\n</code></pre>"},{"location":"user-guide/resource-references/#secret-management","title":"Secret Management","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: export-certificates\nspec:\n  repository: https://github.com/company/certificates.git\n  branch: certificates\n  commitMessage: \"Update TLS certificates\"\n  authSecretRef: cert-manager-token\n  resourceRefs:\n    - name: tls-secret\n      kind: Secret\n      strategy:\n        type: single-field\n        path: certs/api\n        fieldRef:\n          key: tls.crt\n          fileName: certificate.pem\n    - name: tls-secret\n      kind: Secret\n      strategy:\n        type: single-field  \n        path: certs/api\n        fieldRef:\n          key: tls.key\n          fileName: private-key.pem\n</code></pre>"},{"location":"user-guide/resource-references/#custom-resources","title":"Custom Resources","text":"<pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: export-custom-resources\nspec:\n  repository: https://github.com/company/cluster-state.git\n  branch: main\n  commitMessage: \"Export application configurations\"\n  authSecretRef: git-token\n  resourceRefs:\n    - apiVersion: apps.company.com/v1\n      kind: Application\n      name: web-app\n      strategy:\n        type: dump\n        path: applications/web\n    - apiVersion: networking.istio.io/v1beta1\n      kind: VirtualService\n      name: web-routing\n      strategy:\n        type: dump\n        path: networking/virtual-services\n</code></pre>"},{"location":"user-guide/resource-references/#combining-with-static-files","title":"Combining with Static Files","text":"<p>You can mix resource references with static files in the same commit:</p> <pre><code>apiVersion: gco.galos.one/v1\nkind: GitCommit\nmetadata:\n  name: complete-backup\nspec:\n  repository: https://github.com/company/backups.git\n  branch: main\n  commitMessage: \"Complete cluster backup\"\n  authSecretRef: git-token\n  files:\n    - path: README.md\n      content: |\n        # Cluster Backup\n        Generated at: {{.Timestamp}}\n        Cluster: production\n  resourceRefs:\n    - name: app-config\n      kind: ConfigMap\n      strategy:\n        type: dump\n        path: configs\n</code></pre>"},{"location":"user-guide/resource-references/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/resource-references/#security-considerations","title":"Security Considerations","text":"<p>Warning</p> <p>Be careful when exporting Secrets or resources containing sensitive information. Ensure your Git repository has appropriate access controls.</p>"},{"location":"user-guide/resource-references/#path-organization","title":"Path Organization","text":"<p>Use clear, hierarchical paths: <pre><code># Good\npath: backups/production/configmaps\npath: configs/database/connection-strings\npath: certificates/tls/web-app\n\n# Avoid\npath: stuff\npath: data\npath: output\n</code></pre></p>"},{"location":"user-guide/resource-references/#error-handling","title":"Error Handling","text":"<p>The operator will: - Skip resources that don't exist - Log warnings for missing fields - Continue processing other resources if one fails</p>"},{"location":"user-guide/resource-references/#performance-tips","title":"Performance Tips","text":"<ul> <li>Use specific resource references rather than broad exports</li> <li>Consider resource size when using dump strategy</li> <li>Use append mode judiciously to avoid large files</li> </ul>"},{"location":"user-guide/resource-references/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/resource-references/#common-issues","title":"Common Issues","text":"<p>Resource not found: <pre><code>Error: resource \"my-config\" of kind \"ConfigMap\" not found in namespace \"default\"\n</code></pre> - Verify the resource exists: <code>kubectl get configmap my-config</code> - Check the namespace specification</p> <p>Field not found: <pre><code>Warning: field \"missing-key\" not found in ConfigMap \"my-config\"\n</code></pre> - List available fields: <code>kubectl get configmap my-config -o yaml</code> - Verify the field key spelling</p> <p>Permission denied: <pre><code>Error: failed to get resource: configmaps \"my-config\" is forbidden\n</code></pre> - Check RBAC permissions for the operator service account - Ensure the operator can read the referenced resource types</p>"},{"location":"user-guide/resource-references/#debugging","title":"Debugging","text":"<p>Enable debug logging to see detailed resource processing: <pre><code># In operator deployment\nenv:\n  - name: LOG_LEVEL\n    value: debug\n</code></pre></p> <p>Check operator logs: <pre><code>kubectl logs -l app=git-change-operator -f\n</code></pre></p>"}]}