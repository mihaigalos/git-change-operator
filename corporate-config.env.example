# Corporate Build Configuration Example
# Copy this file to corporate-config.env and customize for your environment
# Then run: source corporate-config.env before building

# Go proxy configuration (customize for your corporate environment)
export GOPROXY="https://your-artifactory.company.com/artifactory/api/go/go-remote,direct"
export GOSUMDB="sum.golang.org https://your-artifactory.company.com/artifactory/sum-golang-org-raw-proxy/"
export GONOPROXY=""   # Set domains to bypass proxy (e.g., "github.company.com,internal.company.com")
export GONOSUMDB=""   # Set domains to bypass sumdb 
export GOPRIVATE="code.company.com"  # Private module domains

# Corporate URLs for build tools (overrides public defaults)
export SETUP_ENVTEST_INDEX="https://your-artifactory.company.com/artifactory/api/go/go-remote/kubernetes-sigs/controller-tools/HEAD/envtest-releases.yaml"

# Alpine package repositories for corporate Docker builds (Alpine 3.18)
# Note: Uncomment and adjust these URLs if your corporate Artifactory has Alpine repositories configured
# export APK_MAIN_REPO="https://your-artifactory.company.com/artifactory/alpine-proxy/v3.18/main"
# export APK_COMMUNITY_REPO="https://your-artifactory.company.com/artifactory/alpine-proxy/v3.18/community"

# HTTP proxy configuration (uncomment and configure if needed)
# export HTTP_PROXY="http://your-proxy:8080"
# export HTTPS_PROXY="http://your-proxy:8080"
# export NO_PROXY="localhost,127.0.0.1,.local,.rbi.tech"
# export http_proxy="$HTTP_PROXY"
# export https_proxy="$HTTPS_PROXY"
# export no_proxy="$NO_PROXY"

# Corporate certificate configuration
# Set path to your corporate CA certificate - content will be read and passed to Docker build
# The certificate file should be in PEM format
export SSL_CERT_FILE="/path/to/corporate-ca.pem"
export REQUESTS_CA_BUNDLE="$SSL_CERT_FILE"
export CURL_CA_BUNDLE="$SSL_CERT_FILE"

# Alternative: You can also set the certificate content directly (base64 or PEM format)
# export CORPORATE_CA_CERT="-----BEGIN CERTIFICATE-----
# ... certificate content here ...
# -----END CERTIFICATE-----"

echo "Corporate build configuration loaded!"
echo "GOPROXY: ${GOPROXY:-not set}"
echo "GOSUMDB: ${GOSUMDB:-default}"  
echo "GOPRIVATE: ${GOPRIVATE:-default}"
echo "Certificate file: ${SSL_CERT_FILE:-not configured}"
echo "Certificate file exists: $([ -n "${SSL_CERT_FILE}" ] && [ -f "${SSL_CERT_FILE}" ] && echo 'yes' || echo 'no')"
echo "Certificate content will be passed directly to Docker build (no temporary files needed)"