name: Publish Helm Chart

on:
  push:
    branches: [ main ]
    paths:
      - 'helm/**'
      - '.github/workflows/helm-chart.yaml'
  release:
    types: [published]

permissions:
  contents: write

jobs:
  publish-helm-chart:
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'release'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        # Configure git to use the GitHub token for authentication
        git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'
        
    - name: Set version variables
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          CLEAN_VERSION=${VERSION#v}
          echo "version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
          echo "commit_message=Release Helm chart version ${CLEAN_VERSION}" >> $GITHUB_OUTPUT
        else
          COMMIT_SHA=$(git rev-parse --short HEAD)
          DEV_VERSION="0.0.0-dev-${COMMIT_SHA}"
          echo "version=${DEV_VERSION}" >> $GITHUB_OUTPUT
          echo "commit_message=Update Helm chart development version ${DEV_VERSION}" >> $GITHUB_OUTPUT
        fi
        
    - name: Update Chart versions
      run: |
        sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}/" helm/git-change-operator/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: \"${{ steps.version.outputs.version }}\"/" helm/git-change-operator/Chart.yaml
        
    - name: Prepare helm-chart branch
      run: |
        # Create helm-chart branch if it doesn't exist
        git fetch origin helm-chart:helm-chart 2>/dev/null || git checkout -b helm-chart
        git checkout helm-chart
        
        # Clear the branch and add only the helm chart
        git rm -rf . 2>/dev/null || true
        git clean -fdx
        
        # Checkout helm chart and the config directory it depends on
        git checkout main -- helm/git-change-operator/
        git checkout main -- config/crd/bases/v1/
        
    - name: Setup helm chart structure
      run: |
        # Move helm chart to root and fix symlink paths
        mv helm/git-change-operator/* .
        rm -rf helm/
        
        # Fix all broken symlinks dynamically
        # Find all broken symlinks in crds/ and recreate them with correct paths
        find crds/ -type l -exec test ! -e {} \; -print | while read -r broken_link; do
          # Get the original symlink target (relative to original location)
          original_target=$(readlink "$broken_link")
          # Convert ../../../config to ../config for new location
          new_target=$(echo "$original_target" | sed 's|^\.\./\.\./\.\./config|../config|')
          # Recreate the symlink
          rm -f "$broken_link"
          ln -sf "$new_target" "$broken_link"
          echo "Fixed symlink: $broken_link -> $new_target"
        done
        
    - name: Package and publish
      run: |
        # Package the chart
        helm package .
        
        # Create or update index
        if [ -f index.yaml ]; then
          helm repo index . --merge index.yaml
        else
          helm repo index .
        fi
        
        # Commit and push
        git add .
        git commit -m "${{ steps.version.outputs.commit_message }}"
        git push origin helm-chart