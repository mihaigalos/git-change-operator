name: Docs

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/mkdocs.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
  release:
    types: [published]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  validate-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Build documentation
      run: make docs-build
      
    - name: Check for broken links
      run: |
        echo "Documentation built successfully - no broken internal links found"

  deploy-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for versioning
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/mkdocs/requirements.txt
        
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        # Configure git to use the GitHub token for authentication
        git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
        # Set up authenticated remote for mike
        git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        
    - name: Deploy development version
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        CHART_VERSION=$(yq eval '.version' helm/git-change-operator/Chart.yaml)
        echo "Using version from Chart.yaml: ${CHART_VERSION}"
        yq eval ".extra.version.default = \"${CHART_VERSION}\"" -i mkdocs.yml
        
        # Clean up any potential git state conflicts
        # The docs/ directory might conflict with docs branch name
        git clean -fd

        # Check if gh-pages branch exists remotely and prepare git state
        if ! git ls-remote --exit-code --heads origin gh-pages; then
          echo "Creating new gh-pages branch for first deployment"
          # Create and push an empty gh-pages branch first
          git checkout --orphan gh-pages
          git rm -rf .
          echo "# Documentation" > README.md
          git add README.md
          git commit -m "Initialize gh-pages branch"
          git push origin gh-pages
          # Return to main branch
          git checkout main
        else
          echo "gh-pages branch exists remotely, fetching it locally"
          # Fetch the gh-pages branch to local git state
          git fetch origin gh-pages:gh-pages 2>/dev/null || true
        fi
        
        # Deploy with mike (mike handles branch switching internally)
        mike deploy --push --remote origin --branch gh-pages ${CHART_VERSION} latest --update-aliases
        
    - name: Deploy release version
      if: github.event_name == 'release'
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        # Deploy release version
        mike deploy --push --remote origin --branch gh-pages --update-aliases $VERSION latest
        mike set-default --push --remote origin --branch gh-pages $VERSION