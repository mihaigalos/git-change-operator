name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install controller-gen
      run: go install sigs.k8s.io/controller-tools/cmd/controller-gen@latest

    - name: Run make test
      run: make test

    - name: Run make fmt check
      run: |
        make fmt
        git diff --exit-code --name-only
      
    - name: Run make vet
      run: make vet

    - name: Generate manifests and check for changes
      run: |
        make manifests
        if [[ -n $(git status --porcelain) ]]; then
          echo "Generated manifests are out of date. Please run 'make manifests' and commit the changes."
          git status --porcelain
          git diff
          exit 1
        fi

    - name: Generate code and check for changes
      run: |
        make generate
        if [[ -n $(git status --porcelain) ]]; then
          echo "Generated code is out of date. Please run 'make generate' and commit the changes."
          git status --porcelain
          git diff
          exit 1
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build manager binary
      run: make build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: manager-binary
        path: bin/manager
        retention-days: 1

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install controller-gen
      run: go install sigs.k8s.io/controller-tools/cmd/controller-gen@latest

    - name: Setup test environment for Linux AMD64
      run: |
        # Install setup-envtest tool
        go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
        
        # Use setup-envtest to download and set up the binaries
        export KUBEBUILDER_ASSETS=$(setup-envtest use --arch amd64 --os linux -p path)
        echo "KUBEBUILDER_ASSETS=$KUBEBUILDER_ASSETS" >> $GITHUB_ENV
        echo "Using KUBEBUILDER_ASSETS: $KUBEBUILDER_ASSETS"

    - name: Run integration tests
      run: |
        # Run the integration tests with the environment variable set
        go test -v ./test/suite_test.go ./test/gitcommit_controller_test.go ./test/pullrequest_controller_test.go

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Lint Helm chart
      run: make helm-lint

    - name: Generate Helm template
      run: make helm-template

  # Status check job is needed because integration-test has a conditional `if` clause
  # that may cause it to be skipped. Without this job, GitHub would mark the workflow
  # as successful even if integration tests were skipped due to missing labels.
  # This job ensures we have consistent status reporting regardless of conditional execution.
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [test, build, helm-lint, integration-test]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "=== Job Results ==="
        echo "Test: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Helm Lint: ${{ needs.helm-lint.result }}"
        echo "Integration Test: ${{ needs.integration-test.result }}"
        echo "=================="
        
        if [ "${{ needs.test.result }}" != "success" ] || \
           [ "${{ needs.build.result }}" != "success" ] || \
           [ "${{ needs.helm-lint.result }}" != "success" ] || \
           ([ "${{ needs.integration-test.result }}" != "success" ] && [ "${{ needs.integration-test.result }}" != "skipped" ]); then
          echo "One or more required jobs failed"
          exit 1
        else
          echo "All required jobs passed"
        fi